{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-04-24T20:30:02.038445Z", "invocation_id": "4663f4ab-2824-4ede-9ab4-b86e3c76c63f", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:29.400299Z", "completed_at": "2024-04-24T20:29:29.425048Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:29.430363Z", "completed_at": "2024-04-24T20:29:29.430373Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03278684616088867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.develop.my_first_dbt_model", "compiled": true, "compiled_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55`.`my_first_dbt_model`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:29.419258Z", "completed_at": "2024-04-24T20:29:30.891153Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:30.892783Z", "completed_at": "2024-04-24T20:29:30.892802Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4945471286773682, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`bill_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`bill_id` as INT64) as `bill_id` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_expense_account_id` as INT64) as `account_expense_account_id` ,\n                    cast(`account_expense_billable_status` as STRING) as `account_expense_billable_status` ,\n                    cast(`account_expense_class_id` as INT64) as `account_expense_class_id` ,\n                    cast(`account_expense_customer_id` as INT64) as `account_expense_customer_id` ,\n                    cast(`account_expense_tax_amount` as INT64) as `account_expense_tax_amount` ,\n                    cast(`account_expense_tax_code_id` as STRING) as `account_expense_tax_code_id` ,\n                    cast(`amount` as FLOAT64) as `amount` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`item_expense_billable_status` as STRING) as `item_expense_billable_status` ,\n                    cast(`item_expense_class_id` as INT64) as `item_expense_class_id` ,\n                    cast(`item_expense_customer_id` as INT64) as `item_expense_customer_id` ,\n                    cast(`item_expense_item_id` as INT64) as `item_expense_item_id` ,\n                    cast(`item_expense_quantity` as INT64) as `item_expense_quantity` ,\n                    cast(`item_expense_tax_code_id` as INT64) as `item_expense_tax_code_id` ,\n                    cast(`item_expense_unit_price` as INT64) as `item_expense_unit_price` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`bill_line`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`bill_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`bill_id` as INT64) as `bill_id` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_expense_account_id` as INT64) as `account_expense_account_id` ,\n                    cast(`account_expense_billable_status` as STRING) as `account_expense_billable_status` ,\n                    cast(`account_expense_class_id` as INT64) as `account_expense_class_id` ,\n                    cast(`account_expense_customer_id` as INT64) as `account_expense_customer_id` ,\n                    cast(`account_expense_tax_amount` as INT64) as `account_expense_tax_amount` ,\n                    cast(`account_expense_tax_code_id` as STRING) as `account_expense_tax_code_id` ,\n                    cast(`amount` as FLOAT64) as `amount` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`item_expense_billable_status` as STRING) as `item_expense_billable_status` ,\n                    cast(`item_expense_class_id` as INT64) as `item_expense_class_id` ,\n                    cast(`item_expense_customer_id` as INT64) as `item_expense_customer_id` ,\n                    cast(`item_expense_item_id` as INT64) as `item_expense_item_id` ,\n                    cast(`item_expense_quantity` as INT64) as `item_expense_quantity` ,\n                    cast(`item_expense_tax_code_id` as INT64) as `item_expense_tax_code_id` ,\n                    cast(`item_expense_unit_price` as INT64) as `item_expense_unit_price` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`bill_line`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:29.404687Z", "completed_at": "2024-04-24T20:29:30.965010Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:30.965664Z", "completed_at": "2024-04-24T20:29:30.965670Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5676140785217285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__account_tmp", "compiled": true, "compiled_code": "\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`account`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_number` as INT64) as `account_number` ,\n                    cast(`account_sub_type` as STRING) as `account_sub_type` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`active` as BOOLEAN) as `active` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`balance_with_sub_accounts` as INT64) as `balance_with_sub_accounts` ,\n                    cast(`classification` as STRING) as `classification` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`description` as INT64) as `description` ,\n                    cast(`fully_qualified_name` as STRING) as `fully_qualified_name` ,\n                    cast(`name` as STRING) as `name` ,\n                    cast(`parent_account_id` as INT64) as `parent_account_id` ,\n                    cast(`sub_account` as BOOLEAN) as `sub_account` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`account`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`account`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_number` as INT64) as `account_number` ,\n                    cast(`account_sub_type` as STRING) as `account_sub_type` ,\n                    cast(`account_type` as STRING) as `account_type` ,\n                    cast(`active` as BOOLEAN) as `active` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`balance_with_sub_accounts` as INT64) as `balance_with_sub_accounts` ,\n                    cast(`classification` as STRING) as `classification` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`description` as INT64) as `description` ,\n                    cast(`fully_qualified_name` as STRING) as `fully_qualified_name` ,\n                    cast(`name` as STRING) as `name` ,\n                    cast(`parent_account_id` as INT64) as `parent_account_id` ,\n                    cast(`sub_account` as BOOLEAN) as `sub_account` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`account`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__account_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:29.432209Z", "completed_at": "2024-04-24T20:29:30.980999Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:30.981494Z", "completed_at": "2024-04-24T20:29:30.981500Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.550196886062622, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`bill_linked_txn`' as string) as _dbt_source_relation,\n\n                \n                    cast(`bill_id` as INT64) as `bill_id` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`bill_payment_id` as INT64) as `bill_payment_id` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`bill_linked_txn`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`bill_linked_txn`' as string) as _dbt_source_relation,\n\n                \n                    cast(`bill_id` as INT64) as `bill_id` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`bill_payment_id` as INT64) as `bill_payment_id` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`bill_linked_txn`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_linked_txn_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:29.418351Z", "completed_at": "2024-04-24T20:29:31.205571Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:31.207418Z", "completed_at": "2024-04-24T20:29:31.207443Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.8099079132080078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__address_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`address`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`city` as STRING) as `city` ,\n                    cast(`country` as STRING) as `country` ,\n                    cast(`country_sub_division_code` as STRING) as `country_sub_division_code` ,\n                    cast(`latitude` as INT64) as `latitude` ,\n                    cast(`line_1` as STRING) as `line_1` ,\n                    cast(`line_2` as STRING) as `line_2` ,\n                    cast(`line_3` as INT64) as `line_3` ,\n                    cast(`line_4` as INT64) as `line_4` ,\n                    cast(`line_5` as INT64) as `line_5` ,\n                    cast(`longitude` as INT64) as `longitude` ,\n                    cast(`postal_code` as INT64) as `postal_code` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`address`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`address`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`city` as STRING) as `city` ,\n                    cast(`country` as STRING) as `country` ,\n                    cast(`country_sub_division_code` as STRING) as `country_sub_division_code` ,\n                    cast(`latitude` as INT64) as `latitude` ,\n                    cast(`line_1` as STRING) as `line_1` ,\n                    cast(`line_2` as STRING) as `line_2` ,\n                    cast(`line_3` as INT64) as `line_3` ,\n                    cast(`line_4` as INT64) as `line_4` ,\n                    cast(`line_5` as INT64) as `line_5` ,\n                    cast(`longitude` as INT64) as `longitude` ,\n                    cast(`postal_code` as INT64) as `postal_code` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`address`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__address_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:30.896386Z", "completed_at": "2024-04-24T20:29:32.492110Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:32.493112Z", "completed_at": "2024-04-24T20:29:32.493122Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5987157821655273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`bill_payment_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`bill_payment_id` as INT64) as `bill_payment_id` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`bill_id` as INT64) as `bill_id` ,\n                    cast(`check_id` as INT64) as `check_id` ,\n                    cast(`credit_card_charge_id` as INT64) as `credit_card_charge_id` ,\n                    cast(`credit_card_credit_id` as INT64) as `credit_card_credit_id` ,\n                    cast(`deposit_id` as INT64) as `deposit_id` ,\n                    cast(`expense_id` as INT64) as `expense_id` ,\n                    cast(`journal_entry_id` as INT64) as `journal_entry_id` ,\n                    cast(`linked_bill_payment_id` as INT64) as `linked_bill_payment_id` ,\n                    cast(`vendor_credit_id` as INT64) as `vendor_credit_id` ,\n                    cast(`bill_payment_credit_card_id` as INT64) as `bill_payment_credit_card_id` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`bill_payment_line`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`bill_payment_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`bill_payment_id` as INT64) as `bill_payment_id` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`bill_id` as INT64) as `bill_id` ,\n                    cast(`check_id` as INT64) as `check_id` ,\n                    cast(`credit_card_charge_id` as INT64) as `credit_card_charge_id` ,\n                    cast(`credit_card_credit_id` as INT64) as `credit_card_credit_id` ,\n                    cast(`deposit_id` as INT64) as `deposit_id` ,\n                    cast(`expense_id` as INT64) as `expense_id` ,\n                    cast(`journal_entry_id` as INT64) as `journal_entry_id` ,\n                    cast(`linked_bill_payment_id` as INT64) as `linked_bill_payment_id` ,\n                    cast(`vendor_credit_id` as INT64) as `vendor_credit_id` ,\n                    cast(`bill_payment_credit_card_id` as INT64) as `bill_payment_credit_card_id` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`bill_payment_line`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_payment_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:30.983083Z", "completed_at": "2024-04-24T20:29:32.494540Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:32.496689Z", "completed_at": "2024-04-24T20:29:32.496695Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5151989459991455, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`bill`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`doc_number` as DATE) as `doc_number` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`home_balance` as INT64) as `home_balance` ,\n                    cast(`payable_account_id` as INT64) as `payable_account_id` ,\n                    cast(`private_note` as STRING) as `private_note` ,\n                    cast(`sales_term_id` as INT64) as `sales_term_id` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` ,\n                    cast(`vendor_id` as INT64) as `vendor_id` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`bill`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`bill`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`doc_number` as DATE) as `doc_number` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`home_balance` as INT64) as `home_balance` ,\n                    cast(`payable_account_id` as INT64) as `payable_account_id` ,\n                    cast(`private_note` as STRING) as `private_note` ,\n                    cast(`sales_term_id` as INT64) as `sales_term_id` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` ,\n                    cast(`vendor_id` as INT64) as `vendor_id` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`bill`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:30.967651Z", "completed_at": "2024-04-24T20:29:32.734338Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:32.735385Z", "completed_at": "2024-04-24T20:29:32.735401Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.7698957920074463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`bill_payment`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`check_bank_account_id` as INT64) as `check_bank_account_id` ,\n                    cast(`check_print_status` as STRING) as `check_print_status` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`credit_card_account_id` as INT64) as `credit_card_account_id` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`doc_number` as INT64) as `doc_number` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`pay_type` as STRING) as `pay_type` ,\n                    cast(`payable_account_id` as INT64) as `payable_account_id` ,\n                    cast(`private_note` as INT64) as `private_note` ,\n                    cast(`process_bill_payment` as INT64) as `process_bill_payment` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` ,\n                    cast(`vendor_id` as INT64) as `vendor_id` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`bill_payment`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`bill_payment`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`check_bank_account_id` as INT64) as `check_bank_account_id` ,\n                    cast(`check_print_status` as STRING) as `check_print_status` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`credit_card_account_id` as INT64) as `credit_card_account_id` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`doc_number` as INT64) as `doc_number` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`pay_type` as STRING) as `pay_type` ,\n                    cast(`payable_account_id` as INT64) as `payable_account_id` ,\n                    cast(`private_note` as INT64) as `private_note` ,\n                    cast(`process_bill_payment` as INT64) as `process_bill_payment` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` ,\n                    cast(`vendor_id` as INT64) as `vendor_id` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`bill_payment`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_payment_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:31.211938Z", "completed_at": "2024-04-24T20:29:32.735828Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:32.738449Z", "completed_at": "2024-04-24T20:29:32.738461Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5299122333526611, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`bundle_item`' as string) as _dbt_source_relation,\n\n                \n                    cast(`bundle_id` as INT64) as `bundle_id` ,\n                    cast(`item_id` as INT64) as `item_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`item_quantity` as INT64) as `item_quantity` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`bundle_item`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`bundle_item`' as string) as _dbt_source_relation,\n\n                \n                    cast(`bundle_id` as INT64) as `bundle_id` ,\n                    cast(`item_id` as INT64) as `item_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`item_quantity` as INT64) as `item_quantity` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`bundle_item`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bundle_item_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:32.504496Z", "completed_at": "2024-04-24T20:29:34.073030Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:34.075843Z", "completed_at": "2024-04-24T20:29:34.075854Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5735092163085938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`credit_memo_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`credit_memo_id` as INT64) as `credit_memo_id` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`bundle_id` as INT64) as `bundle_id` ,\n                    cast(`bundle_quantity` as INT64) as `bundle_quantity` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`description_service_date` as INT64) as `description_service_date` ,\n                    cast(`description_tax_code_id` as INT64) as `description_tax_code_id` ,\n                    cast(`discount_account_id` as INT64) as `discount_account_id` ,\n                    cast(`discount_class_id` as INT64) as `discount_class_id` ,\n                    cast(`discount_discount_percent` as INT64) as `discount_discount_percent` ,\n                    cast(`discount_percent_based` as INT64) as `discount_percent_based` ,\n                    cast(`discount_tax_code_id` as INT64) as `discount_tax_code_id` ,\n                    cast(`sales_item_account_id` as INT64) as `sales_item_account_id` ,\n                    cast(`sales_item_class_id` as INT64) as `sales_item_class_id` ,\n                    cast(`sales_item_discount_amount` as INT64) as `sales_item_discount_amount` ,\n                    cast(`sales_item_discount_rate` as INT64) as `sales_item_discount_rate` ,\n                    cast(`sales_item_item_id` as INT64) as `sales_item_item_id` ,\n                    cast(`sales_item_quantity` as FLOAT64) as `sales_item_quantity` ,\n                    cast(`sales_item_service_date` as INT64) as `sales_item_service_date` ,\n                    cast(`sales_item_tax_code_id` as STRING) as `sales_item_tax_code_id` ,\n                    cast(`sales_item_unit_price` as FLOAT64) as `sales_item_unit_price` ,\n                    cast(`sub_total_item_id` as INT64) as `sub_total_item_id` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`credit_memo_line`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`credit_memo_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`credit_memo_id` as INT64) as `credit_memo_id` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`bundle_id` as INT64) as `bundle_id` ,\n                    cast(`bundle_quantity` as INT64) as `bundle_quantity` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`description_service_date` as INT64) as `description_service_date` ,\n                    cast(`description_tax_code_id` as INT64) as `description_tax_code_id` ,\n                    cast(`discount_account_id` as INT64) as `discount_account_id` ,\n                    cast(`discount_class_id` as INT64) as `discount_class_id` ,\n                    cast(`discount_discount_percent` as INT64) as `discount_discount_percent` ,\n                    cast(`discount_percent_based` as INT64) as `discount_percent_based` ,\n                    cast(`discount_tax_code_id` as INT64) as `discount_tax_code_id` ,\n                    cast(`sales_item_account_id` as INT64) as `sales_item_account_id` ,\n                    cast(`sales_item_class_id` as INT64) as `sales_item_class_id` ,\n                    cast(`sales_item_discount_amount` as INT64) as `sales_item_discount_amount` ,\n                    cast(`sales_item_discount_rate` as INT64) as `sales_item_discount_rate` ,\n                    cast(`sales_item_item_id` as INT64) as `sales_item_item_id` ,\n                    cast(`sales_item_quantity` as FLOAT64) as `sales_item_quantity` ,\n                    cast(`sales_item_service_date` as INT64) as `sales_item_service_date` ,\n                    cast(`sales_item_tax_code_id` as STRING) as `sales_item_tax_code_id` ,\n                    cast(`sales_item_unit_price` as FLOAT64) as `sales_item_unit_price` ,\n                    cast(`sub_total_item_id` as INT64) as `sub_total_item_id` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`credit_memo_line`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__credit_memo_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:32.498194Z", "completed_at": "2024-04-24T20:29:34.251216Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:34.252527Z", "completed_at": "2024-04-24T20:29:34.252549Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.7575528621673584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`bundle`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`active` as BOOLEAN) as `active` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`fully_qualified_name` as STRING) as `fully_qualified_name` ,\n                    cast(`name` as STRING) as `name` ,\n                    cast(`print_grouped_items` as BOOLEAN) as `print_grouped_items` ,\n                    cast(`purchase_cost` as INT64) as `purchase_cost` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`taxable` as BOOLEAN) as `taxable` ,\n                    cast(`unit_price` as INT64) as `unit_price` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`bundle`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`bundle`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`active` as BOOLEAN) as `active` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`fully_qualified_name` as STRING) as `fully_qualified_name` ,\n                    cast(`name` as STRING) as `name` ,\n                    cast(`print_grouped_items` as BOOLEAN) as `print_grouped_items` ,\n                    cast(`purchase_cost` as INT64) as `purchase_cost` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`taxable` as BOOLEAN) as `taxable` ,\n                    cast(`unit_price` as INT64) as `unit_price` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`bundle`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bundle_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:32.742101Z", "completed_at": "2024-04-24T20:29:34.326663Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:34.327128Z", "completed_at": "2024-04-24T20:29:34.327134Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5883572101593018, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`credit_memo`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`apply_tax_after_discount` as BOOLEAN) as `apply_tax_after_discount` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`bill_email` as STRING) as `bill_email` ,\n                    cast(`billing_address_id` as INT64) as `billing_address_id` ,\n                    cast(`class_id` as INT64) as `class_id` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`custom_p_o_number` as INT64) as `custom_p_o_number` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`customer_memo` as STRING) as `customer_memo` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`doc_number` as INT64) as `doc_number` ,\n                    cast(`email_status` as STRING) as `email_status` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`home_balance` as INT64) as `home_balance` ,\n                    cast(`home_total_amount` as INT64) as `home_total_amount` ,\n                    cast(`payment_method_id` as INT64) as `payment_method_id` ,\n                    cast(`print_status` as STRING) as `print_status` ,\n                    cast(`private_note` as INT64) as `private_note` ,\n                    cast(`remaining_credit` as INT64) as `remaining_credit` ,\n                    cast(`sales_term_id` as INT64) as `sales_term_id` ,\n                    cast(`shipping_address_id` as INT64) as `shipping_address_id` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`total_tax` as INT64) as `total_tax` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`credit_memo`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`credit_memo`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`apply_tax_after_discount` as BOOLEAN) as `apply_tax_after_discount` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`bill_email` as STRING) as `bill_email` ,\n                    cast(`billing_address_id` as INT64) as `billing_address_id` ,\n                    cast(`class_id` as INT64) as `class_id` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`custom_p_o_number` as INT64) as `custom_p_o_number` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`customer_memo` as STRING) as `customer_memo` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`doc_number` as INT64) as `doc_number` ,\n                    cast(`email_status` as STRING) as `email_status` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`home_balance` as INT64) as `home_balance` ,\n                    cast(`home_total_amount` as INT64) as `home_total_amount` ,\n                    cast(`payment_method_id` as INT64) as `payment_method_id` ,\n                    cast(`print_status` as STRING) as `print_status` ,\n                    cast(`private_note` as INT64) as `private_note` ,\n                    cast(`remaining_credit` as INT64) as `remaining_credit` ,\n                    cast(`sales_term_id` as INT64) as `sales_term_id` ,\n                    cast(`shipping_address_id` as INT64) as `shipping_address_id` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`total_tax` as INT64) as `total_tax` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`credit_memo`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__credit_memo_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:32.749412Z", "completed_at": "2024-04-24T20:29:34.367443Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:34.367996Z", "completed_at": "2024-04-24T20:29:34.368001Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.621150016784668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__customer_tmp", "compiled": true, "compiled_code": "\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`customer`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`active` as BOOLEAN) as `active` ,\n                    cast(`alternate_phone_number` as INT64) as `alternate_phone_number` ,\n                    cast(`ar_account_id` as INT64) as `ar_account_id` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`balance_with_jobs` as INT64) as `balance_with_jobs` ,\n                    cast(`bill_address_id` as INT64) as `bill_address_id` ,\n                    cast(`bill_with_parent` as BOOLEAN) as `bill_with_parent` ,\n                    cast(`company_name` as STRING) as `company_name` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`default_tax_code_id` as INT64) as `default_tax_code_id` ,\n                    cast(`display_name` as STRING) as `display_name` ,\n                    cast(`email` as STRING) as `email` ,\n                    cast(`family_name` as STRING) as `family_name` ,\n                    cast(`fax_number` as INT64) as `fax_number` ,\n                    cast(`fully_qualified_name` as STRING) as `fully_qualified_name` ,\n                    cast(`given_name` as STRING) as `given_name` ,\n                    cast(`job` as BOOLEAN) as `job` ,\n                    cast(`level` as INT64) as `level` ,\n                    cast(`middle_name` as INT64) as `middle_name` ,\n                    cast(`mobile_number` as INT64) as `mobile_number` ,\n                    cast(`notes` as INT64) as `notes` ,\n                    cast(`open_balance_date` as INT64) as `open_balance_date` ,\n                    cast(`parent_customer_id` as INT64) as `parent_customer_id` ,\n                    cast(`payment_method_id` as INT64) as `payment_method_id` ,\n                    cast(`phone_number` as INT64) as `phone_number` ,\n                    cast(`preferred_delivery_method` as STRING) as `preferred_delivery_method` ,\n                    cast(`print_on_check_name` as STRING) as `print_on_check_name` ,\n                    cast(`resale_number` as INT64) as `resale_number` ,\n                    cast(`sales_term_id` as INT64) as `sales_term_id` ,\n                    cast(`shipping_address_id` as INT64) as `shipping_address_id` ,\n                    cast(`suffix` as INT64) as `suffix` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_exemption_reason_id` as INT64) as `tax_exemption_reason_id` ,\n                    cast(`taxable` as BOOLEAN) as `taxable` ,\n                    cast(`title` as INT64) as `title` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` ,\n                    cast(`website` as INT64) as `website` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`customer`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`customer`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`active` as BOOLEAN) as `active` ,\n                    cast(`alternate_phone_number` as INT64) as `alternate_phone_number` ,\n                    cast(`ar_account_id` as INT64) as `ar_account_id` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`balance_with_jobs` as INT64) as `balance_with_jobs` ,\n                    cast(`bill_address_id` as INT64) as `bill_address_id` ,\n                    cast(`bill_with_parent` as BOOLEAN) as `bill_with_parent` ,\n                    cast(`company_name` as STRING) as `company_name` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`default_tax_code_id` as INT64) as `default_tax_code_id` ,\n                    cast(`display_name` as STRING) as `display_name` ,\n                    cast(`email` as STRING) as `email` ,\n                    cast(`family_name` as STRING) as `family_name` ,\n                    cast(`fax_number` as INT64) as `fax_number` ,\n                    cast(`fully_qualified_name` as STRING) as `fully_qualified_name` ,\n                    cast(`given_name` as STRING) as `given_name` ,\n                    cast(`job` as BOOLEAN) as `job` ,\n                    cast(`level` as INT64) as `level` ,\n                    cast(`middle_name` as INT64) as `middle_name` ,\n                    cast(`mobile_number` as INT64) as `mobile_number` ,\n                    cast(`notes` as INT64) as `notes` ,\n                    cast(`open_balance_date` as INT64) as `open_balance_date` ,\n                    cast(`parent_customer_id` as INT64) as `parent_customer_id` ,\n                    cast(`payment_method_id` as INT64) as `payment_method_id` ,\n                    cast(`phone_number` as INT64) as `phone_number` ,\n                    cast(`preferred_delivery_method` as STRING) as `preferred_delivery_method` ,\n                    cast(`print_on_check_name` as STRING) as `print_on_check_name` ,\n                    cast(`resale_number` as INT64) as `resale_number` ,\n                    cast(`sales_term_id` as INT64) as `sales_term_id` ,\n                    cast(`shipping_address_id` as INT64) as `shipping_address_id` ,\n                    cast(`suffix` as INT64) as `suffix` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_exemption_reason_id` as INT64) as `tax_exemption_reason_id` ,\n                    cast(`taxable` as BOOLEAN) as `taxable` ,\n                    cast(`title` as INT64) as `title` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` ,\n                    cast(`website` as INT64) as `website` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`customer`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__customer_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:34.328698Z", "completed_at": "2024-04-24T20:29:35.794648Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:35.796005Z", "completed_at": "2024-04-24T20:29:35.796020Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4692301750183105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`deposit`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_id` as INT64) as `account_id` ,\n                    cast(`cash_back_account_id` as INT64) as `cash_back_account_id` ,\n                    cast(`cash_back_amount` as INT64) as `cash_back_amount` ,\n                    cast(`cash_back_memo` as INT64) as `cash_back_memo` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`home_total_amount` as INT64) as `home_total_amount` ,\n                    cast(`private_note` as STRING) as `private_note` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`transaction_source` as INT64) as `transaction_source` ,\n                    cast(`transaction_status` as INT64) as `transaction_status` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`deposit`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`deposit`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_id` as INT64) as `account_id` ,\n                    cast(`cash_back_account_id` as INT64) as `cash_back_account_id` ,\n                    cast(`cash_back_amount` as INT64) as `cash_back_amount` ,\n                    cast(`cash_back_memo` as INT64) as `cash_back_memo` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`home_total_amount` as INT64) as `home_total_amount` ,\n                    cast(`private_note` as STRING) as `private_note` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`transaction_source` as INT64) as `transaction_source` ,\n                    cast(`transaction_status` as INT64) as `transaction_status` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`deposit`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__deposit_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:34.079383Z", "completed_at": "2024-04-24T20:29:35.836388Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:35.836908Z", "completed_at": "2024-04-24T20:29:35.836914Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7591657638549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__department_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`department`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`active` as BOOLEAN) as `active` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`fully_qualified_name` as STRING) as `fully_qualified_name` ,\n                    cast(`name` as STRING) as `name` ,\n                    cast(`parent_department_id` as INT64) as `parent_department_id` ,\n                    cast(`sub_department` as BOOLEAN) as `sub_department` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`department`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`department`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`active` as BOOLEAN) as `active` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`fully_qualified_name` as STRING) as `fully_qualified_name` ,\n                    cast(`name` as STRING) as `name` ,\n                    cast(`parent_department_id` as INT64) as `parent_department_id` ,\n                    cast(`sub_department` as BOOLEAN) as `sub_department` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`department`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__department_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:34.369606Z", "completed_at": "2024-04-24T20:29:35.865345Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:35.866342Z", "completed_at": "2024-04-24T20:29:35.866347Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4981272220611572, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`estimate_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`estimate_id` as INT64) as `estimate_id` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`bundle_id` as INT64) as `bundle_id` ,\n                    cast(`bundle_quantity` as INT64) as `bundle_quantity` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`description_service_date` as INT64) as `description_service_date` ,\n                    cast(`description_tax_code_id` as INT64) as `description_tax_code_id` ,\n                    cast(`discount_account_id` as INT64) as `discount_account_id` ,\n                    cast(`discount_class_id` as INT64) as `discount_class_id` ,\n                    cast(`discount_discount_percent` as INT64) as `discount_discount_percent` ,\n                    cast(`discount_percent_based` as INT64) as `discount_percent_based` ,\n                    cast(`discount_tax_code_id` as INT64) as `discount_tax_code_id` ,\n                    cast(`sales_item_account_id` as INT64) as `sales_item_account_id` ,\n                    cast(`sales_item_class_id` as INT64) as `sales_item_class_id` ,\n                    cast(`sales_item_discount_amount` as INT64) as `sales_item_discount_amount` ,\n                    cast(`sales_item_discount_rate` as INT64) as `sales_item_discount_rate` ,\n                    cast(`sales_item_item_id` as INT64) as `sales_item_item_id` ,\n                    cast(`sales_item_quantity` as INT64) as `sales_item_quantity` ,\n                    cast(`sales_item_service_date` as INT64) as `sales_item_service_date` ,\n                    cast(`sales_item_tax_code_id` as STRING) as `sales_item_tax_code_id` ,\n                    cast(`sales_item_unit_price` as INT64) as `sales_item_unit_price` ,\n                    cast(`sub_total_item_id` as INT64) as `sub_total_item_id` ,\n                    cast(`item_id` as INT64) as `item_id` ,\n                    cast(`quantity` as INT64) as `quantity` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`account_id` as INT64) as `account_id` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`estimate_line`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`estimate_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`estimate_id` as INT64) as `estimate_id` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`bundle_id` as INT64) as `bundle_id` ,\n                    cast(`bundle_quantity` as INT64) as `bundle_quantity` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`description_service_date` as INT64) as `description_service_date` ,\n                    cast(`description_tax_code_id` as INT64) as `description_tax_code_id` ,\n                    cast(`discount_account_id` as INT64) as `discount_account_id` ,\n                    cast(`discount_class_id` as INT64) as `discount_class_id` ,\n                    cast(`discount_discount_percent` as INT64) as `discount_discount_percent` ,\n                    cast(`discount_percent_based` as INT64) as `discount_percent_based` ,\n                    cast(`discount_tax_code_id` as INT64) as `discount_tax_code_id` ,\n                    cast(`sales_item_account_id` as INT64) as `sales_item_account_id` ,\n                    cast(`sales_item_class_id` as INT64) as `sales_item_class_id` ,\n                    cast(`sales_item_discount_amount` as INT64) as `sales_item_discount_amount` ,\n                    cast(`sales_item_discount_rate` as INT64) as `sales_item_discount_rate` ,\n                    cast(`sales_item_item_id` as INT64) as `sales_item_item_id` ,\n                    cast(`sales_item_quantity` as INT64) as `sales_item_quantity` ,\n                    cast(`sales_item_service_date` as INT64) as `sales_item_service_date` ,\n                    cast(`sales_item_tax_code_id` as STRING) as `sales_item_tax_code_id` ,\n                    cast(`sales_item_unit_price` as INT64) as `sales_item_unit_price` ,\n                    cast(`sub_total_item_id` as INT64) as `sub_total_item_id` ,\n                    cast(`item_id` as INT64) as `item_id` ,\n                    cast(`quantity` as INT64) as `quantity` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`account_id` as INT64) as `account_id` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`estimate_line`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__estimate_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:34.256185Z", "completed_at": "2024-04-24T20:29:35.865616Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:35.866606Z", "completed_at": "2024-04-24T20:29:35.866609Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.612623929977417, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`deposit_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`deposit_id` as INT64) as `deposit_id` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`deposit_account_id` as INT64) as `deposit_account_id` ,\n                    cast(`deposit_check_number` as INT64) as `deposit_check_number` ,\n                    cast(`deposit_class_id` as INT64) as `deposit_class_id` ,\n                    cast(`deposit_customer_id` as INT64) as `deposit_customer_id` ,\n                    cast(`deposit_payment_method_id` as INT64) as `deposit_payment_method_id` ,\n                    cast(`deposit_tax_applicable_on` as INT64) as `deposit_tax_applicable_on` ,\n                    cast(`deposit_tax_code_id` as INT64) as `deposit_tax_code_id` ,\n                    cast(`deposit_transaction_type` as INT64) as `deposit_transaction_type` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`detail_type` as STRING) as `detail_type` ,\n                    cast(`expense_id` as INT64) as `expense_id` ,\n                    cast(`invoice_id` as INT64) as `invoice_id` ,\n                    cast(`journal_entry_id` as INT64) as `journal_entry_id` ,\n                    cast(`payment_id` as INT64) as `payment_id` ,\n                    cast(`purchase_id` as INT64) as `purchase_id` ,\n                    cast(`refund_receipt_id` as INT64) as `refund_receipt_id` ,\n                    cast(`sales_receipt_id` as INT64) as `sales_receipt_id` ,\n                    cast(`transfer_id` as INT64) as `transfer_id` ,\n                    cast(`bill_id` as INT64) as `bill_id` ,\n                    cast(`vendor_credit_id` as INT64) as `vendor_credit_id` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`deposit_line`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`deposit_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`deposit_id` as INT64) as `deposit_id` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`deposit_account_id` as INT64) as `deposit_account_id` ,\n                    cast(`deposit_check_number` as INT64) as `deposit_check_number` ,\n                    cast(`deposit_class_id` as INT64) as `deposit_class_id` ,\n                    cast(`deposit_customer_id` as INT64) as `deposit_customer_id` ,\n                    cast(`deposit_payment_method_id` as INT64) as `deposit_payment_method_id` ,\n                    cast(`deposit_tax_applicable_on` as INT64) as `deposit_tax_applicable_on` ,\n                    cast(`deposit_tax_code_id` as INT64) as `deposit_tax_code_id` ,\n                    cast(`deposit_transaction_type` as INT64) as `deposit_transaction_type` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`detail_type` as STRING) as `detail_type` ,\n                    cast(`expense_id` as INT64) as `expense_id` ,\n                    cast(`invoice_id` as INT64) as `invoice_id` ,\n                    cast(`journal_entry_id` as INT64) as `journal_entry_id` ,\n                    cast(`payment_id` as INT64) as `payment_id` ,\n                    cast(`purchase_id` as INT64) as `purchase_id` ,\n                    cast(`refund_receipt_id` as INT64) as `refund_receipt_id` ,\n                    cast(`sales_receipt_id` as INT64) as `sales_receipt_id` ,\n                    cast(`transfer_id` as INT64) as `transfer_id` ,\n                    cast(`bill_id` as INT64) as `bill_id` ,\n                    cast(`vendor_credit_id` as INT64) as `vendor_credit_id` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`deposit_line`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__deposit_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:35.800134Z", "completed_at": "2024-04-24T20:29:37.366644Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:37.368767Z", "completed_at": "2024-04-24T20:29:37.368784Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5715551376342773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`estimate`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`accepted_by` as INT64) as `accepted_by` ,\n                    cast(`accepted_date` as INT64) as `accepted_date` ,\n                    cast(`apply_tax_after_discount` as BOOLEAN) as `apply_tax_after_discount` ,\n                    cast(`bill_email` as STRING) as `bill_email` ,\n                    cast(`billing_address_id` as INT64) as `billing_address_id` ,\n                    cast(`class_id` as INT64) as `class_id` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`custom_p_o_number` as INT64) as `custom_p_o_number` ,\n                    cast(`custom_sales_rep` as INT64) as `custom_sales_rep` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`customer_memo` as STRING) as `customer_memo` ,\n                    cast(`delivery_type` as INT64) as `delivery_type` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`doc_number` as INT64) as `doc_number` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`email_status` as STRING) as `email_status` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`expiration_date` as INT64) as `expiration_date` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`home_total_amount` as INT64) as `home_total_amount` ,\n                    cast(`print_status` as STRING) as `print_status` ,\n                    cast(`private_note` as INT64) as `private_note` ,\n                    cast(`sales_term_id` as INT64) as `sales_term_id` ,\n                    cast(`ship_date` as INT64) as `ship_date` ,\n                    cast(`shipping_address_id` as INT64) as `shipping_address_id` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`total_amount` as FLOAT64) as `total_amount` ,\n                    cast(`total_tax` as INT64) as `total_tax` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`transaction_status` as STRING) as `transaction_status` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`estimate`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`estimate`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`accepted_by` as INT64) as `accepted_by` ,\n                    cast(`accepted_date` as INT64) as `accepted_date` ,\n                    cast(`apply_tax_after_discount` as BOOLEAN) as `apply_tax_after_discount` ,\n                    cast(`bill_email` as STRING) as `bill_email` ,\n                    cast(`billing_address_id` as INT64) as `billing_address_id` ,\n                    cast(`class_id` as INT64) as `class_id` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`custom_p_o_number` as INT64) as `custom_p_o_number` ,\n                    cast(`custom_sales_rep` as INT64) as `custom_sales_rep` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`customer_memo` as STRING) as `customer_memo` ,\n                    cast(`delivery_type` as INT64) as `delivery_type` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`doc_number` as INT64) as `doc_number` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`email_status` as STRING) as `email_status` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`expiration_date` as INT64) as `expiration_date` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`home_total_amount` as INT64) as `home_total_amount` ,\n                    cast(`print_status` as STRING) as `print_status` ,\n                    cast(`private_note` as INT64) as `private_note` ,\n                    cast(`sales_term_id` as INT64) as `sales_term_id` ,\n                    cast(`ship_date` as INT64) as `ship_date` ,\n                    cast(`shipping_address_id` as INT64) as `shipping_address_id` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`total_amount` as FLOAT64) as `total_amount` ,\n                    cast(`total_tax` as INT64) as `total_tax` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`transaction_status` as STRING) as `transaction_status` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`estimate`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__estimate_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:35.839826Z", "completed_at": "2024-04-24T20:29:37.368068Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:37.371133Z", "completed_at": "2024-04-24T20:29:37.371143Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.534132957458496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`invoice_line_bundle`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`invoice_id` as INT64) as `invoice_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_id` as INT64) as `account_id` ,\n                    cast(`amount` as FLOAT64) as `amount` ,\n                    cast(`class_id` as INT64) as `class_id` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`discount_amount` as INT64) as `discount_amount` ,\n                    cast(`discount_rate` as INT64) as `discount_rate` ,\n                    cast(`invoice_line_index` as INT64) as `invoice_line_index` ,\n                    cast(`item_id` as INT64) as `item_id` ,\n                    cast(`line_num` as INT64) as `line_num` ,\n                    cast(`quantity` as FLOAT64) as `quantity` ,\n                    cast(`service_date` as INT64) as `service_date` ,\n                    cast(`tax_code_id` as STRING) as `tax_code_id` ,\n                    cast(`unit_price` as INT64) as `unit_price` ,\n                    cast(`sales_item_item_id` as INT64) as `sales_item_item_id` ,\n                    cast(`sales_item_quantity` as INT64) as `sales_item_quantity` ,\n                    cast(`sales_item_tax_code_id` as INT64) as `sales_item_tax_code_id` ,\n                    cast(`sales_item_account_id` as INT64) as `sales_item_account_id` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`invoice_line_bundle`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`invoice_line_bundle`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`invoice_id` as INT64) as `invoice_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_id` as INT64) as `account_id` ,\n                    cast(`amount` as FLOAT64) as `amount` ,\n                    cast(`class_id` as INT64) as `class_id` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`discount_amount` as INT64) as `discount_amount` ,\n                    cast(`discount_rate` as INT64) as `discount_rate` ,\n                    cast(`invoice_line_index` as INT64) as `invoice_line_index` ,\n                    cast(`item_id` as INT64) as `item_id` ,\n                    cast(`line_num` as INT64) as `line_num` ,\n                    cast(`quantity` as FLOAT64) as `quantity` ,\n                    cast(`service_date` as INT64) as `service_date` ,\n                    cast(`tax_code_id` as STRING) as `tax_code_id` ,\n                    cast(`unit_price` as INT64) as `unit_price` ,\n                    cast(`sales_item_item_id` as INT64) as `sales_item_item_id` ,\n                    cast(`sales_item_quantity` as INT64) as `sales_item_quantity` ,\n                    cast(`sales_item_tax_code_id` as INT64) as `sales_item_tax_code_id` ,\n                    cast(`sales_item_account_id` as INT64) as `sales_item_account_id` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`invoice_line_bundle`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_line_bundle_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:35.869753Z", "completed_at": "2024-04-24T20:29:37.409076Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:37.409670Z", "completed_at": "2024-04-24T20:29:37.409675Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.541654109954834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`invoice_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`invoice_id` as INT64) as `invoice_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as FLOAT64) as `amount` ,\n                    cast(`bundle_id` as INT64) as `bundle_id` ,\n                    cast(`bundle_quantity` as FLOAT64) as `bundle_quantity` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`description_service_date` as INT64) as `description_service_date` ,\n                    cast(`description_tax_code_id` as INT64) as `description_tax_code_id` ,\n                    cast(`discount_account_id` as INT64) as `discount_account_id` ,\n                    cast(`discount_class_id` as INT64) as `discount_class_id` ,\n                    cast(`discount_discount_percent` as INT64) as `discount_discount_percent` ,\n                    cast(`discount_percent_based` as INT64) as `discount_percent_based` ,\n                    cast(`discount_tax_code_id` as INT64) as `discount_tax_code_id` ,\n                    cast(`sales_item_account_id` as INT64) as `sales_item_account_id` ,\n                    cast(`sales_item_class_id` as INT64) as `sales_item_class_id` ,\n                    cast(`sales_item_discount_amount` as INT64) as `sales_item_discount_amount` ,\n                    cast(`sales_item_discount_rate` as INT64) as `sales_item_discount_rate` ,\n                    cast(`sales_item_item_id` as INT64) as `sales_item_item_id` ,\n                    cast(`sales_item_quantity` as FLOAT64) as `sales_item_quantity` ,\n                    cast(`sales_item_service_date` as INT64) as `sales_item_service_date` ,\n                    cast(`sales_item_tax_code_id` as STRING) as `sales_item_tax_code_id` ,\n                    cast(`sales_item_unit_price` as INT64) as `sales_item_unit_price` ,\n                    cast(`sub_total_item_id` as INT64) as `sub_total_item_id` ,\n                    cast(`item_id` as INT64) as `item_id` ,\n                    cast(`quantity` as INT64) as `quantity` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`account_id` as INT64) as `account_id` ,\n                    cast(`detail_type` as STRING) as `detail_type` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`invoice_line`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`invoice_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`invoice_id` as INT64) as `invoice_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as FLOAT64) as `amount` ,\n                    cast(`bundle_id` as INT64) as `bundle_id` ,\n                    cast(`bundle_quantity` as FLOAT64) as `bundle_quantity` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`description_service_date` as INT64) as `description_service_date` ,\n                    cast(`description_tax_code_id` as INT64) as `description_tax_code_id` ,\n                    cast(`discount_account_id` as INT64) as `discount_account_id` ,\n                    cast(`discount_class_id` as INT64) as `discount_class_id` ,\n                    cast(`discount_discount_percent` as INT64) as `discount_discount_percent` ,\n                    cast(`discount_percent_based` as INT64) as `discount_percent_based` ,\n                    cast(`discount_tax_code_id` as INT64) as `discount_tax_code_id` ,\n                    cast(`sales_item_account_id` as INT64) as `sales_item_account_id` ,\n                    cast(`sales_item_class_id` as INT64) as `sales_item_class_id` ,\n                    cast(`sales_item_discount_amount` as INT64) as `sales_item_discount_amount` ,\n                    cast(`sales_item_discount_rate` as INT64) as `sales_item_discount_rate` ,\n                    cast(`sales_item_item_id` as INT64) as `sales_item_item_id` ,\n                    cast(`sales_item_quantity` as FLOAT64) as `sales_item_quantity` ,\n                    cast(`sales_item_service_date` as INT64) as `sales_item_service_date` ,\n                    cast(`sales_item_tax_code_id` as STRING) as `sales_item_tax_code_id` ,\n                    cast(`sales_item_unit_price` as INT64) as `sales_item_unit_price` ,\n                    cast(`sub_total_item_id` as INT64) as `sub_total_item_id` ,\n                    cast(`item_id` as INT64) as `item_id` ,\n                    cast(`quantity` as INT64) as `quantity` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`account_id` as INT64) as `account_id` ,\n                    cast(`detail_type` as STRING) as `detail_type` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`invoice_line`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:35.872306Z", "completed_at": "2024-04-24T20:29:37.432758Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:37.433245Z", "completed_at": "2024-04-24T20:29:37.433250Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5647931098937988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`invoice_linked_txn`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`invoice_id` as INT64) as `invoice_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`charge_credit_id` as INT64) as `charge_credit_id` ,\n                    cast(`estimate_id` as INT64) as `estimate_id` ,\n                    cast(`payment_id` as INT64) as `payment_id` ,\n                    cast(`reimburse_charge_id` as INT64) as `reimburse_charge_id` ,\n                    cast(`statement_charge_id` as INT64) as `statement_charge_id` ,\n                    cast(`time_activity_id` as INT64) as `time_activity_id` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`invoice_linked_txn`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`invoice_linked_txn`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`invoice_id` as INT64) as `invoice_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`charge_credit_id` as INT64) as `charge_credit_id` ,\n                    cast(`estimate_id` as INT64) as `estimate_id` ,\n                    cast(`payment_id` as INT64) as `payment_id` ,\n                    cast(`reimburse_charge_id` as INT64) as `reimburse_charge_id` ,\n                    cast(`statement_charge_id` as INT64) as `statement_charge_id` ,\n                    cast(`time_activity_id` as INT64) as `time_activity_id` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`invoice_linked_txn`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_linked_txn_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:37.378718Z", "completed_at": "2024-04-24T20:29:38.632849Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:38.633899Z", "completed_at": "2024-04-24T20:29:38.633917Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2600882053375244, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__item_tmp", "compiled": true, "compiled_code": "\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`item`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`active` as BOOLEAN) as `active` ,\n                    cast(`asset_account_id` as INT64) as `asset_account_id` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`description` as INT64) as `description` ,\n                    cast(`expense_account_id` as INT64) as `expense_account_id` ,\n                    cast(`fully_qualified_name` as STRING) as `fully_qualified_name` ,\n                    cast(`income_account_id` as INT64) as `income_account_id` ,\n                    cast(`inventory_start_date` as INT64) as `inventory_start_date` ,\n                    cast(`level` as INT64) as `level` ,\n                    cast(`name` as STRING) as `name` ,\n                    cast(`parent_item_id` as INT64) as `parent_item_id` ,\n                    cast(`purchase_cost` as INT64) as `purchase_cost` ,\n                    cast(`purchase_description` as INT64) as `purchase_description` ,\n                    cast(`purchase_tax_code_id` as INT64) as `purchase_tax_code_id` ,\n                    cast(`purchase_tax_included` as INT64) as `purchase_tax_included` ,\n                    cast(`quantity_on_hand` as INT64) as `quantity_on_hand` ,\n                    cast(`sales_tax_code_id` as INT64) as `sales_tax_code_id` ,\n                    cast(`sales_tax_included` as INT64) as `sales_tax_included` ,\n                    cast(`stock_keeping_unit` as INT64) as `stock_keeping_unit` ,\n                    cast(`sub_item` as INT64) as `sub_item` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`taxable` as BOOLEAN) as `taxable` ,\n                    cast(`track_quantity_on_hand` as BOOLEAN) as `track_quantity_on_hand` ,\n                    cast(`type` as STRING) as `type` ,\n                    cast(`unit_price` as INT64) as `unit_price` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`item`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`item`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`active` as BOOLEAN) as `active` ,\n                    cast(`asset_account_id` as INT64) as `asset_account_id` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`description` as INT64) as `description` ,\n                    cast(`expense_account_id` as INT64) as `expense_account_id` ,\n                    cast(`fully_qualified_name` as STRING) as `fully_qualified_name` ,\n                    cast(`income_account_id` as INT64) as `income_account_id` ,\n                    cast(`inventory_start_date` as INT64) as `inventory_start_date` ,\n                    cast(`level` as INT64) as `level` ,\n                    cast(`name` as STRING) as `name` ,\n                    cast(`parent_item_id` as INT64) as `parent_item_id` ,\n                    cast(`purchase_cost` as INT64) as `purchase_cost` ,\n                    cast(`purchase_description` as INT64) as `purchase_description` ,\n                    cast(`purchase_tax_code_id` as INT64) as `purchase_tax_code_id` ,\n                    cast(`purchase_tax_included` as INT64) as `purchase_tax_included` ,\n                    cast(`quantity_on_hand` as INT64) as `quantity_on_hand` ,\n                    cast(`sales_tax_code_id` as INT64) as `sales_tax_code_id` ,\n                    cast(`sales_tax_included` as INT64) as `sales_tax_included` ,\n                    cast(`stock_keeping_unit` as INT64) as `stock_keeping_unit` ,\n                    cast(`sub_item` as INT64) as `sub_item` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`taxable` as BOOLEAN) as `taxable` ,\n                    cast(`track_quantity_on_hand` as BOOLEAN) as `track_quantity_on_hand` ,\n                    cast(`type` as STRING) as `type` ,\n                    cast(`unit_price` as INT64) as `unit_price` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`item`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:37.434878Z", "completed_at": "2024-04-24T20:29:38.876421Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:38.878245Z", "completed_at": "2024-04-24T20:29:38.878275Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4453480243682861, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`journal_entry`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`adjustment` as BOOLEAN) as `adjustment` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`doc_number` as STRING) as `doc_number` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`home_total_amount` as INT64) as `home_total_amount` ,\n                    cast(`private_note` as STRING) as `private_note` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`total_tax` as INT64) as `total_tax` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`journal_entry`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`journal_entry`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`adjustment` as BOOLEAN) as `adjustment` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`doc_number` as STRING) as `doc_number` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`home_total_amount` as INT64) as `home_total_amount` ,\n                    cast(`private_note` as STRING) as `private_note` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`total_tax` as INT64) as `total_tax` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`journal_entry`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__journal_entry_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:37.375333Z", "completed_at": "2024-04-24T20:29:38.901109Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:38.902048Z", "completed_at": "2024-04-24T20:29:38.902057Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5295588970184326, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`invoice`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`allow_ipnpayment` as BOOLEAN) as `allow_ipnpayment` ,\n                    cast(`allow_online_achpayment` as BOOLEAN) as `allow_online_achpayment` ,\n                    cast(`allow_online_credit_card_payment` as BOOLEAN) as `allow_online_credit_card_payment` ,\n                    cast(`allow_online_payment` as BOOLEAN) as `allow_online_payment` ,\n                    cast(`apply_tax_after_discount` as BOOLEAN) as `apply_tax_after_discount` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`billing_address_id` as INT64) as `billing_address_id` ,\n                    cast(`billing_bcc_email` as STRING) as `billing_bcc_email` ,\n                    cast(`billing_cc_email` as INT64) as `billing_cc_email` ,\n                    cast(`billing_email` as STRING) as `billing_email` ,\n                    cast(`class_id` as INT64) as `class_id` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`custom_p_o_number` as INT64) as `custom_p_o_number` ,\n                    cast(`custom_sales_rep` as INT64) as `custom_sales_rep` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`customer_memo` as STRING) as `customer_memo` ,\n                    cast(`delivery_time` as DATETIME) as `delivery_time` ,\n                    cast(`delivery_type` as STRING) as `delivery_type` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`deposit` as INT64) as `deposit` ,\n                    cast(`deposit_to_account_id` as INT64) as `deposit_to_account_id` ,\n                    cast(`doc_number` as INT64) as `doc_number` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`email_status` as STRING) as `email_status` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`home_balance` as INT64) as `home_balance` ,\n                    cast(`home_total_amount` as INT64) as `home_total_amount` ,\n                    cast(`print_status` as STRING) as `print_status` ,\n                    cast(`private_note` as INT64) as `private_note` ,\n                    cast(`sales_term_id` as INT64) as `sales_term_id` ,\n                    cast(`ship_date` as INT64) as `ship_date` ,\n                    cast(`shipping_address_id` as INT64) as `shipping_address_id` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`total_tax` as INT64) as `total_tax` ,\n                    cast(`tracking_number` as INT64) as `tracking_number` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`transaction_source` as INT64) as `transaction_source` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`invoice`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`invoice`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`allow_ipnpayment` as BOOLEAN) as `allow_ipnpayment` ,\n                    cast(`allow_online_achpayment` as BOOLEAN) as `allow_online_achpayment` ,\n                    cast(`allow_online_credit_card_payment` as BOOLEAN) as `allow_online_credit_card_payment` ,\n                    cast(`allow_online_payment` as BOOLEAN) as `allow_online_payment` ,\n                    cast(`apply_tax_after_discount` as BOOLEAN) as `apply_tax_after_discount` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`billing_address_id` as INT64) as `billing_address_id` ,\n                    cast(`billing_bcc_email` as STRING) as `billing_bcc_email` ,\n                    cast(`billing_cc_email` as INT64) as `billing_cc_email` ,\n                    cast(`billing_email` as STRING) as `billing_email` ,\n                    cast(`class_id` as INT64) as `class_id` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`custom_p_o_number` as INT64) as `custom_p_o_number` ,\n                    cast(`custom_sales_rep` as INT64) as `custom_sales_rep` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`customer_memo` as STRING) as `customer_memo` ,\n                    cast(`delivery_time` as DATETIME) as `delivery_time` ,\n                    cast(`delivery_type` as STRING) as `delivery_type` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`deposit` as INT64) as `deposit` ,\n                    cast(`deposit_to_account_id` as INT64) as `deposit_to_account_id` ,\n                    cast(`doc_number` as INT64) as `doc_number` ,\n                    cast(`due_date` as DATE) as `due_date` ,\n                    cast(`email_status` as STRING) as `email_status` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`home_balance` as INT64) as `home_balance` ,\n                    cast(`home_total_amount` as INT64) as `home_total_amount` ,\n                    cast(`print_status` as STRING) as `print_status` ,\n                    cast(`private_note` as INT64) as `private_note` ,\n                    cast(`sales_term_id` as INT64) as `sales_term_id` ,\n                    cast(`ship_date` as INT64) as `ship_date` ,\n                    cast(`shipping_address_id` as INT64) as `shipping_address_id` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`total_tax` as INT64) as `total_tax` ,\n                    cast(`tracking_number` as INT64) as `tracking_number` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`transaction_source` as INT64) as `transaction_source` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`invoice`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:37.411655Z", "completed_at": "2024-04-24T20:29:38.934579Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:38.935118Z", "completed_at": "2024-04-24T20:29:38.935124Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.524712085723877, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`journal_entry_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`journal_entry_id` as INT64) as `journal_entry_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_id` as INT64) as `account_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`billable_status` as INT64) as `billable_status` ,\n                    cast(`class_id` as INT64) as `class_id` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`description_service_date` as INT64) as `description_service_date` ,\n                    cast(`description_tax_code_id` as INT64) as `description_tax_code_id` ,\n                    cast(`employee_id` as INT64) as `employee_id` ,\n                    cast(`posting_type` as STRING) as `posting_type` ,\n                    cast(`tax_amount` as INT64) as `tax_amount` ,\n                    cast(`tax_applicable_on` as INT64) as `tax_applicable_on` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`vendor_id` as INT64) as `vendor_id` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`journal_entry_line`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`journal_entry_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`journal_entry_id` as INT64) as `journal_entry_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_id` as INT64) as `account_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`billable_status` as INT64) as `billable_status` ,\n                    cast(`class_id` as INT64) as `class_id` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`description_service_date` as INT64) as `description_service_date` ,\n                    cast(`description_tax_code_id` as INT64) as `description_tax_code_id` ,\n                    cast(`employee_id` as INT64) as `employee_id` ,\n                    cast(`posting_type` as STRING) as `posting_type` ,\n                    cast(`tax_amount` as INT64) as `tax_amount` ,\n                    cast(`tax_applicable_on` as INT64) as `tax_applicable_on` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`vendor_id` as INT64) as `vendor_id` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`journal_entry_line`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__journal_entry_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:38.637870Z", "completed_at": "2024-04-24T20:29:40.215739Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:40.217147Z", "completed_at": "2024-04-24T20:29:40.217164Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.582639217376709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`payment_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`payment_id` as INT64) as `payment_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as FLOAT64) as `amount` ,\n                    cast(`check_id` as INT64) as `check_id` ,\n                    cast(`credit_card_charge_id` as INT64) as `credit_card_charge_id` ,\n                    cast(`credit_card_credit_id` as INT64) as `credit_card_credit_id` ,\n                    cast(`credit_memo_id` as INT64) as `credit_memo_id` ,\n                    cast(`deposit_id` as INT64) as `deposit_id` ,\n                    cast(`expense_id` as INT64) as `expense_id` ,\n                    cast(`invoice_id` as INT64) as `invoice_id` ,\n                    cast(`journal_entry_id` as INT64) as `journal_entry_id` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`payment_line`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`payment_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`payment_id` as INT64) as `payment_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as FLOAT64) as `amount` ,\n                    cast(`check_id` as INT64) as `check_id` ,\n                    cast(`credit_card_charge_id` as INT64) as `credit_card_charge_id` ,\n                    cast(`credit_card_credit_id` as INT64) as `credit_card_credit_id` ,\n                    cast(`credit_memo_id` as INT64) as `credit_memo_id` ,\n                    cast(`deposit_id` as INT64) as `deposit_id` ,\n                    cast(`expense_id` as INT64) as `expense_id` ,\n                    cast(`invoice_id` as INT64) as `invoice_id` ,\n                    cast(`journal_entry_id` as INT64) as `journal_entry_id` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`payment_line`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__payment_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:38.882809Z", "completed_at": "2024-04-24T20:29:40.363255Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:40.364204Z", "completed_at": "2024-04-24T20:29:40.364214Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4837749004364014, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`payment`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`credit_card_amount` as INT64) as `credit_card_amount` ,\n                    cast(`credit_card_auth_code` as INT64) as `credit_card_auth_code` ,\n                    cast(`credit_card_billing_address_street` as INT64) as `credit_card_billing_address_street` ,\n                    cast(`credit_card_cc_expiry_month` as INT64) as `credit_card_cc_expiry_month` ,\n                    cast(`credit_card_cc_expiry_year` as INT64) as `credit_card_cc_expiry_year` ,\n                    cast(`credit_card_cctrans_id` as INT64) as `credit_card_cctrans_id` ,\n                    cast(`credit_card_name_on_account` as INT64) as `credit_card_name_on_account` ,\n                    cast(`credit_card_postal_code` as INT64) as `credit_card_postal_code` ,\n                    cast(`credit_card_process_payment` as INT64) as `credit_card_process_payment` ,\n                    cast(`credit_card_status` as INT64) as `credit_card_status` ,\n                    cast(`credit_card_transaction_authorization_time` as INT64) as `credit_card_transaction_authorization_time` ,\n                    cast(`credit_card_type` as INT64) as `credit_card_type` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`deposit_to_account_id` as INT64) as `deposit_to_account_id` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`payment_method_id` as INT64) as `payment_method_id` ,\n                    cast(`private_note` as STRING) as `private_note` ,\n                    cast(`process_payment` as BOOLEAN) as `process_payment` ,\n                    cast(`receivable_account_id` as INT64) as `receivable_account_id` ,\n                    cast(`reference_number` as INT64) as `reference_number` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`total_amount` as FLOAT64) as `total_amount` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`transaction_source` as INT64) as `transaction_source` ,\n                    cast(`transaction_status` as INT64) as `transaction_status` ,\n                    cast(`unapplied_amount` as INT64) as `unapplied_amount` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`payment`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`payment`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`credit_card_amount` as INT64) as `credit_card_amount` ,\n                    cast(`credit_card_auth_code` as INT64) as `credit_card_auth_code` ,\n                    cast(`credit_card_billing_address_street` as INT64) as `credit_card_billing_address_street` ,\n                    cast(`credit_card_cc_expiry_month` as INT64) as `credit_card_cc_expiry_month` ,\n                    cast(`credit_card_cc_expiry_year` as INT64) as `credit_card_cc_expiry_year` ,\n                    cast(`credit_card_cctrans_id` as INT64) as `credit_card_cctrans_id` ,\n                    cast(`credit_card_name_on_account` as INT64) as `credit_card_name_on_account` ,\n                    cast(`credit_card_postal_code` as INT64) as `credit_card_postal_code` ,\n                    cast(`credit_card_process_payment` as INT64) as `credit_card_process_payment` ,\n                    cast(`credit_card_status` as INT64) as `credit_card_status` ,\n                    cast(`credit_card_transaction_authorization_time` as INT64) as `credit_card_transaction_authorization_time` ,\n                    cast(`credit_card_type` as INT64) as `credit_card_type` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`deposit_to_account_id` as INT64) as `deposit_to_account_id` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`payment_method_id` as INT64) as `payment_method_id` ,\n                    cast(`private_note` as STRING) as `private_note` ,\n                    cast(`process_payment` as BOOLEAN) as `process_payment` ,\n                    cast(`receivable_account_id` as INT64) as `receivable_account_id` ,\n                    cast(`reference_number` as INT64) as `reference_number` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`total_amount` as FLOAT64) as `total_amount` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`transaction_source` as INT64) as `transaction_source` ,\n                    cast(`transaction_status` as INT64) as `transaction_status` ,\n                    cast(`unapplied_amount` as INT64) as `unapplied_amount` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`payment`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__payment_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:38.936910Z", "completed_at": "2024-04-24T20:29:40.421151Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:40.421923Z", "completed_at": "2024-04-24T20:29:40.421930Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4863841533660889, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_tmp", "compiled": true, "compiled_code": "\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`purchase`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_id` as INT64) as `account_id` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`credit` as BOOLEAN) as `credit` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`doc_number` as INT64) as `doc_number` ,\n                    cast(`employee_id` as INT64) as `employee_id` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`payment_method_id` as INT64) as `payment_method_id` ,\n                    cast(`payment_type` as STRING) as `payment_type` ,\n                    cast(`print_status` as INT64) as `print_status` ,\n                    cast(`private_note` as INT64) as `private_note` ,\n                    cast(`remit_to_address_id` as INT64) as `remit_to_address_id` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`total_tax` as INT64) as `total_tax` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`transaction_source` as INT64) as `transaction_source` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` ,\n                    cast(`vendor_id` as INT64) as `vendor_id` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`purchase`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`purchase`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_id` as INT64) as `account_id` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`credit` as BOOLEAN) as `credit` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`doc_number` as INT64) as `doc_number` ,\n                    cast(`employee_id` as INT64) as `employee_id` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`payment_method_id` as INT64) as `payment_method_id` ,\n                    cast(`payment_type` as STRING) as `payment_type` ,\n                    cast(`print_status` as INT64) as `print_status` ,\n                    cast(`private_note` as INT64) as `private_note` ,\n                    cast(`remit_to_address_id` as INT64) as `remit_to_address_id` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`total_tax` as INT64) as `total_tax` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`transaction_source` as INT64) as `transaction_source` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` ,\n                    cast(`vendor_id` as INT64) as `vendor_id` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`purchase`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__purchase_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:38.904391Z", "completed_at": "2024-04-24T20:29:40.465530Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:40.466108Z", "completed_at": "2024-04-24T20:29:40.466113Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5630159378051758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line_tmp", "compiled": true, "compiled_code": "\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`purchase_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`purchase_id` as INT64) as `purchase_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_expense_account_id` as INT64) as `account_expense_account_id` ,\n                    cast(`account_expense_billable_status` as STRING) as `account_expense_billable_status` ,\n                    cast(`account_expense_class_id` as INT64) as `account_expense_class_id` ,\n                    cast(`account_expense_customer_id` as INT64) as `account_expense_customer_id` ,\n                    cast(`account_expense_tax_amount` as INT64) as `account_expense_tax_amount` ,\n                    cast(`account_expense_tax_code_id` as STRING) as `account_expense_tax_code_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`item_expense_billable_status` as STRING) as `item_expense_billable_status` ,\n                    cast(`item_expense_class_id` as INT64) as `item_expense_class_id` ,\n                    cast(`item_expense_customer_id` as INT64) as `item_expense_customer_id` ,\n                    cast(`item_expense_item_id` as INT64) as `item_expense_item_id` ,\n                    cast(`item_expense_quantity` as INT64) as `item_expense_quantity` ,\n                    cast(`item_expense_tax_code_id` as INT64) as `item_expense_tax_code_id` ,\n                    cast(`item_expense_unit_price` as INT64) as `item_expense_unit_price` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`purchase_line`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`purchase_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`purchase_id` as INT64) as `purchase_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_expense_account_id` as INT64) as `account_expense_account_id` ,\n                    cast(`account_expense_billable_status` as STRING) as `account_expense_billable_status` ,\n                    cast(`account_expense_class_id` as INT64) as `account_expense_class_id` ,\n                    cast(`account_expense_customer_id` as INT64) as `account_expense_customer_id` ,\n                    cast(`account_expense_tax_amount` as INT64) as `account_expense_tax_amount` ,\n                    cast(`account_expense_tax_code_id` as STRING) as `account_expense_tax_code_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`item_expense_billable_status` as STRING) as `item_expense_billable_status` ,\n                    cast(`item_expense_class_id` as INT64) as `item_expense_class_id` ,\n                    cast(`item_expense_customer_id` as INT64) as `item_expense_customer_id` ,\n                    cast(`item_expense_item_id` as INT64) as `item_expense_item_id` ,\n                    cast(`item_expense_quantity` as INT64) as `item_expense_quantity` ,\n                    cast(`item_expense_tax_code_id` as INT64) as `item_expense_tax_code_id` ,\n                    cast(`item_expense_unit_price` as INT64) as `item_expense_unit_price` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`purchase_line`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__purchase_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:40.221824Z", "completed_at": "2024-04-24T20:29:41.779028Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:41.779763Z", "completed_at": "2024-04-24T20:29:41.779771Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.560204029083252, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`refund_receipt_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`refund_id` as INT64) as `refund_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`bundle_id` as INT64) as `bundle_id` ,\n                    cast(`bundle_quantity` as INT64) as `bundle_quantity` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`description_service_date` as INT64) as `description_service_date` ,\n                    cast(`description_tax_code_id` as INT64) as `description_tax_code_id` ,\n                    cast(`discount_account_id` as INT64) as `discount_account_id` ,\n                    cast(`discount_class_id` as INT64) as `discount_class_id` ,\n                    cast(`discount_discount_percent` as INT64) as `discount_discount_percent` ,\n                    cast(`discount_percent_based` as INT64) as `discount_percent_based` ,\n                    cast(`discount_tax_code_id` as INT64) as `discount_tax_code_id` ,\n                    cast(`sales_item_account_id` as INT64) as `sales_item_account_id` ,\n                    cast(`sales_item_class_id` as INT64) as `sales_item_class_id` ,\n                    cast(`sales_item_discount_amount` as INT64) as `sales_item_discount_amount` ,\n                    cast(`sales_item_discount_rate` as INT64) as `sales_item_discount_rate` ,\n                    cast(`sales_item_item_id` as INT64) as `sales_item_item_id` ,\n                    cast(`sales_item_quantity` as INT64) as `sales_item_quantity` ,\n                    cast(`sales_item_service_date` as INT64) as `sales_item_service_date` ,\n                    cast(`sales_item_tax_code_id` as STRING) as `sales_item_tax_code_id` ,\n                    cast(`sales_item_unit_price` as INT64) as `sales_item_unit_price` ,\n                    cast(`sub_total_item_id` as INT64) as `sub_total_item_id` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`refund_receipt_line`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`refund_receipt_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`refund_id` as INT64) as `refund_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`bundle_id` as INT64) as `bundle_id` ,\n                    cast(`bundle_quantity` as INT64) as `bundle_quantity` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`description_service_date` as INT64) as `description_service_date` ,\n                    cast(`description_tax_code_id` as INT64) as `description_tax_code_id` ,\n                    cast(`discount_account_id` as INT64) as `discount_account_id` ,\n                    cast(`discount_class_id` as INT64) as `discount_class_id` ,\n                    cast(`discount_discount_percent` as INT64) as `discount_discount_percent` ,\n                    cast(`discount_percent_based` as INT64) as `discount_percent_based` ,\n                    cast(`discount_tax_code_id` as INT64) as `discount_tax_code_id` ,\n                    cast(`sales_item_account_id` as INT64) as `sales_item_account_id` ,\n                    cast(`sales_item_class_id` as INT64) as `sales_item_class_id` ,\n                    cast(`sales_item_discount_amount` as INT64) as `sales_item_discount_amount` ,\n                    cast(`sales_item_discount_rate` as INT64) as `sales_item_discount_rate` ,\n                    cast(`sales_item_item_id` as INT64) as `sales_item_item_id` ,\n                    cast(`sales_item_quantity` as INT64) as `sales_item_quantity` ,\n                    cast(`sales_item_service_date` as INT64) as `sales_item_service_date` ,\n                    cast(`sales_item_tax_code_id` as STRING) as `sales_item_tax_code_id` ,\n                    cast(`sales_item_unit_price` as INT64) as `sales_item_unit_price` ,\n                    cast(`sub_total_item_id` as INT64) as `sub_total_item_id` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`refund_receipt_line`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__refund_receipt_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:40.367262Z", "completed_at": "2024-04-24T20:29:41.980070Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:41.981951Z", "completed_at": "2024-04-24T20:29:41.981958Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.616678237915039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`refund_receipt`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`apply_tax_after_discount` as INT64) as `apply_tax_after_discount` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`bill_email` as STRING) as `bill_email` ,\n                    cast(`billing_address_id` as INT64) as `billing_address_id` ,\n                    cast(`check_payment_account_number` as INT64) as `check_payment_account_number` ,\n                    cast(`check_payment_bank_name` as INT64) as `check_payment_bank_name` ,\n                    cast(`check_payment_check_number` as INT64) as `check_payment_check_number` ,\n                    cast(`check_payment_name_on_account` as INT64) as `check_payment_name_on_account` ,\n                    cast(`check_payment_status` as INT64) as `check_payment_status` ,\n                    cast(`class_id` as INT64) as `class_id` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`credit_card_amount` as INT64) as `credit_card_amount` ,\n                    cast(`credit_card_auth_code` as INT64) as `credit_card_auth_code` ,\n                    cast(`credit_card_billing_address_street` as INT64) as `credit_card_billing_address_street` ,\n                    cast(`credit_card_cc_expiry_month` as INT64) as `credit_card_cc_expiry_month` ,\n                    cast(`credit_card_cc_expiry_year` as INT64) as `credit_card_cc_expiry_year` ,\n                    cast(`credit_card_cctrans_id` as INT64) as `credit_card_cctrans_id` ,\n                    cast(`credit_card_name_on_account` as INT64) as `credit_card_name_on_account` ,\n                    cast(`credit_card_postal_code` as INT64) as `credit_card_postal_code` ,\n                    cast(`credit_card_process_payment` as INT64) as `credit_card_process_payment` ,\n                    cast(`credit_card_status` as INT64) as `credit_card_status` ,\n                    cast(`credit_card_transaction_authorization_time` as INT64) as `credit_card_transaction_authorization_time` ,\n                    cast(`credit_card_type` as INT64) as `credit_card_type` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`customer_memo` as STRING) as `customer_memo` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`deposit_to_account_id` as INT64) as `deposit_to_account_id` ,\n                    cast(`doc_number` as INT64) as `doc_number` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`home_balance` as INT64) as `home_balance` ,\n                    cast(`home_total_amount` as INT64) as `home_total_amount` ,\n                    cast(`payment_method_id` as INT64) as `payment_method_id` ,\n                    cast(`payment_reference_number` as INT64) as `payment_reference_number` ,\n                    cast(`payment_type` as INT64) as `payment_type` ,\n                    cast(`print_status` as INT64) as `print_status` ,\n                    cast(`private_note` as INT64) as `private_note` ,\n                    cast(`shipping_address_id` as INT64) as `shipping_address_id` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`total_tax` as INT64) as `total_tax` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`transaction_source` as INT64) as `transaction_source` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`refund_receipt`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`refund_receipt`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`apply_tax_after_discount` as INT64) as `apply_tax_after_discount` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`bill_email` as STRING) as `bill_email` ,\n                    cast(`billing_address_id` as INT64) as `billing_address_id` ,\n                    cast(`check_payment_account_number` as INT64) as `check_payment_account_number` ,\n                    cast(`check_payment_bank_name` as INT64) as `check_payment_bank_name` ,\n                    cast(`check_payment_check_number` as INT64) as `check_payment_check_number` ,\n                    cast(`check_payment_name_on_account` as INT64) as `check_payment_name_on_account` ,\n                    cast(`check_payment_status` as INT64) as `check_payment_status` ,\n                    cast(`class_id` as INT64) as `class_id` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`credit_card_amount` as INT64) as `credit_card_amount` ,\n                    cast(`credit_card_auth_code` as INT64) as `credit_card_auth_code` ,\n                    cast(`credit_card_billing_address_street` as INT64) as `credit_card_billing_address_street` ,\n                    cast(`credit_card_cc_expiry_month` as INT64) as `credit_card_cc_expiry_month` ,\n                    cast(`credit_card_cc_expiry_year` as INT64) as `credit_card_cc_expiry_year` ,\n                    cast(`credit_card_cctrans_id` as INT64) as `credit_card_cctrans_id` ,\n                    cast(`credit_card_name_on_account` as INT64) as `credit_card_name_on_account` ,\n                    cast(`credit_card_postal_code` as INT64) as `credit_card_postal_code` ,\n                    cast(`credit_card_process_payment` as INT64) as `credit_card_process_payment` ,\n                    cast(`credit_card_status` as INT64) as `credit_card_status` ,\n                    cast(`credit_card_transaction_authorization_time` as INT64) as `credit_card_transaction_authorization_time` ,\n                    cast(`credit_card_type` as INT64) as `credit_card_type` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`customer_memo` as STRING) as `customer_memo` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`deposit_to_account_id` as INT64) as `deposit_to_account_id` ,\n                    cast(`doc_number` as INT64) as `doc_number` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`home_balance` as INT64) as `home_balance` ,\n                    cast(`home_total_amount` as INT64) as `home_total_amount` ,\n                    cast(`payment_method_id` as INT64) as `payment_method_id` ,\n                    cast(`payment_reference_number` as INT64) as `payment_reference_number` ,\n                    cast(`payment_type` as INT64) as `payment_type` ,\n                    cast(`print_status` as INT64) as `print_status` ,\n                    cast(`private_note` as INT64) as `private_note` ,\n                    cast(`shipping_address_id` as INT64) as `shipping_address_id` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`total_tax` as INT64) as `total_tax` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`transaction_source` as INT64) as `transaction_source` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`refund_receipt`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__refund_receipt_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:40.424244Z", "completed_at": "2024-04-24T20:29:41.981595Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:41.983282Z", "completed_at": "2024-04-24T20:29:41.983286Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5608677864074707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp", "compiled": true, "compiled_code": "\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`sales_receipt_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`sales_receipt_id` as INT64) as `sales_receipt_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`bundle_id` as INT64) as `bundle_id` ,\n                    cast(`bundle_quantity` as INT64) as `bundle_quantity` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`description_service_date` as INT64) as `description_service_date` ,\n                    cast(`description_tax_code_id` as INT64) as `description_tax_code_id` ,\n                    cast(`discount_account_id` as INT64) as `discount_account_id` ,\n                    cast(`discount_class_id` as INT64) as `discount_class_id` ,\n                    cast(`discount_discount_percent` as INT64) as `discount_discount_percent` ,\n                    cast(`discount_percent_based` as INT64) as `discount_percent_based` ,\n                    cast(`discount_tax_code_id` as INT64) as `discount_tax_code_id` ,\n                    cast(`sales_item_account_id` as INT64) as `sales_item_account_id` ,\n                    cast(`sales_item_class_id` as INT64) as `sales_item_class_id` ,\n                    cast(`sales_item_discount_amount` as INT64) as `sales_item_discount_amount` ,\n                    cast(`sales_item_discount_rate` as INT64) as `sales_item_discount_rate` ,\n                    cast(`sales_item_item_id` as INT64) as `sales_item_item_id` ,\n                    cast(`sales_item_quantity` as INT64) as `sales_item_quantity` ,\n                    cast(`sales_item_service_date` as INT64) as `sales_item_service_date` ,\n                    cast(`sales_item_tax_code_id` as STRING) as `sales_item_tax_code_id` ,\n                    cast(`sales_item_unit_price` as INT64) as `sales_item_unit_price` ,\n                    cast(`sub_total_item_id` as INT64) as `sub_total_item_id` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`sales_receipt_line`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`sales_receipt_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`sales_receipt_id` as INT64) as `sales_receipt_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`bundle_id` as INT64) as `bundle_id` ,\n                    cast(`bundle_quantity` as INT64) as `bundle_quantity` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`description_service_date` as INT64) as `description_service_date` ,\n                    cast(`description_tax_code_id` as INT64) as `description_tax_code_id` ,\n                    cast(`discount_account_id` as INT64) as `discount_account_id` ,\n                    cast(`discount_class_id` as INT64) as `discount_class_id` ,\n                    cast(`discount_discount_percent` as INT64) as `discount_discount_percent` ,\n                    cast(`discount_percent_based` as INT64) as `discount_percent_based` ,\n                    cast(`discount_tax_code_id` as INT64) as `discount_tax_code_id` ,\n                    cast(`sales_item_account_id` as INT64) as `sales_item_account_id` ,\n                    cast(`sales_item_class_id` as INT64) as `sales_item_class_id` ,\n                    cast(`sales_item_discount_amount` as INT64) as `sales_item_discount_amount` ,\n                    cast(`sales_item_discount_rate` as INT64) as `sales_item_discount_rate` ,\n                    cast(`sales_item_item_id` as INT64) as `sales_item_item_id` ,\n                    cast(`sales_item_quantity` as INT64) as `sales_item_quantity` ,\n                    cast(`sales_item_service_date` as INT64) as `sales_item_service_date` ,\n                    cast(`sales_item_tax_code_id` as STRING) as `sales_item_tax_code_id` ,\n                    cast(`sales_item_unit_price` as INT64) as `sales_item_unit_price` ,\n                    cast(`sub_total_item_id` as INT64) as `sub_total_item_id` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`sales_receipt_line`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__sales_receipt_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:40.467973Z", "completed_at": "2024-04-24T20:29:42.001216Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:42.001752Z", "completed_at": "2024-04-24T20:29:42.001757Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5348739624023438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp", "compiled": true, "compiled_code": "\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`sales_receipt`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`apply_tax_after_discount` as INT64) as `apply_tax_after_discount` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`bill_email` as STRING) as `bill_email` ,\n                    cast(`billing_address_id` as INT64) as `billing_address_id` ,\n                    cast(`class_id` as INT64) as `class_id` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`credit_card_amount` as INT64) as `credit_card_amount` ,\n                    cast(`credit_card_auth_code` as INT64) as `credit_card_auth_code` ,\n                    cast(`credit_card_billing_address_street` as INT64) as `credit_card_billing_address_street` ,\n                    cast(`credit_card_cc_expiry_month` as INT64) as `credit_card_cc_expiry_month` ,\n                    cast(`credit_card_cc_expiry_year` as INT64) as `credit_card_cc_expiry_year` ,\n                    cast(`credit_card_cctrans_id` as INT64) as `credit_card_cctrans_id` ,\n                    cast(`credit_card_name_on_account` as INT64) as `credit_card_name_on_account` ,\n                    cast(`credit_card_postal_code` as INT64) as `credit_card_postal_code` ,\n                    cast(`credit_card_process_payment` as INT64) as `credit_card_process_payment` ,\n                    cast(`credit_card_status` as INT64) as `credit_card_status` ,\n                    cast(`credit_card_transaction_authorization_time` as INT64) as `credit_card_transaction_authorization_time` ,\n                    cast(`credit_card_type` as INT64) as `credit_card_type` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`customer_memo` as STRING) as `customer_memo` ,\n                    cast(`delivery_time` as INT64) as `delivery_time` ,\n                    cast(`delivery_type` as INT64) as `delivery_type` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`deposit_to_account_id` as INT64) as `deposit_to_account_id` ,\n                    cast(`doc_number` as INT64) as `doc_number` ,\n                    cast(`email_status` as INT64) as `email_status` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`home_balance` as INT64) as `home_balance` ,\n                    cast(`home_total_amount` as INT64) as `home_total_amount` ,\n                    cast(`payment_method_id` as INT64) as `payment_method_id` ,\n                    cast(`payment_reference_number` as INT64) as `payment_reference_number` ,\n                    cast(`print_status` as INT64) as `print_status` ,\n                    cast(`private_note` as INT64) as `private_note` ,\n                    cast(`ship_date` as INT64) as `ship_date` ,\n                    cast(`shipping_address_id` as INT64) as `shipping_address_id` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`total_tax` as INT64) as `total_tax` ,\n                    cast(`tracking_number` as INT64) as `tracking_number` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`transaction_source` as INT64) as `transaction_source` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`sales_receipt`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`sales_receipt`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`apply_tax_after_discount` as INT64) as `apply_tax_after_discount` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`bill_email` as STRING) as `bill_email` ,\n                    cast(`billing_address_id` as INT64) as `billing_address_id` ,\n                    cast(`class_id` as INT64) as `class_id` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`credit_card_amount` as INT64) as `credit_card_amount` ,\n                    cast(`credit_card_auth_code` as INT64) as `credit_card_auth_code` ,\n                    cast(`credit_card_billing_address_street` as INT64) as `credit_card_billing_address_street` ,\n                    cast(`credit_card_cc_expiry_month` as INT64) as `credit_card_cc_expiry_month` ,\n                    cast(`credit_card_cc_expiry_year` as INT64) as `credit_card_cc_expiry_year` ,\n                    cast(`credit_card_cctrans_id` as INT64) as `credit_card_cctrans_id` ,\n                    cast(`credit_card_name_on_account` as INT64) as `credit_card_name_on_account` ,\n                    cast(`credit_card_postal_code` as INT64) as `credit_card_postal_code` ,\n                    cast(`credit_card_process_payment` as INT64) as `credit_card_process_payment` ,\n                    cast(`credit_card_status` as INT64) as `credit_card_status` ,\n                    cast(`credit_card_transaction_authorization_time` as INT64) as `credit_card_transaction_authorization_time` ,\n                    cast(`credit_card_type` as INT64) as `credit_card_type` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`customer_id` as INT64) as `customer_id` ,\n                    cast(`customer_memo` as STRING) as `customer_memo` ,\n                    cast(`delivery_time` as INT64) as `delivery_time` ,\n                    cast(`delivery_type` as INT64) as `delivery_type` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`deposit_to_account_id` as INT64) as `deposit_to_account_id` ,\n                    cast(`doc_number` as INT64) as `doc_number` ,\n                    cast(`email_status` as INT64) as `email_status` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`home_balance` as INT64) as `home_balance` ,\n                    cast(`home_total_amount` as INT64) as `home_total_amount` ,\n                    cast(`payment_method_id` as INT64) as `payment_method_id` ,\n                    cast(`payment_reference_number` as INT64) as `payment_reference_number` ,\n                    cast(`print_status` as INT64) as `print_status` ,\n                    cast(`private_note` as INT64) as `private_note` ,\n                    cast(`ship_date` as INT64) as `ship_date` ,\n                    cast(`shipping_address_id` as INT64) as `shipping_address_id` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_code_id` as INT64) as `tax_code_id` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`total_tax` as INT64) as `total_tax` ,\n                    cast(`tracking_number` as INT64) as `tracking_number` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`transaction_source` as INT64) as `transaction_source` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`sales_receipt`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__sales_receipt_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:41.782300Z", "completed_at": "2024-04-24T20:29:43.332296Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:43.333928Z", "completed_at": "2024-04-24T20:29:43.333950Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5539569854736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__transfer_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`transfer`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`from_account_id` as INT64) as `from_account_id` ,\n                    cast(`private_note` as STRING) as `private_note` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`to_account_id` as INT64) as `to_account_id` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`transfer`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`transfer`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`from_account_id` as INT64) as `from_account_id` ,\n                    cast(`private_note` as STRING) as `private_note` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`to_account_id` as INT64) as `to_account_id` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`transfer`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__transfer_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:41.986337Z", "completed_at": "2024-04-24T20:29:43.347013Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:43.347969Z", "completed_at": "2024-04-24T20:29:43.347978Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3640518188476562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`vendor_credit_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`vendor_credit_id` as INT64) as `vendor_credit_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_expense_account_id` as INT64) as `account_expense_account_id` ,\n                    cast(`account_expense_billable_status` as STRING) as `account_expense_billable_status` ,\n                    cast(`account_expense_class_id` as INT64) as `account_expense_class_id` ,\n                    cast(`account_expense_customer_id` as INT64) as `account_expense_customer_id` ,\n                    cast(`account_expense_tax_amount` as INT64) as `account_expense_tax_amount` ,\n                    cast(`account_expense_tax_code_id` as STRING) as `account_expense_tax_code_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`item_expense_billable_status` as STRING) as `item_expense_billable_status` ,\n                    cast(`item_expense_class_id` as INT64) as `item_expense_class_id` ,\n                    cast(`item_expense_customer_id` as INT64) as `item_expense_customer_id` ,\n                    cast(`item_expense_item_id` as INT64) as `item_expense_item_id` ,\n                    cast(`item_expense_quantity` as INT64) as `item_expense_quantity` ,\n                    cast(`item_expense_tax_code_id` as INT64) as `item_expense_tax_code_id` ,\n                    cast(`item_expense_unit_price` as INT64) as `item_expense_unit_price` ,\n                    cast(`private_note` as INT64) as `private_note` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`vendor_credit_line`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`vendor_credit_line`' as string) as _dbt_source_relation,\n\n                \n                    cast(`index` as INT64) as `index` ,\n                    cast(`vendor_credit_id` as INT64) as `vendor_credit_id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_expense_account_id` as INT64) as `account_expense_account_id` ,\n                    cast(`account_expense_billable_status` as STRING) as `account_expense_billable_status` ,\n                    cast(`account_expense_class_id` as INT64) as `account_expense_class_id` ,\n                    cast(`account_expense_customer_id` as INT64) as `account_expense_customer_id` ,\n                    cast(`account_expense_tax_amount` as INT64) as `account_expense_tax_amount` ,\n                    cast(`account_expense_tax_code_id` as STRING) as `account_expense_tax_code_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`description` as STRING) as `description` ,\n                    cast(`item_expense_billable_status` as STRING) as `item_expense_billable_status` ,\n                    cast(`item_expense_class_id` as INT64) as `item_expense_class_id` ,\n                    cast(`item_expense_customer_id` as INT64) as `item_expense_customer_id` ,\n                    cast(`item_expense_item_id` as INT64) as `item_expense_item_id` ,\n                    cast(`item_expense_quantity` as INT64) as `item_expense_quantity` ,\n                    cast(`item_expense_tax_code_id` as INT64) as `item_expense_tax_code_id` ,\n                    cast(`item_expense_unit_price` as INT64) as `item_expense_unit_price` ,\n                    cast(`private_note` as INT64) as `private_note` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`vendor_credit_line`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor_credit_line_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:43.342860Z", "completed_at": "2024-04-24T20:29:43.349225Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:43.351172Z", "completed_at": "2024-04-24T20:29:43.351178Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015461206436157227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.develop.my_second_dbt_model", "compiled": true, "compiled_code": "-- Use the `ref` function to select from other models\n\nselect *\nfrom `dbt-package-testing`.`hubspot_integration_tests_55`.`my_first_dbt_model`\nwhere id = 1", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55`.`my_second_dbt_model`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:43.352688Z", "completed_at": "2024-04-24T20:29:43.366911Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:43.367481Z", "completed_at": "2024-04-24T20:29:43.367486Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017640352249145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.develop.not_null_my_first_dbt_model_id.5fb22c2710", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55`.`my_first_dbt_model`\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:43.362886Z", "completed_at": "2024-04-24T20:29:43.367739Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:43.369036Z", "completed_at": "2024-04-24T20:29:43.369040Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007692813873291016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.develop.unique_my_first_dbt_model_id.16e066b321", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `dbt-package-testing`.`hubspot_integration_tests_55`.`my_first_dbt_model`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:42.003432Z", "completed_at": "2024-04-24T20:29:43.525067Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:43.525572Z", "completed_at": "2024-04-24T20:29:43.525578Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5231690406799316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_tmp", "compiled": true, "compiled_code": "\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`vendor`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_number` as INT64) as `account_number` ,\n                    cast(`active` as BOOLEAN) as `active` ,\n                    cast(`alternate_phone` as INT64) as `alternate_phone` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`billing_address_id` as INT64) as `billing_address_id` ,\n                    cast(`company_name` as STRING) as `company_name` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`display_name` as STRING) as `display_name` ,\n                    cast(`email` as STRING) as `email` ,\n                    cast(`family_name` as INT64) as `family_name` ,\n                    cast(`fax_number` as INT64) as `fax_number` ,\n                    cast(`given_name` as INT64) as `given_name` ,\n                    cast(`middle_name` as INT64) as `middle_name` ,\n                    cast(`mobile_phone` as INT64) as `mobile_phone` ,\n                    cast(`other_contacts` as INT64) as `other_contacts` ,\n                    cast(`primary_phone` as INT64) as `primary_phone` ,\n                    cast(`print_on_check_name` as STRING) as `print_on_check_name` ,\n                    cast(`suffix` as INT64) as `suffix` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_identifier` as INT64) as `tax_identifier` ,\n                    cast(`term_id` as INT64) as `term_id` ,\n                    cast(`title` as INT64) as `title` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` ,\n                    cast(`vendor_1099` as BOOLEAN) as `vendor_1099` ,\n                    cast(`web_url` as INT64) as `web_url` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`vendor`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`vendor`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`account_number` as INT64) as `account_number` ,\n                    cast(`active` as BOOLEAN) as `active` ,\n                    cast(`alternate_phone` as INT64) as `alternate_phone` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`billing_address_id` as INT64) as `billing_address_id` ,\n                    cast(`company_name` as STRING) as `company_name` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`display_name` as STRING) as `display_name` ,\n                    cast(`email` as STRING) as `email` ,\n                    cast(`family_name` as INT64) as `family_name` ,\n                    cast(`fax_number` as INT64) as `fax_number` ,\n                    cast(`given_name` as INT64) as `given_name` ,\n                    cast(`middle_name` as INT64) as `middle_name` ,\n                    cast(`mobile_phone` as INT64) as `mobile_phone` ,\n                    cast(`other_contacts` as INT64) as `other_contacts` ,\n                    cast(`primary_phone` as INT64) as `primary_phone` ,\n                    cast(`print_on_check_name` as STRING) as `print_on_check_name` ,\n                    cast(`suffix` as INT64) as `suffix` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`tax_identifier` as INT64) as `tax_identifier` ,\n                    cast(`term_id` as INT64) as `term_id` ,\n                    cast(`title` as INT64) as `title` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` ,\n                    cast(`vendor_1099` as BOOLEAN) as `vendor_1099` ,\n                    cast(`web_url` as INT64) as `web_url` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`vendor`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:41.990132Z", "completed_at": "2024-04-24T20:29:43.549986Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:43.550482Z", "completed_at": "2024-04-24T20:29:43.550487Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5650999546051025, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_usa`.`vendor_credit`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`doc_number` as INT64) as `doc_number` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`payable_account_id` as INT64) as `payable_account_id` ,\n                    cast(`private_note` as STRING) as `private_note` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` ,\n                    cast(`vendor_id` as INT64) as `vendor_id` \n\n            from `dbt-package-testing`.`quickbooks_usa`.`vendor_credit`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`quickbooks_canada`.`vendor_credit`' as string) as _dbt_source_relation,\n\n                \n                    cast(`id` as INT64) as `id` ,\n                    cast(`_fivetran_deleted` as BOOLEAN) as `_fivetran_deleted` ,\n                    cast(`_fivetran_synced` as DATETIME) as `_fivetran_synced` ,\n                    cast(`balance` as INT64) as `balance` ,\n                    cast(`created_at` as DATETIME) as `created_at` ,\n                    cast(`currency_id` as STRING) as `currency_id` ,\n                    cast(`department_id` as INT64) as `department_id` ,\n                    cast(`doc_number` as INT64) as `doc_number` ,\n                    cast(`exchange_rate` as INT64) as `exchange_rate` ,\n                    cast(`global_tax_calculation` as INT64) as `global_tax_calculation` ,\n                    cast(`payable_account_id` as INT64) as `payable_account_id` ,\n                    cast(`private_note` as STRING) as `private_note` ,\n                    cast(`sync_token` as INT64) as `sync_token` ,\n                    cast(`total_amount` as INT64) as `total_amount` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`updated_at` as DATETIME) as `updated_at` ,\n                    cast(`vendor_id` as INT64) as `vendor_id` \n\n            from `dbt-package-testing`.`quickbooks_canada`.`vendor_credit`\n\n            \n        )\n\n        ", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor_credit_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:43.370636Z", "completed_at": "2024-04-24T20:29:44.093912Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:44.094315Z", "completed_at": "2024-04-24T20:29:44.094321Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.7253749370574951, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as string) as bill_id,\n        index,\n        cast(account_expense_account_id as string) as account_expense_account_id,\n        cast(account_expense_class_id as string) as account_expense_class_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_customer_id as string) as account_expense_customer_id,\n        cast(item_expense_item_id as string) as item_expense_item_id,\n        cast(item_expense_customer_id as string) as item_expense_customer_id,\n        item_expense_billable_status,\n        cast(item_expense_class_id as string) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:43.374908Z", "completed_at": "2024-04-24T20:29:44.162629Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:44.163017Z", "completed_at": "2024-04-24T20:29:44.163022Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7894110679626465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__account", "compiled": true, "compiled_code": "with base as (\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__account_tmp`\n\n),\n\naccount as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    account_sub_type\n    \n as \n    \n    account_sub_type\n    \n, \n    \n    \n    account_type\n    \n as \n    \n    account_type\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_sub_accounts\n    \n as \n    \n    balance_with_sub_accounts\n    \n, \n    \n    \n    classification\n    \n as \n    \n    classification\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    sub_account\n    \n as \n    \n    sub_account\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as string) as account_id,\n        cast(account_number as string) as account_number,\n        sub_account as is_sub_account,\n        cast(parent_account_id as string) as parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        classification,\n        balance,\n        balance_with_sub_accounts,\n        active as is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n    from account\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__account`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:43.552451Z", "completed_at": "2024-04-24T20:29:44.187014Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:44.187417Z", "completed_at": "2024-04-24T20:29:44.187421Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.636218786239624, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__address", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__address_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_sub_division_code\n    \n as \n    \n    country_sub_division_code\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    line_1\n    \n as \n    \n    line_1\n    \n, \n    \n    \n    line_2\n    \n as \n    \n    line_2\n    \n, \n    \n    \n    line_3\n    \n as \n    \n    line_3\n    \n, \n    \n    \n    line_4\n    \n as \n    \n    line_4\n    \n, \n    \n    \n    line_5\n    \n as \n    \n    line_5\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    postal_code\n    \n as \n    \n    postal_code\n    \n\n\n\n        \n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as address_id,\n        city,\n        country,\n        line_1 as address_1,\n        line_2 as address_2,\n        postal_code,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__address`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:43.527156Z", "completed_at": "2024-04-24T20:29:44.230505Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:44.230851Z", "completed_at": "2024-04-24T20:29:44.230854Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.7045459747314453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_linked_txn_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as string) as bill_id,\n        index,\n        cast(bill_payment_id as string) as bill_payment_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_linked_txn`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:44.095752Z", "completed_at": "2024-04-24T20:29:44.918060Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:44.919471Z", "completed_at": "2024-04-24T20:29:44.919478Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.8252091407775879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_payment_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_credit_card_id\n    \n as \n    \n    bill_payment_credit_card_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    linked_bill_payment_id\n    \n as \n    \n    linked_bill_payment_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n  \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_payment_id as string) as bill_payment_id,\n        index,\n        amount,\n        cast(bill_id as string) as bill_id,\n        deposit_id,\n        expense_id,\n        journal_entry_id,\n        linked_bill_payment_id,\n        vendor_credit_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_payment_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:44.188670Z", "completed_at": "2024-04-24T20:29:44.918323Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:44.919717Z", "completed_at": "2024-04-24T20:29:44.919720Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.7326569557189941, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_payment_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    check_bank_account_id\n    \n as \n    \n    check_bank_account_id\n    \n, \n    \n    \n    check_print_status\n    \n as \n    \n    check_print_status\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_account_id\n    \n as \n    \n    credit_card_account_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    pay_type\n    \n as \n    \n    pay_type\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_bill_payment\n    \n as \n    \n    process_bill_payment\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as bill_payment_id,\n        cast(check_bank_account_id as string) as check_bank_account_id,\n        check_print_status,\n        cast(credit_card_account_id as string) as credit_card_account_id,\n        exchange_rate,\n        currency_id,\n        cast(department_id as string) as department_id,\n        pay_type,\n        total_amount,\n        cast( timestamp_trunc(\n        cast(transaction_date as timestamp),\n        day\n    ) as date) as transaction_date,\n        cast(vendor_id as string) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_payment`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:44.164521Z", "completed_at": "2024-04-24T20:29:44.918596Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:44.919956Z", "completed_at": "2024-04-24T20:29:44.919959Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7574918270111084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n \nfinal as (\n    \n    select \n        cast(id as string) as bill_id,\n        balance,\n        cast(doc_number as string) as doc_number,\n        currency_id,\n        cast(department_id as string) as department_id,\n        cast( timestamp_trunc(\n        cast(due_date as timestamp),\n        day\n    ) as date) as due_date_at, \n        cast( timestamp_trunc(\n        cast(transaction_date as timestamp),\n        day\n    ) as date) as transaction_date,\n        exchange_rate,\n        cast(payable_account_id as string) as payable_account_id,\n        total_amount,\n        cast(vendor_id as string) as vendor_id,\n        private_note,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:44.232093Z", "completed_at": "2024-04-24T20:29:45.025814Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:45.026292Z", "completed_at": "2024-04-24T20:29:45.026306Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.7951092720031738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bundle_item_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    item_quantity\n    \n as \n    \n    item_quantity\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n  \n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bundle_id as string) as bundle_id,\n        cast(item_id as string) as item_id,\n        item_quantity,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bundle_item`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:44.926556Z", "completed_at": "2024-04-24T20:29:45.579016Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:45.579706Z", "completed_at": "2024-04-24T20:29:45.579716Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.6572699546813965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bundle_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    print_grouped_items\n    \n as \n    \n    print_grouped_items\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as bundle_id,\n        created_at,\n        active as is_active,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n\n    from fields\n)\n\nselect * from final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bundle`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:44.924435Z", "completed_at": "2024-04-24T20:29:45.663750Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:45.664494Z", "completed_at": "2024-04-24T20:29:45.664502Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.7424287796020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__credit_memo_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(credit_memo_id as string) as credit_memo_id,\n        index,\n        amount,\n        cast(sales_item_account_id as string) as sales_item_account_id,\n        cast(sales_item_class_id as string) as sales_item_class_id,\n        cast(sales_item_item_id as string) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as string) as discount_account_id,\n        cast(discount_class_id as string) as discount_class_id,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__credit_memo_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:44.931669Z", "completed_at": "2024-04-24T20:29:45.665273Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:45.666379Z", "completed_at": "2024-04-24T20:29:45.666383Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7435731887817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__credit_memo_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remaining_credit\n    \n as \n    \n    remaining_credit\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as credit_memo_id,\n        balance,\n        cast(doc_number as string) as doc_number,\n        total_amount,\n        currency_id,\n        cast(class_id as string) as class_id,\n        cast(department_id as string) as department_id,\n        cast(customer_id as string) as customer_id,\n        exchange_rate,\n        cast( timestamp_trunc(\n        cast(transaction_date as timestamp),\n        day\n    ) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__credit_memo`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:45.027785Z", "completed_at": "2024-04-24T20:29:45.739942Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:45.740314Z", "completed_at": "2024-04-24T20:29:45.740320Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.7133519649505615, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__customer_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone_number\n    \n as \n    \n    alternate_phone_number\n    \n, \n    \n    \n    ar_account_id\n    \n as \n    \n    ar_account_id\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_jobs\n    \n as \n    \n    balance_with_jobs\n    \n, \n    \n    \n    bill_address_id\n    \n as \n    \n    bill_address_id\n    \n, \n    \n    \n    bill_with_parent\n    \n as \n    \n    bill_with_parent\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    default_tax_code_id\n    \n as \n    \n    default_tax_code_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    job\n    \n as \n    \n    job\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_number\n    \n as \n    \n    mobile_number\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    open_balance_date\n    \n as \n    \n    open_balance_date\n    \n, \n    \n    \n    parent_customer_id\n    \n as \n    \n    parent_customer_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    preferred_delivery_method\n    \n as \n    \n    preferred_delivery_method\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    resale_number\n    \n as \n    \n    resale_number\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_exemption_reason_id\n    \n as \n    \n    tax_exemption_reason_id\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    website\n    \n as \n    \n    website\n    \n\n\n\n        \n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as customer_id,\n        active as is_active,\n        balance,\n        balance_with_jobs,\n        bill_with_parent,\n        company_name,\n        fully_qualified_name,\n        currency_id,\n        display_name,\n        website,\n        taxable,\n        source_relation\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__customer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:45.581784Z", "completed_at": "2024-04-24T20:29:46.283979Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:46.284850Z", "completed_at": "2024-04-24T20:29:46.284860Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.7044448852539062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__deposit_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    cash_back_account_id\n    \n as \n    \n    cash_back_account_id\n    \n, \n    \n    \n    cash_back_amount\n    \n as \n    \n    cash_back_amount\n    \n, \n    \n    \n    cash_back_memo\n    \n as \n    \n    cash_back_memo\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as deposit_id,\n        cast(account_id as string) as account_id,\n        created_at,\n        currency_id,\n        cast(department_id as string) as department_id,\n        total_amount,\n        cast( timestamp_trunc(\n        cast(transaction_date as timestamp),\n        day\n    ) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__deposit`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:45.667212Z", "completed_at": "2024-04-24T20:29:46.337310Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:46.338004Z", "completed_at": "2024-04-24T20:29:46.338011Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.6725730895996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__department", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__department_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_department_id\n    \n as \n    \n    parent_department_id\n    \n, \n    \n    \n    sub_department\n    \n as \n    \n    sub_department\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as department_id,\n        active as is_active,\n        created_at,\n        updated_at,\n        fully_qualified_name,\n        name,\n        sub_department as is_sub_department,\n        parent_department_id,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__department`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:45.671276Z", "completed_at": "2024-04-24T20:29:46.436287Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:46.436746Z", "completed_at": "2024-04-24T20:29:46.436751Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.766643762588501, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__estimate_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(estimate_id as string) as estimate_id,\n        index,\n        description,\n        discount_account_id,\n        cast(discount_class_id as string) as discount_class_id,\n        sales_item_account_id,\n        cast(sales_item_class_id as string) as sales_item_class_id,\n        sales_item_item_id,\n        sales_item_quantity,\n        item_id,\n        quantity,\n        account_id,\n        amount,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__estimate_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:45.741595Z", "completed_at": "2024-04-24T20:29:46.511734Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:46.512131Z", "completed_at": "2024-04-24T20:29:46.512135Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.7713568210601807, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__deposit_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    deposit_account_id\n    \n as \n    \n    deposit_account_id\n    \n, \n    \n    \n    deposit_check_number\n    \n as \n    \n    deposit_check_number\n    \n, \n    \n    \n    deposit_class_id\n    \n as \n    \n    deposit_class_id\n    \n, \n    \n    \n    deposit_customer_id\n    \n as \n    \n    deposit_customer_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    deposit_payment_method_id\n    \n as \n    \n    deposit_payment_method_id\n    \n, \n    \n    \n    deposit_tax_applicable_on\n    \n as \n    \n    deposit_tax_applicable_on\n    \n, \n    \n    \n    deposit_tax_code_id\n    \n as \n    \n    deposit_tax_code_id\n    \n, \n    \n    \n    deposit_transaction_type\n    \n as \n    \n    deposit_transaction_type\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n, \n    \n    \n    refund_receipt_id\n    \n as \n    \n    refund_receipt_id\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n        \n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(deposit_id as string) as deposit_id,\n        index,\n        amount,\n        description,\n        cast(deposit_account_id as string) as deposit_account_id,\n        cast(deposit_class_id as string) as deposit_class_id,\n        cast(deposit_customer_id as string) as deposit_customer_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__deposit_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:46.287680Z", "completed_at": "2024-04-24T20:29:46.956023Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:46.956597Z", "completed_at": "2024-04-24T20:29:46.956603Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.6706719398498535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__estimate_tmp`\n\n),\n \nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accepted_by\n    \n as \n    \n    accepted_by\n    \n, \n    \n    \n    accepted_date\n    \n as \n    \n    accepted_date\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    expiration_date\n    \n as \n    \n    expiration_date\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as estimate_id,\n        cast(class_id as string) as class_id,\n        created_at,\n        currency_id,\n        customer_id,\n        cast(department_id as string) as department_id,\n        cast( timestamp_trunc(\n        cast(due_date as timestamp),\n        day\n    ) as date) as due_date, \n        total_amount,\n        cast( timestamp_trunc(\n        cast(transaction_date as timestamp),\n        day\n    ) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__estimate`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:46.340079Z", "completed_at": "2024-04-24T20:29:47.024052Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:47.024611Z", "completed_at": "2024-04-24T20:29:47.024616Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.6858029365539551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_line_bundle_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discount_amount\n    \n as \n    \n    discount_amount\n    \n, \n    \n    \n    discount_rate\n    \n as \n    \n    discount_rate\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_line_index\n    \n as \n    \n    invoice_line_index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    line_num\n    \n as \n    \n    line_num\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    service_date\n    \n as \n    \n    service_date\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as string) as invoice_id,\n        index,\n        cast(class_id as string) as class_id,\n        description,\n        amount,\n        cast(sales_item_item_id as string) as sales_item_item_id,\n        cast(item_id as string) as item_id,\n        quantity,\n        sales_item_quantity,\n        cast(account_id as string) as account_id,\n        unit_price,\n        invoice_line_index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_line_bundle`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:46.438350Z", "completed_at": "2024-04-24T20:29:47.248594Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:47.249236Z", "completed_at": "2024-04-24T20:29:47.249243Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8122241497039795, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_line_tmp`\n\n),\n\nfields as ( \n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as string) as invoice_id,\n        index,\n        amount,\n        cast(sales_item_account_id as string) as sales_item_account_id,\n        cast(sales_item_item_id as string) as sales_item_item_id,\n        cast(sales_item_class_id as string) as sales_item_class_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as string) as discount_account_id,\n        detail_type,\n        cast(discount_class_id as string) as discount_class_id,\n        description,\n        quantity,\n        bundle_quantity,\n        cast(bundle_id as string) as bundle_id,\n        cast(account_id as string) as account_id,\n        cast(item_id as string) as item_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:46.513534Z", "completed_at": "2024-04-24T20:29:47.249536Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:47.250914Z", "completed_at": "2024-04-24T20:29:47.250919Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.7387418746948242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_linked_txn_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    charge_credit_id\n    \n as \n    \n    charge_credit_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    reimburse_charge_id\n    \n as \n    \n    reimburse_charge_id\n    \n, \n    \n    \n    statement_charge_id\n    \n as \n    \n    statement_charge_id\n    \n, \n    \n    \n    time_activity_id\n    \n as \n    \n    time_activity_id\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as string) as invoice_id,\n        cast(payment_id as string) as payment_id,\n        cast(estimate_id as string) as estimate_id,\n        index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_linked_txn`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:46.958515Z", "completed_at": "2024-04-24T20:29:47.743234Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:47.743781Z", "completed_at": "2024-04-24T20:29:47.743786Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.7863657474517822, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__item", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    asset_account_id\n    \n as \n    \n    asset_account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    expense_account_id\n    \n as \n    \n    expense_account_id\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    income_account_id\n    \n as \n    \n    income_account_id\n    \n, \n    \n    \n    inventory_start_date\n    \n as \n    \n    inventory_start_date\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_item_id\n    \n as \n    \n    parent_item_id\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    purchase_description\n    \n as \n    \n    purchase_description\n    \n, \n    \n    \n    purchase_tax_code_id\n    \n as \n    \n    purchase_tax_code_id\n    \n, \n    \n    \n    purchase_tax_included\n    \n as \n    \n    purchase_tax_included\n    \n, \n    \n    \n    quantity_on_hand\n    \n as \n    \n    quantity_on_hand\n    \n, \n    \n    \n    sales_tax_code_id\n    \n as \n    \n    sales_tax_code_id\n    \n, \n    \n    \n    sales_tax_included\n    \n as \n    \n    sales_tax_included\n    \n, \n    \n    \n    stock_keeping_unit\n    \n as \n    \n    stock_keeping_unit\n    \n, \n    \n    \n    sub_item\n    \n as \n    \n    sub_item\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    track_quantity_on_hand\n    \n as \n    \n    track_quantity_on_hand\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as item_id,\n        active as is_active,\n        created_at,\n        cast(income_account_id as string) as income_account_id,\n        cast(asset_account_id as string) as asset_account_id,\n        cast(expense_account_id as string) as expense_account_id,\n        name,\n        purchase_cost,\n        taxable,\n        type,\n        unit_price,\n        inventory_start_date,\n        cast(parent_item_id as string) as parent_item_id,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:47.026366Z", "completed_at": "2024-04-24T20:29:47.784219Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:47.784698Z", "completed_at": "2024-04-24T20:29:47.784703Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.759361982345581, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__journal_entry_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    adjustment\n    \n as \n    \n    adjustment\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as string) as journal_entry_id,\n        adjustment as is_adjustment,\n        created_at,\n        currency_id,\n        cast(doc_number as string) as doc_number,\n        exchange_rate,\n        private_note,\n        total_amount,\n        cast( timestamp_trunc(\n        cast(transaction_date as timestamp),\n        day\n    ) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__journal_entry`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:47.257140Z", "completed_at": "2024-04-24T20:29:48.000539Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:48.001529Z", "completed_at": "2024-04-24T20:29:48.001534Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.7459700107574463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__journal_entry_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    billable_status\n    \n as \n    \n    billable_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    posting_type\n    \n as \n    \n    posting_type\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_applicable_on\n    \n as \n    \n    tax_applicable_on\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(journal_entry_id as string) as journal_entry_id,\n        index,\n        cast(account_id as string) as account_id,\n        amount,\n        cast(customer_id as string) as customer_id,\n        cast(department_id as string) as department_id,\n        cast(class_id as string) as class_id,\n        description,\n        billable_status,\n        posting_type,\n        cast(vendor_id as string) as vendor_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__journal_entry_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:47.252600Z", "completed_at": "2024-04-24T20:29:48.000772Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:48.001751Z", "completed_at": "2024-04-24T20:29:48.001755Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7513740062713623, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allow_ipnpayment\n    \n as \n    \n    allow_ipnpayment\n    \n, \n    \n    \n    allow_online_achpayment\n    \n as \n    \n    allow_online_achpayment\n    \n, \n    \n    \n    allow_online_credit_card_payment\n    \n as \n    \n    allow_online_credit_card_payment\n    \n, \n    \n    \n    allow_online_payment\n    \n as \n    \n    allow_online_payment\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    billing_bcc_email\n    \n as \n    \n    billing_bcc_email\n    \n, \n    \n    \n    billing_cc_email\n    \n as \n    \n    billing_cc_email\n    \n, \n    \n    \n    billing_email\n    \n as \n    \n    billing_email\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    custom_sales_rep\n    \n as \n    \n    custom_sales_rep\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit\n    \n as \n    \n    deposit\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as invoice_id,\n        balance,\n        cast(doc_number as string) as doc_number,\n        total_amount,\n        currency_id,\n        cast(department_id as string) as department_id,\n        cast(deposit_to_account_id as string) as deposit_to_account_id,\n        exchange_rate,\n        cast( timestamp_trunc(\n        cast(transaction_date as timestamp),\n        day\n    ) as date) as transaction_date,\n        cast(customer_id as string) as customer_id,\n        cast(billing_address_id as string) as billing_address_id,\n        shipping_address_id,\n        delivery_type,\n        cast( timestamp_trunc(\n        cast(due_date as timestamp),\n        day\n    ) as date) as due_date, \n        cast(class_id as string) as class_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:47.745437Z", "completed_at": "2024-04-24T20:29:48.487264Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:48.487936Z", "completed_at": "2024-04-24T20:29:48.487942Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.7439720630645752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__payment_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n\n\n\n        \n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(payment_id as string) as payment_id,\n        index,\n        amount,\n        journal_entry_id,\n        deposit_id,\n        cast(invoice_id as string) as invoice_id,\n        credit_memo_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__payment_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:47.786216Z", "completed_at": "2024-04-24T20:29:48.488213Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:48.489662Z", "completed_at": "2024-04-24T20:29:48.489667Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.7048580646514893, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__payment_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_payment\n    \n as \n    \n    process_payment\n    \n, \n    \n    \n    receivable_account_id\n    \n as \n    \n    receivable_account_id\n    \n, \n    \n    \n    reference_number\n    \n as \n    \n    reference_number\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    unapplied_amount\n    \n as \n    \n    unapplied_amount\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as payment_id,\n        unapplied_amount,\n        total_amount,\n        currency_id,\n        cast(receivable_account_id as string) as receivable_account_id,\n        cast(deposit_to_account_id as string) as deposit_to_account_id,\n        exchange_rate,\n        cast( timestamp_trunc(\n        cast(transaction_date as timestamp),\n        day\n    ) as date) as transaction_date,\n        cast(customer_id as string) as customer_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__payment`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:48.004438Z", "completed_at": "2024-04-24T20:29:48.806480Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:48.807589Z", "completed_at": "2024-04-24T20:29:48.807595Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.8049299716949463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__purchase_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit\n    \n as \n    \n    credit\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remit_to_address_id\n    \n as \n    \n    remit_to_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n     \n    select \n        cast(id as string) as purchase_id,\n        cast(account_id as string) as account_id,\n        created_at,\n        cast(doc_number as string) as doc_number,\n        currency_id,\n        exchange_rate,\n        credit,\n        total_amount,\n        payment_type,\n        cast(department_id as string) as department_id,\n        cast(customer_id as string) as customer_id,\n        cast(vendor_id as string) as vendor_id,\n        cast( timestamp_trunc(\n        cast(transaction_date as timestamp),\n        day\n    ) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__purchase`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:48.087417Z", "completed_at": "2024-04-24T20:29:48.806857Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:48.807853Z", "completed_at": "2024-04-24T20:29:48.807857Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8050229549407959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__purchase_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_id as string) as purchase_id,\n        index,\n        cast(account_expense_account_id as string) as account_expense_account_id,\n        cast(account_expense_class_id as string) as account_expense_class_id, \n        account_expense_billable_status,\n        cast(account_expense_customer_id as string) as account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as string) as item_expense_item_id,\n        item_expense_billable_status,\n        cast(item_expense_customer_id as string) as item_expense_customer_id,\n        cast(item_expense_class_id as string) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__purchase_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:48.496279Z", "completed_at": "2024-04-24T20:29:49.214692Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:49.215255Z", "completed_at": "2024-04-24T20:29:49.215261Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.7205700874328613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__refund_receipt_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    check_payment_account_number\n    \n as \n    \n    check_payment_account_number\n    \n, \n    \n    \n    check_payment_bank_name\n    \n as \n    \n    check_payment_bank_name\n    \n, \n    \n    \n    check_payment_check_number\n    \n as \n    \n    check_payment_check_number\n    \n, \n    \n    \n    check_payment_name_on_account\n    \n as \n    \n    check_payment_name_on_account\n    \n, \n    \n    \n    check_payment_status\n    \n as \n    \n    check_payment_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as refund_id,\n        balance,\n        cast(doc_number as string) as doc_number,\n        total_amount,\n        cast(class_id as string) as class_id,\n        cast(deposit_to_account_id as string) as deposit_to_account_id,\n        created_at,\n        cast(department_id as string) as department_id,\n        cast(customer_id as string) as customer_id,\n        currency_id,\n        exchange_rate,\n        cast( timestamp_trunc(\n        cast(transaction_date as timestamp),\n        day\n    ) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__refund_receipt`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:48.491289Z", "completed_at": "2024-04-24T20:29:49.309016Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:49.309476Z", "completed_at": "2024-04-24T20:29:49.309481Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8199589252471924, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__refund_receipt_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(refund_id as string) as refund_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as string) as discount_account_id,\n        cast(discount_class_id as string) as discount_class_id,\n        cast(sales_item_account_id as string) as sales_item_account_id,\n        cast(sales_item_class_id as string) as sales_item_class_id, \n        cast(sales_item_item_id as string) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        sales_item_tax_code_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__refund_receipt_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:48.814129Z", "completed_at": "2024-04-24T20:29:49.515991Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:49.516517Z", "completed_at": "2024-04-24T20:29:49.516523Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7068111896514893, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__sales_receipt_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as sales_receipt_id,\n        balance,\n        cast(doc_number as string) as doc_number,\n        total_amount,\n        cast(deposit_to_account_id as string) as deposit_to_account_id,\n        created_at,\n        cast(customer_id as string) as customer_id,\n        cast(department_id as string) as department_id,\n        cast(class_id as string) as class_id,\n        currency_id,\n        exchange_rate,\n        cast( timestamp_trunc(\n        cast(transaction_date as timestamp),\n        day\n    ) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__sales_receipt`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:48.810895Z", "completed_at": "2024-04-24T20:29:49.517211Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:49.518236Z", "completed_at": "2024-04-24T20:29:49.518239Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.7090048789978027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__sales_receipt_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(sales_receipt_id as string) as sales_receipt_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as string) as discount_account_id,\n        cast(discount_class_id as string) as discount_class_id,\n        cast(sales_item_account_id as string) as sales_item_account_id,\n        cast(sales_item_class_id as string) as sales_item_class_id,\n        cast(sales_item_item_id as string) as sales_item_item_id,\n        sales_item_tax_code_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__sales_receipt_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:49.519026Z", "completed_at": "2024-04-24T20:29:49.524411Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:49.524824Z", "completed_at": "2024-04-24T20:29:49.524828Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0074498653411865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.develop.not_null_my_second_dbt_model_id.151b76d778", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55`.`my_second_dbt_model`\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:49.522409Z", "completed_at": "2024-04-24T20:29:49.525034Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:49.525977Z", "completed_at": "2024-04-24T20:29:49.525981Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004736900329589844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.develop.unique_my_second_dbt_model_id.57a0f8c493", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `dbt-package-testing`.`hubspot_integration_tests_55`.`my_second_dbt_model`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:49.217103Z", "completed_at": "2024-04-24T20:29:49.919144Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:49.920130Z", "completed_at": "2024-04-24T20:29:49.920142Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.7046639919281006, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__transfer", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__transfer_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    from_account_id\n    \n as \n    \n    from_account_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    to_account_id\n    \n as \n    \n    to_account_id\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as transfer_id,\n        amount,\n        cast(from_account_id as string) as from_account_id,\n        cast(to_account_id as string) as to_account_id,\n        cast( timestamp_trunc(\n        cast(transaction_date as timestamp),\n        day\n    ) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__transfer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:49.923432Z", "completed_at": "2024-04-24T20:29:49.935143Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:49.935732Z", "completed_at": "2024-04-24T20:29:49.935739Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013933658599853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_line_bill_id__index__source_relation.73722b1062", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, index, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_line`\n    group by bill_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:49.937745Z", "completed_at": "2024-04-24T20:29:49.941054Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:49.941536Z", "completed_at": "2024-04-24T20:29:49.941541Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005033969879150391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id.25c5ea7348", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_line`\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:49.947105Z", "completed_at": "2024-04-24T20:29:49.953090Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:49.953523Z", "completed_at": "2024-04-24T20:29:49.953527Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007356882095336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue.127506f73f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        classification as value_field,\n        count(*) as n_records\n\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__account`\n    group by classification\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Asset','Equity','Expense','Liability','Revenue'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:49.957175Z", "completed_at": "2024-04-24T20:29:49.979391Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:49.979851Z", "completed_at": "2024-04-24T20:29:49.979856Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02552199363708496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__account_account_id__source_relation.864a4b056a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__account`\n    group by account_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:49.311314Z", "completed_at": "2024-04-24T20:29:49.981019Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:49.983685Z", "completed_at": "2024-04-24T20:29:49.983695Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.6736762523651123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor_credit_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(vendor_credit_id as string) as vendor_credit_id,\n        index,\n        cast(account_expense_customer_id as string) as account_expense_customer_id,\n        cast(account_expense_account_id as string) as account_expense_account_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_class_id as string) as account_expense_class_id,\n        cast(item_expense_customer_id as string) as item_expense_customer_id,\n        cast(item_expense_item_id as string) as item_expense_item_id,\n        item_expense_quantity,\n        item_expense_unit_price,\n        cast(item_expense_class_id as string) as item_expense_class_id,\n        item_expense_billable_status,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor_credit_line`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:49.981570Z", "completed_at": "2024-04-24T20:29:49.984565Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:49.985322Z", "completed_at": "2024-04-24T20:29:49.985325Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007382869720458984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__account_account_id.9944488b9d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__account`\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:49.985498Z", "completed_at": "2024-04-24T20:29:49.989067Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:49.992169Z", "completed_at": "2024-04-24T20:29:49.992172Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007752895355224609, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__address_address_id__source_relation.5bc813a014", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__address`\n    group by address_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:49.989265Z", "completed_at": "2024-04-24T20:29:49.992867Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:49.993637Z", "completed_at": "2024-04-24T20:29:49.993640Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007325887680053711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__address_address_id.4f100ae50c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__address`\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:49.993832Z", "completed_at": "2024-04-24T20:29:49.996774Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:49.999109Z", "completed_at": "2024-04-24T20:29:49.999112Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0063517093658447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id.35f96199bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_linked_txn`\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:49.996975Z", "completed_at": "2024-04-24T20:29:49.999816Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.000548Z", "completed_at": "2024-04-24T20:29:50.000551Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006250143051147461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_line_bill_payment_id__index__source_relation.0a7e17967c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, index, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_payment_line`\n    group by bill_payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.000729Z", "completed_at": "2024-04-24T20:29:50.003507Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.006006Z", "completed_at": "2024-04-24T20:29:50.006009Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0063037872314453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id.1dbb366150", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_payment_line`\nwhere bill_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.003687Z", "completed_at": "2024-04-24T20:29:50.006667Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.007369Z", "completed_at": "2024-04-24T20:29:50.007371Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0063018798828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_payment_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to accounts payable and a credit record to the specified cash account.\n*/\n\n--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith bill_payments as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_payment`\n),\n\nbill_payment_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_payment_line`\n),\n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__account`\n),\n\nap_accounts as (\n\n    select\n        account_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Payable'\n        and is_active\n        and not is_sub_account\n),\n\nbill_payment_join as (\n\n    select\n        bill_payments.bill_payment_id as transaction_id,\n        bill_payments.source_relation,\n        row_number() over(partition by bill_payments.bill_payment_id, bill_payments.source_relation \n            order by bill_payments.source_relation, bill_payments.transaction_date) - 1 as index,\n        bill_payments.transaction_date,\n        bill_payments.total_amount as amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id,\n        bill_payments.vendor_id,\n        bill_payments.department_id\n    from bill_payments\n\n    left join ap_accounts\n        on ap_accounts.source_relation = bill_payments.source_relation\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as string) as customer_id,\n        vendor_id,\n        amount,\n        payment_account_id as account_id,\n        cast(null as string) as class_id,\n        department_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as string) as customer_id,\n        vendor_id,\n        amount,\n        account_id,\n        cast(null as string) as class_id,\n        department_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source\n    from bill_payment_join\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__bill_payment_double_entry`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.007530Z", "completed_at": "2024-04-24T20:29:50.010266Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.012230Z", "completed_at": "2024-04-24T20:29:50.012233Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005697965621948242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_bill_payment_id__source_relation.4b7aafd630", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_payment`\n    group by bill_payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.010451Z", "completed_at": "2024-04-24T20:29:50.012759Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.013515Z", "completed_at": "2024-04-24T20:29:50.013518Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004055976867675781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id.908899ccfb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_payment`\nwhere bill_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.017761Z", "completed_at": "2024-04-24T20:29:50.021117Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.023200Z", "completed_at": "2024-04-24T20:29:50.023203Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006206989288330078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_bill_id__source_relation.8c08249abf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill`\n    group by bill_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.021584Z", "completed_at": "2024-04-24T20:29:50.024189Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.026157Z", "completed_at": "2024-04-24T20:29:50.026161Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00560307502746582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id.ca717958c8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill`\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.024613Z", "completed_at": "2024-04-24T20:29:50.027113Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.029506Z", "completed_at": "2024-04-24T20:29:50.029509Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005869865417480469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id.6d547b8c07", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bundle_item`\nwhere bundle_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.027555Z", "completed_at": "2024-04-24T20:29:50.030460Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.032505Z", "completed_at": "2024-04-24T20:29:50.032508Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0059680938720703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bundle_bundle_id__source_relation.e241a21ebc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bundle_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bundle`\n    group by bundle_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.030896Z", "completed_at": "2024-04-24T20:29:50.033513Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.035765Z", "completed_at": "2024-04-24T20:29:50.035768Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005875110626220703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id.382e1dad60", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bundle`\nwhere bundle_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.033954Z", "completed_at": "2024-04-24T20:29:50.036608Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.037387Z", "completed_at": "2024-04-24T20:29:50.037390Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006167173385620117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_line_credit_memo_id__index__source_relation.7a43f0e186", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, index, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__credit_memo_line`\n    group by credit_memo_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.037586Z", "completed_at": "2024-04-24T20:29:50.042028Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.042354Z", "completed_at": "2024-04-24T20:29:50.042357Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005836963653564453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id.58953be02b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__credit_memo_line`\nwhere credit_memo_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.040305Z", "completed_at": "2024-04-24T20:29:50.042810Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.043559Z", "completed_at": "2024-04-24T20:29:50.043562Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004111051559448242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_credit_memo_id__source_relation.917f24c5ca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__credit_memo`\n    group by credit_memo_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.044224Z", "completed_at": "2024-04-24T20:29:50.049168Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.049531Z", "completed_at": "2024-04-24T20:29:50.049534Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006694793701171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id.d921d2b152", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__credit_memo`\nwhere credit_memo_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.047320Z", "completed_at": "2024-04-24T20:29:50.049703Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.050517Z", "completed_at": "2024-04-24T20:29:50.050520Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0041751861572265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__customer_customer_id__source_relation.61cc22a568", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__customer`\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.051564Z", "completed_at": "2024-04-24T20:29:50.055511Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.055855Z", "completed_at": "2024-04-24T20:29:50.055859Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005625247955322266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id.98232a9723", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__customer`\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.053682Z", "completed_at": "2024-04-24T20:29:50.056023Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.056877Z", "completed_at": "2024-04-24T20:29:50.056880Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0041887760162353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_deposit_id__source_relation.5574d8e908", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__deposit`\n    group by deposit_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.057949Z", "completed_at": "2024-04-24T20:29:50.061934Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.062286Z", "completed_at": "2024-04-24T20:29:50.062290Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005702972412109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id.880b8c37b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__deposit`\nwhere deposit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.060165Z", "completed_at": "2024-04-24T20:29:50.062450Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.063346Z", "completed_at": "2024-04-24T20:29:50.063348Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004182100296020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_line_estimate_id__index__source_relation.cc61ab0953", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, index, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__estimate_line`\n    group by estimate_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.064459Z", "completed_at": "2024-04-24T20:29:50.068761Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.069116Z", "completed_at": "2024-04-24T20:29:50.069119Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0060710906982421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id.c060f99b4c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__estimate_line`\nwhere estimate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.066805Z", "completed_at": "2024-04-24T20:29:50.069281Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.070172Z", "completed_at": "2024-04-24T20:29:50.070174Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0044019222259521484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__deposit_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified cash account and a credit record to either undeposited funds or a\nspecific other account indicated in the deposit line.\n*/\n\n--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith deposits as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__deposit`\n),\n\ndeposit_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__deposit_line`\n),\n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__account`\n),\n\nuf_accounts as (\n\n    select\n        account_id,\n        source_relation\n    from accounts\n\n    where account_sub_type = 'UndepositedFunds'\n        and is_active\n        and not is_sub_account\n),\n\ndeposit_join as (\n\n    select\n        deposits.deposit_id as transaction_id,\n        deposits.source_relation,\n        deposit_lines.index,\n        deposits.transaction_date,\n        deposit_lines.amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.deposit_account_id, uf_accounts.account_id) as deposit_from_acct_id,\n        deposit_customer_id as customer_id,\n        deposit_lines.deposit_class_id as class_id,\n        deposits.department_id\n\n    from deposits\n\n    inner join deposit_lines\n        on deposits.deposit_id = deposit_lines.deposit_id\n        and deposits.source_relation = deposit_lines.source_relation\n\n    left join uf_accounts\n        on uf_accounts.source_relation = deposits.source_relation\n\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as string) as vendor_id,\n        amount,\n        deposit_to_acct_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as string) as vendor_id,\n        amount,\n        deposit_from_acct_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source\n    from deposit_join\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__deposit_double_entry`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.074491Z", "completed_at": "2024-04-24T20:29:50.076859Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.077631Z", "completed_at": "2024-04-24T20:29:50.077634Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005457162857055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_line_deposit_id__index__source_relation.443de63985", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, index, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__deposit_line`\n    group by deposit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.077812Z", "completed_at": "2024-04-24T20:29:50.080377Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.082450Z", "completed_at": "2024-04-24T20:29:50.082453Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005692958831787109, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id.d615f463e1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__deposit_line`\nwhere deposit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.080556Z", "completed_at": "2024-04-24T20:29:50.083101Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.083846Z", "completed_at": "2024-04-24T20:29:50.083849Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005671262741088867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_estimate_id__source_relation.412260b882", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__estimate`\n    group by estimate_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.084020Z", "completed_at": "2024-04-24T20:29:50.086516Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.089001Z", "completed_at": "2024-04-24T20:29:50.089004Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005994081497192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id.0331d3c310", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__estimate`\nwhere estimate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.086701Z", "completed_at": "2024-04-24T20:29:50.089624Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.090348Z", "completed_at": "2024-04-24T20:29:50.090350Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006063938140869141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_bundle_invoice_id__index__invoice_line_index__source_relation.5370e9fcd0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, invoice_line_index, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_line_bundle`\n    group by invoice_id, index, invoice_line_index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.090515Z", "completed_at": "2024-04-24T20:29:50.092900Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.094972Z", "completed_at": "2024-04-24T20:29:50.094974Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0054531097412109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id.cfd59b83a9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_line_bundle`\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.093333Z", "completed_at": "2024-04-24T20:29:50.095905Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.097856Z", "completed_at": "2024-04-24T20:29:50.097859Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0055310726165771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_invoice_id__index__source_relation.99b74bc327", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_line`\n    group by invoice_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.096362Z", "completed_at": "2024-04-24T20:29:50.098938Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.101689Z", "completed_at": "2024-04-24T20:29:50.101692Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006345033645629883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id.0424087a8f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_line`\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.099091Z", "completed_at": "2024-04-24T20:29:50.102373Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.103106Z", "completed_at": "2024-04-24T20:29:50.103109Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006312131881713867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id.c9b9c8f8f4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_linked_txn`\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.103265Z", "completed_at": "2024-04-24T20:29:50.105678Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.107360Z", "completed_at": "2024-04-24T20:29:50.107362Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005087852478027344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified expense account and credit record to accounts payable for each bill transaction.\n*/\n\n--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill`\n),\n\nbill_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_line`\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.expense_account_id as parent_expense_account_id,\n        parent.income_account_id as parent_income_account_id\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item` item\n\n    left join `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item` parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nbill_join as (\n    select\n        bills.bill_id as transaction_id,\n        bills.source_relation,\n        bill_lines.index,\n        bills.transaction_date,\n        bill_lines.amount,\n        coalesce(bill_lines.account_expense_account_id,items.asset_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        coalesce(bill_lines.item_expense_class_id, bill_lines.account_expense_class_id) as class_id,\n        bills.vendor_id,\n        bills.department_id\n    from bills\n\n    inner join bill_lines\n        on bills.bill_id = bill_lines.bill_id\n        and bills.source_relation = bill_lines.source_relation\n\n    left join items\n        on bill_lines.item_expense_item_id = items.item_id\n        and bill_lines.source_relation = items.source_relation\n),\n\nfinal as (\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        payed_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        payable_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source\n    from bill_join\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__bill_double_entry`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.109124Z", "completed_at": "2024-04-24T20:29:50.113231Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.113759Z", "completed_at": "2024-04-24T20:29:50.113762Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006120204925537109, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__credit_memo_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to Discounts Refunds Given and a credit record to the specified income account.\n*/\n\n--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith credit_memos as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__credit_memo`\n),\n\ncredit_memo_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__credit_memo_line`\n),\n\nitems as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item`\n),\n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__account`\n),\n\ndf_accounts as (\n\n    select\n        account_id as account_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n        and not is_sub_account\n),\n\ncredit_memo_join as (\n\n    select\n        credit_memos.credit_memo_id as transaction_id,\n        credit_memos.source_relation,\n        credit_memo_lines.index,\n        credit_memos.transaction_date,\n        credit_memo_lines.amount,\n        coalesce(credit_memo_lines.sales_item_account_id, items.income_account_id, items.expense_account_id) as account_id,\n        credit_memos.customer_id,\n        coalesce(credit_memo_lines.sales_item_class_id, credit_memo_lines.discount_class_id, credit_memos.class_id) as class_id,\n        credit_memos.department_id\n\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos.credit_memo_id = credit_memo_lines.credit_memo_id\n        and credit_memos.source_relation = credit_memo_lines.source_relation\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.item_id\n        and credit_memo_lines.source_relation = items.source_relation\n\n    where coalesce(credit_memo_lines.discount_account_id, credit_memo_lines.sales_item_account_id, credit_memo_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        credit_memo_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as string) as vendor_id,\n        amount * -1 as amount,\n        account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'credit_memo' as transaction_source\n    from credit_memo_join\n\n    union all\n\n    select\n        transaction_id,\n        credit_memo_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as string) as vendor_id,\n        amount * -1 as amount,\n        df_accounts.account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'credit_memo' as transaction_source\n    from credit_memo_join\n\n    left join df_accounts\n        on df_accounts.source_relation = credit_memo_join.source_relation\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__credit_memo_double_entry`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.115687Z", "completed_at": "2024-04-24T20:29:50.119228Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.119845Z", "completed_at": "2024-04-24T20:29:50.119847Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005377054214477539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__item_item_id__source_relation.169465a2a6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        item_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item`\n    group by item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.117544Z", "completed_at": "2024-04-24T20:29:50.119404Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.120012Z", "completed_at": "2024-04-24T20:29:50.120014Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005433082580566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__item_item_id.da906d8fb9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item`\nwhere item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.121947Z", "completed_at": "2024-04-24T20:29:50.125669Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.126002Z", "completed_at": "2024-04-24T20:29:50.126004Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005329132080078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id.39198c4ff2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__journal_entry`\nwhere journal_entry_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.123487Z", "completed_at": "2024-04-24T20:29:50.126164Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.127001Z", "completed_at": "2024-04-24T20:29:50.127004Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00613093376159668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__journal_entry_double_entry", "compiled": true, "compiled_code": "/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\n\n--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith journal_entries as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__journal_entry`\n),\n\njournal_entry_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__journal_entry_line`\n),\n\nfinal as (\n\n    select\n        journal_entries.journal_entry_id as transaction_id,\n        journal_entries.source_relation,\n        journal_entry_lines.index,\n        journal_entries.transaction_date,\n        journal_entry_lines.customer_id,\n        journal_entry_lines.vendor_id,\n        journal_entry_lines.amount,\n        journal_entry_lines.account_id,\n        class_id,\n        journal_entry_lines.department_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries.journal_entry_id = journal_entry_lines.journal_entry_id\n        and journal_entries.source_relation = journal_entry_lines.source_relation\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__journal_entry_double_entry`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.129921Z", "completed_at": "2024-04-24T20:29:50.132853Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.135173Z", "completed_at": "2024-04-24T20:29:50.135176Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006012916564941406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit.ab661907c3", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        posting_type as value_field,\n        count(*) as n_records\n\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__journal_entry_line`\n    group by posting_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Credit','Debit'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.133335Z", "completed_at": "2024-04-24T20:29:50.136139Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.138160Z", "completed_at": "2024-04-24T20:29:50.138163Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005877971649169922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__journal_entry_line_journal_entry_id__index__source_relation.0cd1d9f232", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        journal_entry_id, index, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__journal_entry_line`\n    group by journal_entry_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.136610Z", "completed_at": "2024-04-24T20:29:50.139130Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.142481Z", "completed_at": "2024-04-24T20:29:50.142483Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006916046142578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id.bd89a6f784", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__journal_entry_line`\nwhere journal_entry_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.139582Z", "completed_at": "2024-04-24T20:29:50.143463Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.145591Z", "completed_at": "2024-04-24T20:29:50.145594Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00701904296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__invoice_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to accounts receivable and a credit record to a specified revenue account indicated on the invoice line.\n*/\n\n--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice`\n),\n\ninvoice_lines as (\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_line`\n),\n\nitems as (\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item` item\n\n    left join `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item` parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\naccounts as (\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__account`\n),\n\n\n\n\ninvoice_bundles as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_line_bundle`\n),\n\nbundles as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bundle`\n),\n\nbundle_items as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bundle_item`\n),\n\nincome_accounts as (\n\n    select *\n    from accounts\n\n    where account_sub_type = 'SalesOfProductIncome'\n),\n\nbundle_income_accounts as (\n\n    select distinct\n        coalesce(parent.income_account_id, income_accounts.account_id) as account_id,\n        coalesce(parent.source_relation, income_accounts.source_relation) as source_relation,\n        bundle_items.bundle_id\n\n    from items\n\n    left join items as parent\n        on items.parent_item_id = parent.item_id\n        and items.source_relation = parent.source_relation\n\n    inner join income_accounts\n        on income_accounts.account_id = items.income_account_id\n        and income_accounts.source_relation = items.source_relation\n\n    inner join bundle_items\n        on bundle_items.item_id = items.item_id\n        and bundle_items.source_relation = items.source_relation\n),\n\n\nar_accounts as (\n\n    select \n        account_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n),\n\ninvoice_join as (\n\n    select\n        invoices.invoice_id as transaction_id,\n        invoices.source_relation,\n        invoice_lines.index,\n        invoices.transaction_date as transaction_date,\n        case when invoices.total_amount != 0\n            then invoice_lines.amount\n            else invoices.total_amount\n                end as amount,\n\n        \n        case when invoice_lines.detail_type is not null then invoice_lines.detail_type\n            when coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.sales_item_account_id) is not null then 'SalesItemLineDetail'\n            when invoice_lines.discount_account_id is not null then 'DiscountLineDetail'\n            when coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.discount_account_id, invoice_lines.sales_item_account_id) is null then 'NoAccountMapping'\n        end as invoice_line_transaction_type,\n        coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.discount_account_id, invoice_lines.sales_item_account_id) as account_id,\n        \n\n        coalesce(invoice_lines.sales_item_class_id, invoice_lines.discount_class_id, invoices.class_id) as class_id,\n\n        invoices.customer_id,\n        invoices.department_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices.invoice_id = invoice_lines.invoice_id\n        and invoices.source_relation = invoice_lines.source_relation\n\n    left join items\n        on coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) = items.item_id\n        and invoice_lines.source_relation = items.source_relation\n\n    \n    left join bundle_income_accounts\n        on bundle_income_accounts.bundle_id = invoice_lines.bundle_id\n        and bundle_income_accounts.source_relation = invoice_lines.source_relation\n    \n),\n\ninvoice_filter as (\n\n    select *\n    from invoice_join\n    where invoice_line_transaction_type not in ('SubTotalLineDetail','NoAccountMapping')\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        invoice_filter.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as string) as vendor_id,\n        amount,\n        account_id,\n        class_id,\n        department_id,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'debit'\n            else 'credit' \n        end as transaction_type,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'invoice discount'\n            else 'invoice'\n        end as transaction_source\n    from invoice_filter\n\n    union all\n\n    select\n        transaction_id,\n        invoice_filter.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as string) as vendor_id,\n        amount,\n        ar_accounts.account_id,\n        class_id,\n        department_id,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'credit'\n            else 'debit' \n        end as transaction_type,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'invoice discount'\n            else 'invoice'\n        end as transaction_source\n    from invoice_filter\n\n    left join ar_accounts\n        on ar_accounts.source_relation = invoice_filter.source_relation\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__invoice_double_entry`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.147191Z", "completed_at": "2024-04-24T20:29:50.151108Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.151465Z", "completed_at": "2024-04-24T20:29:50.151468Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005424976348876953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_invoice_id__source_relation.ef51800044", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice`\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.149557Z", "completed_at": "2024-04-24T20:29:50.151955Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.152704Z", "completed_at": "2024-04-24T20:29:50.152706Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.003963947296142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id.b6d8e1ad7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice`\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.153317Z", "completed_at": "2024-04-24T20:29:50.156635Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.158547Z", "completed_at": "2024-04-24T20:29:50.158549Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006404876708984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_line_payment_id__index__source_relation.25be3cf2e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, index, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__payment_line`\n    group by payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.156812Z", "completed_at": "2024-04-24T20:29:50.159066Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.159826Z", "completed_at": "2024-04-24T20:29:50.159829Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004025936126708984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id.6351e3fe26", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__payment_line`\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:49.530123Z", "completed_at": "2024-04-24T20:29:50.173024Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.174098Z", "completed_at": "2024-04-24T20:29:50.174102Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.6453776359558105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor_credit_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as vendor_credit_id,\n        balance,\n        cast(doc_number as string) as doc_number,\n        total_amount,\n        currency_id,\n        exchange_rate,\n        created_at,\n        cast(payable_account_id as string) as payable_account_id,\n        cast(department_id as string) as department_id,\n        private_note,\n        cast( timestamp_trunc(\n        cast(transaction_date as timestamp),\n        day\n    ) as date) as transaction_date,\n        cast(vendor_id as string) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor_credit`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.170143Z", "completed_at": "2024-04-24T20:29:50.173904Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.176955Z", "completed_at": "2024-04-24T20:29:50.176959Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008143901824951172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__payment_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to either undeposited funds or a specified cash account and a credit record to accounts receivable.\n*/\n\n--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith payments as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__payment`\n),\n\npayment_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__payment_line`\n),\n\naccounts as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__account`\n),\n\nar_accounts as (\n\n    select\n        account_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n        and not is_sub_account\n),\n\npayment_join as (\n\n    select\n        payments.payment_id as transaction_id,\n        payments.source_relation,\n        row_number() over(partition by payments.payment_id, payments.source_relation \n            order by payments.source_relation, payments.transaction_date) - 1 as index,\n        payments.transaction_date,\n        payments.total_amount as amount,\n        payments.deposit_to_account_id,\n        payments.receivable_account_id,\n        payments.customer_id\n    from payments\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        payment_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as string) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        cast(null as string) as class_id,\n        cast(null as string) as department_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source\n    from payment_join\n\n    union all\n\n    select\n        transaction_id,\n        payment_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as string) as vendor_id,\n        amount,\n        coalesce(receivable_account_id, ar_accounts.account_id) as account_id,\n        cast(null as string) as class_id,\n        cast(null as string) as department_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source\n    from payment_join\n\n    left join ar_accounts\n        on ar_accounts.source_relation = payment_join.source_relation\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__payment_double_entry`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.174956Z", "completed_at": "2024-04-24T20:29:50.178223Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.180872Z", "completed_at": "2024-04-24T20:29:50.180875Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00979304313659668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_payment_id__source_relation.1998a8282e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__payment`\n    group by payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.178991Z", "completed_at": "2024-04-24T20:29:50.183670Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.184656Z", "completed_at": "2024-04-24T20:29:50.184659Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007477998733520508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id.ca2c1ef54f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__payment`\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.181089Z", "completed_at": "2024-04-24T20:29:50.184216Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.185480Z", "completed_at": "2024-04-24T20:29:50.185483Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009953022003173828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard.7de7edf458", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        payment_type as value_field,\n        count(*) as n_records\n\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__purchase`\n    group by payment_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Cash','Check','CreditCard'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.185659Z", "completed_at": "2024-04-24T20:29:50.189231Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.191697Z", "completed_at": "2024-04-24T20:29:50.191699Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009005069732666016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_purchase_id__source_relation.172340b49e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__purchase`\n    group by purchase_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.189963Z", "completed_at": "2024-04-24T20:29:50.193644Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.194676Z", "completed_at": "2024-04-24T20:29:50.194680Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006537914276123047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id.fc2090959b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__purchase`\nwhere purchase_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.191909Z", "completed_at": "2024-04-24T20:29:50.194164Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.195519Z", "completed_at": "2024-04-24T20:29:50.195522Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007806062698364258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__purchase_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to a specified expense account and a credit record to the payment account.\n*/\nwith purchases as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__purchase`\n),\n\npurchase_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__purchase_line`\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.expense_account_id as parent_expense_account_id\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item` item\n\n    left join `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item` parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\npurchase_join as (\n\n    select\n        purchases.purchase_id as transaction_id,\n        purchases.source_relation,\n        purchase_lines.index,\n        purchases.transaction_date,\n        purchase_lines.amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, false) = true then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, false) = true then 'credit' else 'debit' end as payed_to_transaction_type,\n        purchases.customer_id,\n        coalesce(purchase_lines.item_expense_class_id, purchase_lines.account_expense_class_id) as class_id,\n        purchases.vendor_id,\n        purchases.department_id\n    from purchases\n\n    inner join purchase_lines\n        on purchases.purchase_id = purchase_lines.purchase_id\n        and purchases.source_relation = purchase_lines.source_relation\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.item_id\n        and purchase_lines.source_relation = items.source_relation\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        payed_from_account_id as account_id,\n        class_id,\n        department_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        payed_to_account_id as account_id,\n        class_id,\n        department_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source\n    from purchase_join\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__purchase_double_entry`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.198972Z", "completed_at": "2024-04-24T20:29:50.202902Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.205399Z", "completed_at": "2024-04-24T20:29:50.205403Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008327960968017578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_line_purchase_id__index__source_relation.a23c661eb5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, index, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__purchase_line`\n    group by purchase_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.201012Z", "completed_at": "2024-04-24T20:29:50.203430Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.206169Z", "completed_at": "2024-04-24T20:29:50.206172Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008449077606201172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id.5406fca79c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__purchase_line`\nwhere purchase_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.203607Z", "completed_at": "2024-04-24T20:29:50.206510Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.207789Z", "completed_at": "2024-04-24T20:29:50.207791Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007319211959838867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_refund_id__source_relation.60f976841d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__refund_receipt`\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.208227Z", "completed_at": "2024-04-24T20:29:50.213451Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.215834Z", "completed_at": "2024-04-24T20:29:50.215838Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009275197982788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id.29e8a8216e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__refund_receipt`\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.210557Z", "completed_at": "2024-04-24T20:29:50.213972Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.216563Z", "completed_at": "2024-04-24T20:29:50.216566Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009239673614501953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__refund_receipt_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified asset account and a credit record the specified cash account.\n*/\n\n--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith refund_receipts as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__refund_receipt`\n),\n\nrefund_receipt_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__refund_receipt_line`\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item` item\n\n    left join `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item` parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nrefund_receipt_join as (\n\n    select\n        refund_receipts.refund_id as transaction_id,\n        refund_receipts.source_relation,\n        refund_receipt_lines.index,\n        refund_receipts.transaction_date,\n        refund_receipt_lines.amount,\n        refund_receipts.deposit_to_account_id as credit_to_account_id,\n        coalesce(refund_receipt_lines.discount_account_id, refund_receipt_lines.sales_item_account_id, items.parent_income_account_id, items.income_account_id) as debit_account_id,\n        refund_receipts.customer_id,\n        coalesce(refund_receipt_lines.sales_item_class_id, refund_receipt_lines.discount_class_id, refund_receipts.class_id) as class_id,\n        refund_receipts.department_id\n    from refund_receipts\n\n    inner join refund_receipt_lines\n        on refund_receipts.refund_id = refund_receipt_lines.refund_id\n        and refund_receipts.source_relation = refund_receipt_lines.source_relation\n\n    left join items\n        on refund_receipt_lines.sales_item_item_id = items.item_id\n        and refund_receipt_lines.source_relation = items.source_relation\n\n    where coalesce(refund_receipt_lines.discount_account_id, refund_receipt_lines.sales_item_account_id, refund_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as string) as vendor_id,\n        amount,\n        credit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'refund_receipt' as transaction_source\n    from refund_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as string) as vendor_id,\n        amount,\n        debit_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'refund_receipt' as transaction_source\n    from refund_receipt_join\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__refund_receipt_double_entry`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.219095Z", "completed_at": "2024-04-24T20:29:50.232977Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.233444Z", "completed_at": "2024-04-24T20:29:50.233448Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016222000122070312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_line_refund_id__index__source_relation.614411eb40", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, index, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__refund_receipt_line`\n    group by refund_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.221246Z", "completed_at": "2024-04-24T20:29:50.233646Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.235162Z", "completed_at": "2024-04-24T20:29:50.235165Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017507076263427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id.57df809b80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__refund_receipt_line`\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:49.527220Z", "completed_at": "2024-04-24T20:29:50.234170Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.235597Z", "completed_at": "2024-04-24T20:29:50.235600Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.710371732711792, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone\n    \n as \n    \n    alternate_phone\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_phone\n    \n as \n    \n    mobile_phone\n    \n, \n    \n    \n    other_contacts\n    \n as \n    \n    other_contacts\n    \n, \n    \n    \n    primary_phone\n    \n as \n    \n    primary_phone\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_identifier\n    \n as \n    \n    tax_identifier\n    \n, \n    \n    \n    term_id\n    \n as \n    \n    term_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_1099\n    \n as \n    \n    vendor_1099\n    \n, \n    \n    \n    web_url\n    \n as \n    \n    web_url\n    \n\n\n\n\n        \n\n\n, case\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_usa.%' then 'quickbooks_usa'\n    \n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.quickbooks_canada.%' then 'quickbooks_canada'\n    \n  end as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string) as vendor_id,\n        account_number,\n        active as is_active,\n        balance,\n        cast(billing_address_id as string) as billing_address_id,\n        company_name,\n        created_at,\n        currency_id,\n        display_name,\n        web_url,\n        vendor_1099 as is_vendor_1099,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.222829Z", "completed_at": "2024-04-24T20:29:50.234326Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.235759Z", "completed_at": "2024-04-24T20:29:50.235763Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018047094345092773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_sales_receipt_id__source_relation.36bdbcffde", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__sales_receipt`\n    group by sales_receipt_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.237252Z", "completed_at": "2024-04-24T20:29:50.240206Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.246708Z", "completed_at": "2024-04-24T20:29:50.246711Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011767864227294922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id.b97c1a238a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__sales_receipt`\nwhere sales_receipt_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.240697Z", "completed_at": "2024-04-24T20:29:50.247307Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.248582Z", "completed_at": "2024-04-24T20:29:50.248585Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01028299331665039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__sales_receipt_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified cash account and a credit record to the specified asset account.\n*/\n\n--To disable this model, set the using_sales_receipt variable within your dbt_project.yml file to False.\n\n\nwith sales_receipts as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__sales_receipt`\n),\n\nsales_receipt_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__sales_receipt_line`\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item` item\n\n    left join `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item` parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nsales_receipt_join as (\n\n    select\n        sales_receipts.sales_receipt_id as transaction_id,\n        sales_receipts.source_relation,\n        sales_receipt_lines.index,\n        sales_receipts.transaction_date,\n        sales_receipt_lines.amount,\n        sales_receipts.deposit_to_account_id as debit_to_account_id,\n        coalesce(sales_receipt_lines.discount_account_id, sales_receipt_lines.sales_item_account_id, items.parent_income_account_id, items.income_account_id) as credit_to_account_id,\n        sales_receipts.customer_id,\n        coalesce(sales_receipt_lines.sales_item_class_id, sales_receipt_lines.discount_class_id, sales_receipts.class_id) as class_id,\n        sales_receipts.department_id\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts.sales_receipt_id = sales_receipt_lines.sales_receipt_id\n        and sales_receipts.source_relation = sales_receipt_lines.source_relation\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.item_id\n        and sales_receipt_lines.source_relation = items.source_relation\n\n    where coalesce(sales_receipt_lines.discount_account_id, sales_receipt_lines.sales_item_account_id, sales_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as string) as vendor_id,\n        amount,\n        debit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'sales_receipt' as transaction_source\n    from sales_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as string) as vendor_id,\n        amount,\n        credit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'sales_receipt' as transaction_source\n    from sales_receipt_join\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__sales_receipt_double_entry`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.245093Z", "completed_at": "2024-04-24T20:29:50.247706Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.249218Z", "completed_at": "2024-04-24T20:29:50.249222Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011998891830444336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_line_sales_receipt_id__index__source_relation.20e80dcbd5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, index, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__sales_receipt_line`\n    group by sales_receipt_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.249931Z", "completed_at": "2024-04-24T20:29:50.252951Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.258354Z", "completed_at": "2024-04-24T20:29:50.258357Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012211084365844727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.9be0667fc3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__sales_receipt_line`\nwhere sales_receipt_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.253839Z", "completed_at": "2024-04-24T20:29:50.260605Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.261970Z", "completed_at": "2024-04-24T20:29:50.261973Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010622978210449219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__transfer_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the receiveing account and a credit record to the sending account.\n*/\n\n--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith transfers as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__transfer`\n),\n\ntransfer_body as (\n\n    select\n        transfer_id as transaction_id,\n        source_relation,\n        row_number() over(partition by transfer_id, source_relation \n            order by source_relation, transaction_date) - 1 as index,\n        transaction_date,\n        amount,\n        from_account_id as credit_to_account_id,\n        to_account_id as debit_to_account_id\n    from transfers\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as string) as customer_id,\n        cast(null as string) as vendor_id,\n        amount,\n        credit_to_account_id as account_id,\n        cast(null as string) as class_id,\n        cast(null as string) as department_id,\n        'credit' as transaction_type,\n        'transfer' as transaction_source\n    from transfer_body\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as string) as customer_id,\n        cast(null as string) as vendor_id,\n        amount,\n        debit_to_account_id as account_id,\n        cast(null as string) as class_id,\n        cast(null as string) as department_id,\n        'debit' as transaction_type,\n        'transfer' as transaction_source\n    from transfer_body\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__transfer_double_entry`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.256498Z", "completed_at": "2024-04-24T20:29:50.261012Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.262488Z", "completed_at": "2024-04-24T20:29:50.262491Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012573957443237305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__transfer_transfer_id__source_relation.bfa4c7345e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__transfer`\n    group by transfer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.258574Z", "completed_at": "2024-04-24T20:29:50.261622Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.264927Z", "completed_at": "2024-04-24T20:29:50.264931Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012507200241088867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id.c1c80a253c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transfer_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__transfer`\nwhere transfer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.263025Z", "completed_at": "2024-04-24T20:29:50.266435Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.269329Z", "completed_at": "2024-04-24T20:29:50.269332Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01065516471862793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_credit_line_vendor_credit_id__index__source_relation.094b35ac4d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_credit_id, index, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor_credit_line`\n    group by vendor_credit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.267750Z", "completed_at": "2024-04-24T20:29:50.273819Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.274893Z", "completed_at": "2024-04-24T20:29:50.274896Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009633064270019531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__vendor_credit_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to payable account and a credit record to the expense account.\n*/\n\n--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith vendor_credits as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor_credit`\n),\n\nvendor_credit_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor_credit_line`\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item` item\n\n    left join `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item` parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nvendor_credit_join as (\n\n    select\n        vendor_credits.vendor_credit_id as transaction_id,\n        vendor_credits.source_relation,\n        vendor_credit_lines.index,\n        vendor_credits.transaction_date,\n        vendor_credit_lines.amount,\n        vendor_credits.payable_account_id as debit_to_account_id,\n        coalesce(vendor_credit_lines.account_expense_account_id, items.parent_income_account_id, items.income_account_id, items.expense_account_id) as credit_account_id,\n        coalesce(account_expense_customer_id, item_expense_customer_id) as customer_id,\n        coalesce(item_expense_class_id, account_expense_class_id) as class_id,\n        vendor_credits.vendor_id,\n        vendor_credits.department_id\n    from vendor_credits\n\n    inner join vendor_credit_lines\n        on vendor_credits.vendor_credit_id = vendor_credit_lines.vendor_credit_id\n        and vendor_credits.source_relation = vendor_credit_lines.source_relation\n\n    left join items\n        on vendor_credit_lines.item_expense_item_id = items.item_id\n        and vendor_credit_lines.source_relation = items.source_relation\n),\n\nfinal as (\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        credit_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'vendor_credit' as transaction_source\n    from vendor_credit_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        debit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'vendor_credit' as transaction_source\n    from vendor_credit_join\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__vendor_credit_double_entry`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.272263Z", "completed_at": "2024-04-24T20:29:50.275060Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.278418Z", "completed_at": "2024-04-24T20:29:50.278420Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011886835098266602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id.1275a5ab5a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_credit_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor_credit`\nwhere vendor_credit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.276389Z", "completed_at": "2024-04-24T20:29:50.279692Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.304413Z", "completed_at": "2024-04-24T20:29:50.304416Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.030514955520629883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_vendor_id__source_relation.4960d9d21a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_id, source_relation\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor`\n    group by vendor_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.280214Z", "completed_at": "2024-04-24T20:29:50.304825Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.316826Z", "completed_at": "2024-04-24T20:29:50.316830Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.039037227630615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id.f509a77195", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor`\nwhere vendor_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.281855Z", "completed_at": "2024-04-24T20:29:50.316033Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.317317Z", "completed_at": "2024-04-24T20:29:50.317320Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03945589065551758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__ap_ar_enhanced", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith  __dbt__cte__int_quickbooks__bill_join as (\n--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill`\n),\n\nbill_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_line`\n),\n\nbills_linked as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_linked_txn`\n),\n\nbill_payments as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_payment`\n),\n\nbill_payment_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_payment_line`\n\n    where bill_id is not null\n),\n\nbill_pay as (\n\n    select\n        bills.bill_id,\n        bills.source_relation,\n        bills_linked.bill_payment_id\n    from bills\n\n    left join bills_linked\n        on bills.bill_id = bills_linked.bill_id\n        and bills.source_relation = bills_linked.source_relation\n\n    where bills_linked.bill_payment_id is not null\n),\n\nbill_link as (\n\n    select\n        bills.*,\n        bill_pay.bill_payment_id\n    from bills\n\n    left join bill_pay\n        on bills.bill_id = bill_pay.bill_id\n        and bills.source_relation = bill_pay.source_relation\n),\n\nfinal as (\n\n    select\n        cast('bill' as string)  as transaction_type,\n        bill_link.bill_id as transaction_id,\n        bill_link.source_relation,\n        bill_link.doc_number,\n        bill_link.department_id,\n        bill_link.vendor_id as vendor_id,\n        bill_link.payable_account_id,\n        bill_link.total_amount as total_amount,\n        bill_link.balance as current_balance,\n        bill_link.due_date_at as due_date,\n        min(bill_payments.transaction_date) as initial_payment_date,\n        max(bill_payments.transaction_date) as recent_payment_date,\n        sum(coalesce(bill_payment_lines.amount, 0)) as total_current_payment\n\n    from bill_link\n\n    left join bill_payments\n        on bill_link.bill_payment_id = bill_payments.bill_payment_id\n        and bill_link.source_relation = bill_payments.source_relation\n\n    left join bill_payment_lines\n        on bill_payments.bill_payment_id = bill_payment_lines.bill_payment_id\n        and bill_payments.source_relation = bill_payment_lines.source_relation\n        and bill_link.bill_id = bill_payment_lines.bill_id\n        and bill_link.source_relation = bill_payment_lines.source_relation\n    \n    group by 1,2,3,4,5,6,7,8,9,10 \n)\n\nselect * \nfrom final\n),  __dbt__cte__int_quickbooks__invoice_join as (\n--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice`\n),\n\ninvoice_linked as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_linked_txn`\n),\n\n\nestimates as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__estimate`\n),\n\n\npayments as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__payment`\n),\n\npayment_lines_payment as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__payment_line`\n\n    where invoice_id is not null\n),\n\ninvoice_est as (\n\n    select\n        invoices.invoice_id,\n        invoice_linked.estimate_id,\n        invoices.source_relation\n    from invoices\n\n    left join invoice_linked\n        on invoices.invoice_id = invoice_linked.invoice_id\n        and invoices.source_relation = invoice_linked.source_relation\n\n    where invoice_linked.estimate_id is not null\n),\n\ninvoice_pay as (\n\n    select\n        invoices.invoice_id,\n        invoice_linked.payment_id,\n        invoices.source_relation\n    from invoices\n\n    left join invoice_linked\n        on invoices.invoice_id = invoice_linked.invoice_id\n        and invoices.source_relation = invoice_linked.source_relation\n\n    where invoice_linked.payment_id is not null\n),\n\ninvoice_link as (\n\n    select\n        invoices.*,\n        invoice_est.estimate_id,\n        invoice_pay.payment_id\n    from invoices\n\n    left join invoice_est\n        on invoices.invoice_id = invoice_est.invoice_id\n        and invoices.source_relation = invoice_est.source_relation\n\n    left join invoice_pay\n        on invoices.invoice_id = invoice_pay.invoice_id\n        and invoices.source_relation = invoice_pay.source_relation\n),\n\nfinal as (\n\n    select\n        cast('invoice' as string) as transaction_type,\n        invoice_link.invoice_id as transaction_id,\n        invoice_link.source_relation,\n        invoice_link.doc_number,\n        invoice_link.estimate_id,\n        invoice_link.department_id,\n        invoice_link.customer_id as customer_id,\n        invoice_link.billing_address_id,\n        invoice_link.shipping_address_id,\n        invoice_link.delivery_type,\n        invoice_link.total_amount as total_amount,\n        invoice_link.balance as current_balance,\n\n        \n        coalesce(estimates.total_amount, 0) as estimate_total_amount,\n        estimates.transaction_status as estimate_status,\n\n        \n\n        invoice_link.due_date as due_date,\n        min(payments.transaction_date) as initial_payment_date,\n        max(payments.transaction_date) as recent_payment_date,\n        sum(coalesce(payment_lines_payment.amount, 0)) as total_current_payment\n\n    from invoice_link\n\n    \n    left join estimates\n        on invoice_link.estimate_id = estimates.estimate_id\n        and invoice_link.source_relation = estimates.source_relation\n    \n\n    left join payments\n        on invoice_link.payment_id = payments.payment_id\n        and invoice_link.source_relation = payments.source_relation\n\n    left join payment_lines_payment\n        on payments.payment_id = payment_lines_payment.payment_id\n        and payments.source_relation = payment_lines_payment.source_relation\n        and invoice_link.invoice_id = payment_lines_payment.invoice_id\n        and invoice_link.source_relation = payment_lines_payment.source_relation\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 \n)\n\nselect * \nfrom final\n), bill_join as (\n\n    select *\n    from __dbt__cte__int_quickbooks__bill_join\n),\n\n\ninvoice_join as (\n\n    select *\n    from __dbt__cte__int_quickbooks__invoice_join\n),\n\n\n\ndepartments as ( \n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__department`\n),\n\n\n\naddresses as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__address`\n),\n\n\ncustomers as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__customer`\n),\n\nvendors as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor`\n),\n\nfinal as (\n\n    select\n        bill_join.transaction_type,\n        bill_join.transaction_id,\n        bill_join.source_relation,\n        doc_number,\n        cast(null as string) as estimate_id, \n\n        \n        departments.fully_qualified_name as department_name,\n        \n\n        'vendor' as transaction_with,\n        vendors.display_name as customer_vendor_name,\n        vendors.balance as customer_vendor_balance,\n\n        \n        billing_address.city as customer_vendor_address_city,\n        billing_address.country as customer_vendor_address_country,\n        concat(billing_address.address_1, billing_address.address_2) as customer_vendor_address_line,\n        \n        \n        vendors.web_url as customer_vendor_website,\n        cast(null as string) as delivery_type,\n        cast(null as string) as estimate_status,\n        bill_join.total_amount,\n        cast(null as numeric) as estimate_amount,\n        bill_join.current_balance,\n        bill_join.total_current_payment,\n        bill_join.due_date,\n        case when bill_join.current_balance != 0 and \n\n    datetime_diff(\n        cast(bill_join.due_date as datetime),\n        cast(bill_join.recent_payment_date as datetime),\n        day\n    )\n\n   < 0\n            then true\n            else false\n                end as is_overdue,\n        case when bill_join.current_balance != 0 and \n\n    datetime_diff(\n        cast(bill_join.due_date as datetime),\n        cast(bill_join.recent_payment_date as datetime),\n        day\n    )\n\n   < 0\n            then \n\n    datetime_diff(\n        cast(bill_join.due_date as datetime),\n        cast(bill_join.recent_payment_date as datetime),\n        day\n    )\n\n   * -1\n            else 0\n                end as days_overdue,\n        bill_join.initial_payment_date,\n        bill_join.recent_payment_date\n    from bill_join\n\n    \n    left join departments  \n        on bill_join.department_id = departments.department_id\n        and bill_join.source_relation = departments.source_relation\n    \n\n    left join vendors\n        on bill_join.vendor_id = vendors.vendor_id\n        and bill_join.source_relation = vendors.source_relation\n    \n    \n    left join addresses as billing_address\n        on vendors.billing_address_id = billing_address.address_id\n        and vendors.source_relation = billing_address.source_relation\n    \n    \n    \n    union all\n\n    select \n        invoice_join.transaction_type,\n        invoice_join.transaction_id,\n        invoice_join.source_relation,\n        doc_number,\n        invoice_join.estimate_id,\n\n        \n        departments.fully_qualified_name as department_name,\n        \n\n        'customer' as transaction_with,\n        customers.fully_qualified_name as customer_vendor_name,\n        customers.balance as customer_vendor_current_balance,\n\n        \n        billing_address.city as customer_vendor_address_city,\n        billing_address.country as customer_vendor_address_country,\n        concat(billing_address.address_1, billing_address.address_2) as customer_vendor_address_line,\n        \n\n        customers.website as customer_vendor_webiste,\n        invoice_join.delivery_type,\n        invoice_join.estimate_status,\n        invoice_join.total_amount as total_amount,\n        invoice_join.estimate_total_amount as estimate_total_amount,\n        invoice_join.current_balance as current_balance,\n        invoice_join.total_current_payment as total_current_payment,\n        invoice_join.due_date,\n        case when invoice_join.current_balance != 0 and \n\n    datetime_diff(\n        cast(invoice_join.due_date as datetime),\n        cast(invoice_join.recent_payment_date as datetime),\n        day\n    )\n\n   < 0\n            then true\n            else false\n                end as is_overdue,\n        case when invoice_join.current_balance != 0 and \n\n    datetime_diff(\n        cast(invoice_join.due_date as datetime),\n        cast(invoice_join.recent_payment_date as datetime),\n        day\n    )\n\n   < 0\n            then \n\n    datetime_diff(\n        cast(invoice_join.due_date as datetime),\n        cast(invoice_join.recent_payment_date as datetime),\n        day\n    )\n\n   * -1\n            else 0\n                end as days_overdue,\n        invoice_join.initial_payment_date,\n        invoice_join.recent_payment_date\n    from invoice_join\n\n    \n    left join departments  \n        on invoice_join.department_id = departments.department_id\n        and invoice_join.source_relation = departments.source_relation\n    \n\n    \n    left join addresses as billing_address\n        on invoice_join.billing_address_id = billing_address.address_id\n        and invoice_join.source_relation = billing_address.source_relation\n    \n\n    left join customers\n        on invoice_join.customer_id = customers.customer_id\n        and invoice_join.source_relation = customers.source_relation\n\n    \n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__ap_ar_enhanced`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.333731Z", "completed_at": "2024-04-24T20:29:50.339579Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.339988Z", "completed_at": "2024-04-24T20:29:50.339991Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011085033416748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__ap_ar_enhanced_transaction_id__source_relation__estimate_id.804c1f0bcf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation, estimate_id\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__ap_ar_enhanced`\n    group by transaction_id, source_relation, estimate_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.337073Z", "completed_at": "2024-04-24T20:29:50.340844Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.341150Z", "completed_at": "2024-04-24T20:29:50.341153Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005171060562133789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__expenses_sales_enhanced", "compiled": true, "compiled_code": "with  __dbt__cte__int_quickbooks__purchase_transactions as (\n--To disable this model, set the using_purchase variable within your dbt_project.yml file to False.\n\n\nwith purchases as (\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__purchase`\n),\n\nitems as (\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item`\n),\n\npurchase_lines as (\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__purchase_line`\n),\n\nfinal as (\n    select\n        purchases.purchase_id as transaction_id,\n        purchases.source_relation,\n        purchase_lines.index as transaction_line_id,\n        purchases.doc_number,\n        'purchase' as transaction_type,\n        purchases.transaction_date,\n        coalesce(purchase_lines.account_expense_account_id, items.expense_account_id) as account_id,\n        purchase_lines.account_expense_class_id as class_id,\n        purchases.department_id,\n        coalesce(purchases.customer_id, account_expense_customer_id, item_expense_customer_id) as customer_id,\n        purchases.vendor_id,\n        coalesce(purchase_lines.account_expense_billable_status, purchase_lines.item_expense_billable_status) as billable_status,\n        purchase_lines.description,\n        case when coalesce(purchases.credit, false)\n            then -1 * purchase_lines.amount\n            else purchase_lines.amount\n        end as amount,\n        case when coalesce(purchases.credit, false) \n            then -1 * purchases.total_amount\n            else purchases.total_amount\n        end as total_amount\n    from purchases\n\n    inner join purchase_lines \n        on purchases.purchase_id = purchase_lines.purchase_id\n        and purchases.source_relation = purchase_lines.source_relation\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.item_id\n        and purchase_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__bill_transactions as (\n--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill` \n),\n\nbill_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__bill_line`\n),\n\nitems as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item`\n),\n\nfinal as (\n\n    select\n        bills.bill_id as transaction_id,\n        bills.source_relation,\n        bill_lines.index as transaction_line_id,\n        bills.doc_number,\n        'bill' as transaction_type,\n        bills.transaction_date,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id) as account_id,\n        bill_lines.account_expense_class_id as class_id,\n        bills.department_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        bills.vendor_id,\n        coalesce(bill_lines.account_expense_billable_status, bill_lines.item_expense_billable_status) as billable_status,\n        coalesce(bill_lines.description, items.name) as description,\n        bill_lines.amount,\n        bills.total_amount\n    from bills\n\n    inner join bill_lines \n        on bills.bill_id = bill_lines.bill_id\n        and bills.source_relation = bill_lines.source_relation\n\n    left join items\n        on bill_lines.item_expense_item_id = items.item_id\n        and bill_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__journal_entry_transactions as (\n--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith journal_entries as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__journal_entry`\n),\n\njournal_entry_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__journal_entry_line`\n),\n\nfinal as (\n\n    select\n        journal_entries.journal_entry_id as transaction_id,\n        journal_entries.source_relation,\n        journal_entry_lines.index as transaction_line_id,\n        journal_entries.doc_number,\n        'journal_entry' as transaction_type,\n        journal_entries.transaction_date,\n        journal_entry_lines.account_id,\n        journal_entry_lines.class_id,\n        journal_entry_lines.department_id,\n        journal_entry_lines.customer_id,\n        journal_entry_lines.vendor_id,\n        cast(billable_status as string) as billable_status,\n        journal_entry_lines.description,\n        case when lower(journal_entry_lines.posting_type) = 'credit'\n            then journal_entry_lines.amount * -1 \n            else journal_entry_lines.amount \n                end as amount,\n        journal_entries.total_amount\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries.journal_entry_id = journal_entry_lines.journal_entry_id\n        and journal_entries.source_relation = journal_entry_lines.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__deposit_transactions as (\n--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith deposits as (\n     \n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__deposit`\n), \n\ndeposit_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__deposit_line`\n),\n\nfinal as (\n    select\n        deposits.deposit_id as transaction_id,\n        deposits.source_relation,\n        deposit_lines.index as transaction_line_id,\n        cast(null as string) as doc_number,\n        'deposit' as transaction_type,\n        deposits.transaction_date,\n        deposit_lines.deposit_account_id as account_id,\n        deposit_lines.deposit_class_id as class_id,\n        deposits.department_id,\n        deposit_lines.deposit_customer_id as customer_id,\n        cast(null as string) as vendor_id,\n        cast(null as string) as billable_status,\n        deposit_lines.description,\n        deposit_lines.amount,\n        deposits.total_amount\n    from deposits\n    \n    inner join deposit_lines \n        on deposits.deposit_id = deposit_lines.deposit_id\n        and deposits.source_relation = deposit_lines.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__vendor_credit_transactions as (\n--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith vendor_credits as (\n    \n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor_credit`\n),\n\nvendor_credit_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor_credit_line`\n),\n\nitems as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item`\n),\n\nfinal as (\n\n    select\n        vendor_credits.vendor_credit_id as transaction_id,\n        vendor_credits.source_relation,\n        vendor_credit_lines.index as transaction_line_id,\n        vendor_credits.doc_number,\n        'vendor_credit' as transaction_type,\n        vendor_credits.transaction_date,\n        case when vendor_credit_lines.account_expense_account_id is null\n            then items.expense_account_id\n            else vendor_credit_lines.account_expense_account_id\n                end as account_id,\n        coalesce(vendor_credit_lines.account_expense_class_id, vendor_credit_lines.item_expense_class_id) as class_id,\n        vendor_credits.department_id,\n        coalesce(vendor_credit_lines.account_expense_customer_id, vendor_credit_lines.item_expense_customer_id) as customer_id,\n        vendor_credits.vendor_id,\n        coalesce(vendor_credit_lines.account_expense_billable_status, vendor_credit_lines.item_expense_billable_status) as billable_status,\n        vendor_credit_lines.description,\n        vendor_credit_lines.amount * -1 as amount,\n        vendor_credits.total_amount * -1 as total_amount\n    from vendor_credits\n\n    inner join vendor_credit_lines\n        on vendor_credits.vendor_credit_id = vendor_credit_lines.vendor_credit_id\n        and vendor_credits.source_relation = vendor_credit_lines.source_relation\n\n    left join items\n        on vendor_credit_lines.item_expense_item_id = items.item_id\n        and vendor_credit_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__account_classifications as (\nwith accounts as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__account`\n),\n\nclassification_fix as (\n\n    select \n        account_id,\n        source_relation,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n\n    select \n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.account_id = adjusted_balances.parent_account_id\n        and parent_accounts.source_relation = adjusted_balances.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__expenses_union as (\nwith expense_union as (\n\n    select *\n    from __dbt__cte__int_quickbooks__purchase_transactions\n\n    \n    union all\n\n    select *\n    from __dbt__cte__int_quickbooks__bill_transactions\n     \n\n    \n    union all\n\n    select *\n    from __dbt__cte__int_quickbooks__journal_entry_transactions\n     \n\n    \n    union all\n\n    select *\n    from __dbt__cte__int_quickbooks__deposit_transactions\n     \n\n    \n    union all\n\n    select *\n    from __dbt__cte__int_quickbooks__vendor_credit_transactions\n    \n),\n\ncustomers as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__customer`\n),\n\n\ndepartments as ( \n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__department`\n),\n\n\nvendors as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor`\n),\n\nexpense_accounts as (\n\n    select *\n    from __dbt__cte__int_quickbooks__account_classifications\n    where account_type = 'Expense'\n),\n\nfinal as (\n\n    select \n        'expense' as transaction_source,\n        expense_union.transaction_id,\n        expense_union.source_relation,\n        expense_union.transaction_line_id,\n        expense_union.doc_number,\n        expense_union.transaction_type,\n        expense_union.transaction_date,\n        cast(null as string) as item_id,\n        cast(null as numeric) as item_quantity,\n        cast(null as numeric) as item_unit_price,\n        expense_union.account_id,\n        expense_accounts.name as account_name,\n        expense_accounts.account_sub_type as account_sub_type,\n        expense_union.class_id,\n        expense_union.department_id,\n        \n        departments.fully_qualified_name as department_name,\n        \n        expense_union.customer_id,\n        customers.fully_qualified_name as customer_name,\n        customers.website as customer_website,\n        expense_union.vendor_id,\n        vendors.display_name as vendor_name,\n        expense_union.billable_status,\n        expense_union.description,\n        expense_union.amount,\n        expense_union.total_amount\n\n    from expense_union\n\n    inner join expense_accounts\n        on expense_union.account_id = expense_accounts.account_id\n        and expense_union.source_relation = expense_accounts.source_relation\n\n    left join customers\n        on customers.customer_id = expense_union.customer_id\n        and customers.source_relation = expense_union.source_relation\n\n    left join vendors\n        on vendors.vendor_id = expense_union.vendor_id\n        and vendors.source_relation = expense_union.source_relation\n\n    \n    left join departments\n        on departments.department_id = expense_union.department_id\n        and departments.source_relation = expense_union.source_relation\n    \n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__sales_receipt_transactions as (\n--To disable this model, set the using_sales_receipt variable within your dbt_project.yml file to False.\n\n\nwith sales_receipts as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__sales_receipt`\n),\n\nsales_receipt_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__sales_receipt_line`\n),\n\nitems as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item`\n),\n\nfinal as (\n\n    select\n        sales_receipts.sales_receipt_id as transaction_id,\n        sales_receipts.source_relation,\n        sales_receipt_lines.index as transaction_line_id,\n        sales_receipts.doc_number,\n        'sales_receipt' as transaction_type,\n        sales_receipts.transaction_date,\n        sales_receipt_lines.sales_item_item_id as item_id,\n        sales_receipt_lines.sales_item_quantity as item_quantity,\n        sales_receipt_lines.sales_item_unit_price as item_unit_price,\n        coalesce(items.income_account_id, items.asset_account_id, items.expense_account_id) as account_id,\n        sales_receipts.class_id,\n        sales_receipts.department_id,\n        sales_receipts.customer_id,\n        cast(null as string) as vendor_id,\n        cast(null as string) as billable_status,\n        sales_receipt_lines.description,\n        sales_receipt_lines.amount,\n        sales_receipts.total_amount\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts.sales_receipt_id = sales_receipt_lines.sales_receipt_id   \n        and sales_receipts.source_relation = sales_receipt_lines.source_relation\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.item_id\n        and sales_receipt_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__invoice_transactions as (\n--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice`\n),\n\ninvoice_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__invoice_line`\n),\n\nitems as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item`\n),\n\nfinal as (\n\n    select\n        invoices.invoice_id as transaction_id,\n        invoices.source_relation,\n        invoice_lines.index as transaction_line_id,\n        invoices.doc_number,\n        'invoice' as transaction_type,\n        invoices.transaction_date,\n        coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) as item_id,\n        coalesce(invoice_lines.quantity, invoice_lines.sales_item_quantity) as item_quantity,\n        invoice_lines.sales_item_unit_price as item_unit_price,\n        case when invoice_lines.account_id is null\n            then coalesce(items.income_account_id, items.expense_account_id, items.asset_account_id)\n            else invoice_lines.account_id\n                end as account_id,\n        coalesce(invoice_lines.discount_class_id, invoice_lines.sales_item_class_id) as class_id,\n        invoices.department_id,\n        invoices.customer_id,\n        cast(null as string) as vendor_id,\n        cast(null as string) as billable_status,\n        invoice_lines.description,\n        invoice_lines.amount,\n        invoices.total_amount\n    from invoices\n\n    inner join invoice_lines\n        on invoices.invoice_id = invoice_lines.invoice_id\n        and invoices.source_relation = invoice_lines.source_relation\n\n    left join items\n        on coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) = items.item_id\n        and invoice_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__refund_receipt_transactions as (\n--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith refund_receipts as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__refund_receipt`\n),\n\nrefund_receipt_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__refund_receipt_line`\n),\n\nitems as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item`\n),\n\nfinal as (\n\n    select\n        refund_receipts.refund_id as transaction_id,\n        refund_receipts.source_relation,\n        refund_receipt_lines.index as transaction_line_id,\n        refund_receipts.doc_number,\n        'refund_receipt' as transaction_type,\n        refund_receipts.transaction_date,\n        refund_receipt_lines.sales_item_item_id as item_id,\n        refund_receipt_lines.sales_item_quantity as item_quantity,\n        refund_receipt_lines.sales_item_unit_price as item_unit_price,\n        case when refund_receipt_lines.sales_item_account_id is null\n            then coalesce(items.asset_account_id, items.income_account_id, items.expense_account_id) \n            else refund_receipt_lines.sales_item_account_id\n                end as account_id,\n        refund_receipts.class_id,\n        refund_receipts.department_id,\n        refund_receipts.customer_id,\n        cast(null as string) as vendor_id,\n        cast(null as string) as billable_status,\n        refund_receipt_lines.description,\n        refund_receipt_lines.amount * -1 as amount,\n        refund_receipts.total_amount * -1 as total_amount\n    from refund_receipts\n\n    inner join refund_receipt_lines\n        on refund_receipts.refund_id = refund_receipt_lines.refund_id\n        and refund_receipts.source_relation = refund_receipt_lines.source_relation\n\n    left join items\n        on refund_receipt_lines.sales_item_item_id = items.item_id\n        and refund_receipt_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__credit_memo_transactions as (\n--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith credit_memos as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__credit_memo`\n),\n\ncredit_memo_lines as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__credit_memo_line`\n),\n\nitems as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__item`\n),\n\nfinal as (\n\n    select\n        credit_memos.credit_memo_id as transaction_id,\n        credit_memos.source_relation,\n        credit_memo_lines.index as transaction_line_id,\n        credit_memos.doc_number,\n        'credit_memo' as transaction_type,\n        credit_memos.transaction_date,\n        credit_memo_lines.sales_item_item_id as item_id,\n        credit_memo_lines.sales_item_quantity as item_quantity,\n        credit_memo_lines.sales_item_unit_price as item_unit_price,\n        case when credit_memo_lines.sales_item_account_id is null\n            then coalesce(items.income_account_id, items.asset_account_id, items.expense_account_id) \n            else credit_memo_lines.sales_item_account_id\n                end as account_id,\n        credit_memos.class_id,\n        credit_memos.department_id,\n        credit_memos.customer_id, \n        cast(null as string) as vendor_id,\n        cast(null as string) as billable_status,\n        credit_memo_lines.description,\n        credit_memo_lines.amount * -1 as amount,\n        credit_memos.total_amount * -1 as total_amount\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos.credit_memo_id = credit_memo_lines.credit_memo_id\n        and credit_memos.source_relation = credit_memo_lines.source_relation\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.item_id\n        and credit_memo_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__sales_union as (\n\n\nwith sales_union as (\n\n    \n    select *\n    from __dbt__cte__int_quickbooks__sales_receipt_transactions\n    \n\n    \n    union all\n\n    select *\n    from __dbt__cte__int_quickbooks__invoice_transactions\n\n    \n\n    \n    union all\n\n    select *\n    from __dbt__cte__int_quickbooks__refund_receipt_transactions\n    \n\n    \n    union all\n\n    select *\n    from __dbt__cte__int_quickbooks__credit_memo_transactions\n    \n),\n\ncustomers as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__customer`\n),\n\n\ndepartments as ( \n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__department`\n),\n\n\nvendors as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__vendor`\n),\n\nincome_accounts as (\n\n    select *\n    from __dbt__cte__int_quickbooks__account_classifications\n    where account_type = 'Income'\n),\n\nfinal as (\n\n    select \n        'sales' as transaction_source,\n        sales_union.transaction_id,\n        sales_union.source_relation,\n        sales_union.transaction_line_id,\n        sales_union.doc_number,\n        sales_union.transaction_type,\n        sales_union.transaction_date,\n        sales_union.item_id,\n        sales_union.item_quantity,\n        sales_union.item_unit_price,\n        sales_union.account_id,\n        income_accounts.name as account_name,\n        income_accounts.account_sub_type as account_sub_type,\n        sales_union.class_id,\n        sales_union.department_id,\n        \n        departments.fully_qualified_name as department_name,\n        \n        sales_union.customer_id,\n        customers.fully_qualified_name as customer_name,\n        customers.website as customer_website,\n        sales_union.vendor_id,\n        vendors.display_name as vendor_name,\n        sales_union.billable_status,\n        sales_union.description,\n        sales_union.amount,\n        sales_union.total_amount\n    from sales_union\n\n    inner join income_accounts\n        on sales_union.account_id = income_accounts.account_id\n        and sales_union.source_relation = income_accounts.source_relation\n\n    left join customers\n        on customers.customer_id = sales_union.customer_id\n        and customers.source_relation = sales_union.source_relation\n\n    left join vendors\n        on vendors.vendor_id = sales_union.vendor_id\n        and vendors.source_relation = sales_union.source_relation\n\n    \n    left join departments\n        on departments.department_id = sales_union.department_id\n        and departments.source_relation = sales_union.source_relation\n    \n)\n\nselect *\nfrom final\n), expenses as (\n\n    select *\n    from __dbt__cte__int_quickbooks__expenses_union\n),\n\n\nsales as (\n\n    select *\n    from __dbt__cte__int_quickbooks__sales_union\n),\n\n\nfinal as (\n    \n    select *\n    from expenses\n\n    \n    union all\n\n    select *\n    from sales\n    \n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__expenses_sales_enhanced`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.342238Z", "completed_at": "2024-04-24T20:29:50.345086Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:50.345406Z", "completed_at": "2024-04-24T20:29:50.345408Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0038328170776367188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__expenses_sales_enhanced_transaction_id__source_relation__transaction_line_id__item_id.b57775bacb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation, transaction_line_id, item_id\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__expenses_sales_enhanced`\n    group by transaction_id, source_relation, transaction_line_id, item_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:50.329983Z", "completed_at": "2024-04-24T20:29:54.331480Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:54.331894Z", "completed_at": "2024-04-24T20:29:54.331899Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 4.003366947174072, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__general_ledger", "compiled": true, "compiled_code": "with  __dbt__cte__int_quickbooks__account_classifications as (\nwith accounts as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_staging`.`stg_quickbooks__account`\n),\n\nclassification_fix as (\n\n    select \n        account_id,\n        source_relation,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n\n    select \n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.account_id = adjusted_balances.parent_account_id\n        and parent_accounts.source_relation = adjusted_balances.source_relation\n)\n\nselect *\nfrom final\n), unioned_models as (\n\n    \n\n        (\n            select\n                cast('`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__purchase_double_entry`' as string) as _dbt_source_relation,\n\n                \n                    cast(`transaction_id` as STRING) as `transaction_id` ,\n                    cast(`source_relation` as STRING) as `source_relation` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`customer_id` as STRING) as `customer_id` ,\n                    cast(`vendor_id` as STRING) as `vendor_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`account_id` as STRING) as `account_id` ,\n                    cast(`class_id` as STRING) as `class_id` ,\n                    cast(`department_id` as STRING) as `department_id` ,\n                    cast(`transaction_type` as STRING) as `transaction_type` ,\n                    cast(`transaction_source` as STRING) as `transaction_source` \n\n            from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__purchase_double_entry`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__bill_double_entry`' as string) as _dbt_source_relation,\n\n                \n                    cast(`transaction_id` as STRING) as `transaction_id` ,\n                    cast(`source_relation` as STRING) as `source_relation` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`customer_id` as STRING) as `customer_id` ,\n                    cast(`vendor_id` as STRING) as `vendor_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`account_id` as STRING) as `account_id` ,\n                    cast(`class_id` as STRING) as `class_id` ,\n                    cast(`department_id` as STRING) as `department_id` ,\n                    cast(`transaction_type` as STRING) as `transaction_type` ,\n                    cast(`transaction_source` as STRING) as `transaction_source` \n\n            from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__bill_double_entry`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__credit_memo_double_entry`' as string) as _dbt_source_relation,\n\n                \n                    cast(`transaction_id` as STRING) as `transaction_id` ,\n                    cast(`source_relation` as STRING) as `source_relation` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`customer_id` as STRING) as `customer_id` ,\n                    cast(`vendor_id` as STRING) as `vendor_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`account_id` as STRING) as `account_id` ,\n                    cast(`class_id` as STRING) as `class_id` ,\n                    cast(`department_id` as STRING) as `department_id` ,\n                    cast(`transaction_type` as STRING) as `transaction_type` ,\n                    cast(`transaction_source` as STRING) as `transaction_source` \n\n            from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__credit_memo_double_entry`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__deposit_double_entry`' as string) as _dbt_source_relation,\n\n                \n                    cast(`transaction_id` as STRING) as `transaction_id` ,\n                    cast(`source_relation` as STRING) as `source_relation` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`customer_id` as STRING) as `customer_id` ,\n                    cast(`vendor_id` as STRING) as `vendor_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`account_id` as STRING) as `account_id` ,\n                    cast(`class_id` as STRING) as `class_id` ,\n                    cast(`department_id` as STRING) as `department_id` ,\n                    cast(`transaction_type` as STRING) as `transaction_type` ,\n                    cast(`transaction_source` as STRING) as `transaction_source` \n\n            from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__deposit_double_entry`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__invoice_double_entry`' as string) as _dbt_source_relation,\n\n                \n                    cast(`transaction_id` as STRING) as `transaction_id` ,\n                    cast(`source_relation` as STRING) as `source_relation` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`customer_id` as STRING) as `customer_id` ,\n                    cast(`vendor_id` as STRING) as `vendor_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`account_id` as STRING) as `account_id` ,\n                    cast(`class_id` as STRING) as `class_id` ,\n                    cast(`department_id` as STRING) as `department_id` ,\n                    cast(`transaction_type` as STRING) as `transaction_type` ,\n                    cast(`transaction_source` as STRING) as `transaction_source` \n\n            from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__invoice_double_entry`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__journal_entry_double_entry`' as string) as _dbt_source_relation,\n\n                \n                    cast(`transaction_id` as STRING) as `transaction_id` ,\n                    cast(`source_relation` as STRING) as `source_relation` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`customer_id` as STRING) as `customer_id` ,\n                    cast(`vendor_id` as STRING) as `vendor_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`account_id` as STRING) as `account_id` ,\n                    cast(`class_id` as STRING) as `class_id` ,\n                    cast(`department_id` as STRING) as `department_id` ,\n                    cast(`transaction_type` as STRING) as `transaction_type` ,\n                    cast(`transaction_source` as STRING) as `transaction_source` \n\n            from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__journal_entry_double_entry`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__payment_double_entry`' as string) as _dbt_source_relation,\n\n                \n                    cast(`transaction_id` as STRING) as `transaction_id` ,\n                    cast(`source_relation` as STRING) as `source_relation` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`customer_id` as STRING) as `customer_id` ,\n                    cast(`vendor_id` as STRING) as `vendor_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`account_id` as STRING) as `account_id` ,\n                    cast(`class_id` as STRING) as `class_id` ,\n                    cast(`department_id` as STRING) as `department_id` ,\n                    cast(`transaction_type` as STRING) as `transaction_type` ,\n                    cast(`transaction_source` as STRING) as `transaction_source` \n\n            from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__payment_double_entry`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__refund_receipt_double_entry`' as string) as _dbt_source_relation,\n\n                \n                    cast(`transaction_id` as STRING) as `transaction_id` ,\n                    cast(`source_relation` as STRING) as `source_relation` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`customer_id` as STRING) as `customer_id` ,\n                    cast(`vendor_id` as STRING) as `vendor_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`account_id` as STRING) as `account_id` ,\n                    cast(`class_id` as STRING) as `class_id` ,\n                    cast(`department_id` as STRING) as `department_id` ,\n                    cast(`transaction_type` as STRING) as `transaction_type` ,\n                    cast(`transaction_source` as STRING) as `transaction_source` \n\n            from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__refund_receipt_double_entry`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__sales_receipt_double_entry`' as string) as _dbt_source_relation,\n\n                \n                    cast(`transaction_id` as STRING) as `transaction_id` ,\n                    cast(`source_relation` as STRING) as `source_relation` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`customer_id` as STRING) as `customer_id` ,\n                    cast(`vendor_id` as STRING) as `vendor_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`account_id` as STRING) as `account_id` ,\n                    cast(`class_id` as STRING) as `class_id` ,\n                    cast(`department_id` as STRING) as `department_id` ,\n                    cast(`transaction_type` as STRING) as `transaction_type` ,\n                    cast(`transaction_source` as STRING) as `transaction_source` \n\n            from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__sales_receipt_double_entry`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__transfer_double_entry`' as string) as _dbt_source_relation,\n\n                \n                    cast(`transaction_id` as STRING) as `transaction_id` ,\n                    cast(`source_relation` as STRING) as `source_relation` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`customer_id` as STRING) as `customer_id` ,\n                    cast(`vendor_id` as STRING) as `vendor_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`account_id` as STRING) as `account_id` ,\n                    cast(`class_id` as STRING) as `class_id` ,\n                    cast(`department_id` as STRING) as `department_id` ,\n                    cast(`transaction_type` as STRING) as `transaction_type` ,\n                    cast(`transaction_source` as STRING) as `transaction_source` \n\n            from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__transfer_double_entry`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__vendor_credit_double_entry`' as string) as _dbt_source_relation,\n\n                \n                    cast(`transaction_id` as STRING) as `transaction_id` ,\n                    cast(`source_relation` as STRING) as `source_relation` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`customer_id` as STRING) as `customer_id` ,\n                    cast(`vendor_id` as STRING) as `vendor_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`account_id` as STRING) as `account_id` ,\n                    cast(`class_id` as STRING) as `class_id` ,\n                    cast(`department_id` as STRING) as `department_id` ,\n                    cast(`transaction_type` as STRING) as `transaction_type` ,\n                    cast(`transaction_source` as STRING) as `transaction_source` \n\n            from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__vendor_credit_double_entry`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__bill_payment_double_entry`' as string) as _dbt_source_relation,\n\n                \n                    cast(`transaction_id` as STRING) as `transaction_id` ,\n                    cast(`source_relation` as STRING) as `source_relation` ,\n                    cast(`index` as INT64) as `index` ,\n                    cast(`transaction_date` as DATE) as `transaction_date` ,\n                    cast(`customer_id` as STRING) as `customer_id` ,\n                    cast(`vendor_id` as STRING) as `vendor_id` ,\n                    cast(`amount` as INT64) as `amount` ,\n                    cast(`account_id` as STRING) as `account_id` ,\n                    cast(`class_id` as STRING) as `class_id` ,\n                    cast(`department_id` as STRING) as `department_id` ,\n                    cast(`transaction_type` as STRING) as `transaction_type` ,\n                    cast(`transaction_source` as STRING) as `transaction_source` \n\n            from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks_intermediate`.`int_quickbooks__bill_payment_double_entry`\n\n            \n        )\n\n        \n),\n\ngl_union as (\n\n    select transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        account_id,\n        class_id,\n        department_id,\n        transaction_type,\n        transaction_source \n    from unioned_models\n),\n\naccounts as (\n\n    select *\n    from __dbt__cte__int_quickbooks__account_classifications\n),\n\n\nadjusted_gl as (\n    \n    select\n        to_hex(md5(cast(coalesce(cast(gl_union.transaction_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.source_relation as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.index as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.account_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast( gl_union.transaction_type as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.transaction_source as string), '_dbt_utils_surrogate_key_null_') as string))) \n            as unique_id,\n        gl_union.transaction_id,\n        gl_union.source_relation,\n        gl_union.index as transaction_index,\n        gl_union.transaction_date,\n        gl_union.customer_id,\n        gl_union.vendor_id,\n        gl_union.amount,\n        gl_union.account_id,\n        gl_union.class_id,\n        gl_union.department_id,\n        accounts.account_number,\n        accounts.name as account_name,\n        accounts.is_sub_account,\n        accounts.parent_account_number,\n        accounts.parent_account_name,\n        accounts.account_type,\n        accounts.account_sub_type,\n        accounts.financial_statement_helper,\n        accounts.balance as account_current_balance,\n        accounts.classification as account_class,\n        gl_union.transaction_type,\n        gl_union.transaction_source,\n        accounts.transaction_type as account_transaction_type,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then gl_union.amount\n            else gl_union.amount * -1\n                end as adjusted_amount\n    from gl_union\n\n    left join accounts\n        on gl_union.account_id = accounts.account_id\n        and gl_union.source_relation = accounts.source_relation\n),\n\nfinal as (\n\n    select\n        *,\n        sum(adjusted_amount) over (partition by account_id, class_id, source_relation\n            order by source_relation, transaction_date, account_id, class_id rows unbounded preceding) as running_balance\n    from adjusted_gl\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__general_ledger`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:54.341872Z", "completed_at": "2024-04-24T20:29:54.345842Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:54.346831Z", "completed_at": "2024-04-24T20:29:54.346836Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013684988021850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.not_null_quickbooks__general_ledger_unique_id.06732be667", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__general_ledger`\nwhere unique_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:29:54.343644Z", "completed_at": "2024-04-24T20:29:54.346092Z"}, {"name": "execute", "started_at": "2024-04-24T20:29:54.347028Z", "completed_at": "2024-04-24T20:29:54.347031Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013709068298339844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.unique_quickbooks__general_ledger_unique_id.df148e7545", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unique_id as unique_field\n  from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__general_ledger`\n  where unique_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:30:01.989721Z", "completed_at": "2024-04-24T20:30:01.994417Z"}, {"name": "execute", "started_at": "2024-04-24T20:30:01.994759Z", "completed_at": "2024-04-24T20:30:01.994763Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005816221237182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__general_ledger_by_period", "compiled": true, "compiled_code": "with  __dbt__cte__int_quickbooks__general_ledger_date_spine as (\n-- depends_on: `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__general_ledger`\n\nwith spine as (\n\n    \n    \n    \n    \n        \n            \n\n        \n\n    \n\n    \n    \n\n    \n\n     \n    \n        \n    \n        \n\n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 64\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( '2019-01-02' as datetime),\n        interval row_number() over (order by 1) - 1 month\n        )\n\n\n    ) as date_month\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_month <= \n\n        datetime_add(\n            cast( '2024-04-24' as datetime),\n        interval 1 month\n        )\n\n\n\n)\n\nselect * from filtered\n\n\n),\n\ngeneral_ledger as (\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__general_ledger`\n),\n\ndate_spine as (\n    select\n        cast(timestamp_trunc(\n        cast(date_month as timestamp),\n        year\n    ) as date) as date_year,\n        cast(timestamp_trunc(\n        cast(date_month as timestamp),\n        month\n    ) as date) as period_first_day,\n        cast(\n        \n\n        datetime_add(\n            cast( \n\n        datetime_add(\n            cast( timestamp_trunc(\n        cast(date_month as timestamp),\n        month\n    ) as datetime),\n        interval 1 month\n        )\n\n as datetime),\n        interval -1 day\n        )\n\n\n        as date) as period_last_day,\n        row_number() over (order by cast(timestamp_trunc(\n        cast(date_month as timestamp),\n        month\n    ) as date)) as period_index\n    from spine\n),\n\nfinal as (\n    select distinct\n        general_ledger.account_id,\n        general_ledger.source_relation,\n        general_ledger.account_number,\n        general_ledger.account_name,\n        general_ledger.is_sub_account,\n        general_ledger.parent_account_number,\n        general_ledger.parent_account_name,\n        general_ledger.account_type,\n        general_ledger.account_sub_type,\n        general_ledger.account_class,\n        general_ledger.financial_statement_helper,\n        general_ledger.class_id,\n        date_spine.date_year,\n        date_spine.period_first_day,\n        date_spine.period_last_day,\n        date_spine.period_index\n    from general_ledger\n\n    cross join date_spine\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__general_ledger_balances as (\nwith general_ledger as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__general_ledger`\n),\n\ngl_accounting_periods as (\n\n    select *\n    from __dbt__cte__int_quickbooks__general_ledger_date_spine\n),\n\ngl_period_balance as (\n\n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        class_id,\n        cast(timestamp_trunc(\n        cast(transaction_date as timestamp),\n        year\n    ) as date) as date_year,\n        cast(timestamp_trunc(\n        cast(transaction_date as timestamp),\n        month\n    ) as date) as date_month,\n        sum(adjusted_amount) as period_balance\n    from general_ledger\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14\n),\n\ngl_cumulative_balance as (\n\n    select\n        *,\n        case when financial_statement_helper = 'balance_sheet'\n            then sum(period_balance) over (partition by account_id, class_id, source_relation \n            order by source_relation, date_month, account_id, class_id rows unbounded preceding) \n            else 0\n                end as cumulative_balance\n    from gl_period_balance\n),\n\ngl_beginning_balance as (\n\n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        class_id,\n        date_year,\n        date_month, \n        period_balance as period_net_change,\n        case when financial_statement_helper = 'balance_sheet'\n            then (cumulative_balance - period_balance) \n            else 0\n                end as period_beginning_balance,\n        cumulative_balance as period_ending_balance  \n    from gl_cumulative_balance\n),\n\ngl_patch as (\n\n    select \n        coalesce(gl_beginning_balance.account_id, gl_accounting_periods.account_id) as account_id,\n        coalesce(gl_beginning_balance.source_relation, gl_accounting_periods.source_relation) as source_relation,\n        coalesce(gl_beginning_balance.account_number, gl_accounting_periods.account_number) as account_number,\n        coalesce(gl_beginning_balance.account_name, gl_accounting_periods.account_name) as account_name,\n        coalesce(gl_beginning_balance.is_sub_account, gl_accounting_periods.is_sub_account) as is_sub_account,\n        coalesce(gl_beginning_balance.parent_account_number, gl_accounting_periods.parent_account_number) as parent_account_number,\n        coalesce(gl_beginning_balance.parent_account_name, gl_accounting_periods.parent_account_name) as parent_account_name,\n        coalesce(gl_beginning_balance.account_type, gl_accounting_periods.account_type) as account_type,\n        coalesce(gl_beginning_balance.account_sub_type, gl_accounting_periods.account_sub_type) as account_sub_type,\n        coalesce(gl_beginning_balance.account_class, gl_accounting_periods.account_class) as account_class,\n        coalesce(gl_beginning_balance.class_id, gl_accounting_periods.class_id) as class_id,\n        coalesce(gl_beginning_balance.financial_statement_helper, gl_accounting_periods.financial_statement_helper) as financial_statement_helper,\n        coalesce(gl_beginning_balance.date_year, gl_accounting_periods.date_year) as date_year,\n        gl_accounting_periods.period_first_day,\n        gl_accounting_periods.period_last_day,\n        gl_accounting_periods.period_index,\n        gl_beginning_balance.period_net_change,\n        gl_beginning_balance.period_beginning_balance,\n        gl_beginning_balance.period_ending_balance,\n        case when gl_beginning_balance.period_beginning_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_beginning_balance\n                end as period_beginning_balance_starter,\n        case when gl_beginning_balance.period_ending_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_ending_balance\n                end as period_ending_balance_starter\n    from gl_accounting_periods\n\n    left join gl_beginning_balance\n        on gl_beginning_balance.account_id = gl_accounting_periods.account_id\n            and gl_beginning_balance.source_relation = gl_accounting_periods.source_relation\n            and gl_beginning_balance.date_month = gl_accounting_periods.period_first_day\n            and gl_beginning_balance.date_year = gl_accounting_periods.date_year\n            and coalesce(gl_beginning_balance.class_id, '0') = coalesce(gl_accounting_periods.class_id, '0')\n),\n\ngl_value_partition as (\n\n    select\n        *,\n        sum(case when period_ending_balance_starter is null \n            then 0 \n            else 1 \n                end) over (order by source_relation, account_id, class_id, period_last_day rows unbounded preceding) as gl_partition\n    from gl_patch\n),\n \nfinal as (\n    \n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        class_id,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        coalesce(period_net_change,0) as period_net_change,\n        coalesce(period_beginning_balance_starter,\n            first_value(period_ending_balance_starter) over (partition by gl_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_beginning_balance,\n        coalesce(period_ending_balance_starter,\n            first_value(period_ending_balance_starter) over (partition by gl_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_ending_balance\n    from gl_value_partition\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__retained_earnings as (\nwith general_ledger_balances as (\n\n    select *\n    from __dbt__cte__int_quickbooks__general_ledger_balances\n),\n\nrevenue_starter as (\n\n    select\n        period_first_day,\n        source_relation,\n        sum(period_net_change) as revenue_net_change\n    from general_ledger_balances\n    \n    where account_class = 'Revenue'\n\n    group by 1,2 \n),\n\nexpense_starter as (\n\n    select \n        period_first_day,\n        source_relation,\n        sum(period_net_change) as expense_net_change \n    from general_ledger_balances\n    \n    where account_class = 'Expense'\n\n    group by 1,2 \n),\n\nnet_income_loss as (\n\n    select *\n    from revenue_starter\n\n    join expense_starter \n        using (period_first_day, source_relation)\n),\n\nretained_earnings_starter as (\n\n    select\n        cast('9999' as string) as account_id,\n        source_relation,\n        cast('9999-00' as string) as account_number,\n        cast('Net Income Adjustment' as string) as account_name,\n        false as is_sub_account,\n        cast(null as string) as parent_account_number,\n        cast(null as string) as parent_account_name,\n        cast('Equity' as string) as account_type,\n        cast('RetainedEarnings' as string) as account_sub_type,\n        cast('Equity' as string) as account_class,\n        cast(null as string) as class_id,\n        cast('balance_sheet' as string) as financial_statement_helper,\n        cast(timestamp_trunc(\n        cast(period_first_day as timestamp),\n        year\n    ) as date) as date_year,\n        cast(period_first_day as date) as period_first_day,\n        cast(\n        \n\n        datetime_add(\n            cast( \n\n        datetime_add(\n            cast( timestamp_trunc(\n        cast(period_first_day as timestamp),\n        month\n    ) as datetime),\n        interval 1 month\n        )\n\n as datetime),\n        interval -1 day\n        )\n\n\n        as date) as period_last_day,\n        (revenue_net_change - expense_net_change) as period_net_change\n    from net_income_loss\n),\n\n\nretained_earnings_beginning as (\n\n    select\n        *,\n        sum(coalesce(period_net_change,0)) over (order by source_relation, period_first_day, period_first_day rows unbounded preceding) as period_ending_balance\n    from retained_earnings_starter\n),\n\nfinal as (\n    \n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        class_id,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        period_net_change,\n        lag(coalesce(period_ending_balance,0)) over (order by source_relation, period_first_day) as period_beginning_balance,\n        period_ending_balance\n    from retained_earnings_beginning\n)\n\nselect *\nfrom final\n), general_ledger_balances as (\n\n    select *\n    from __dbt__cte__int_quickbooks__general_ledger_balances\n),\n\nretained_earnings as (\n\n    select *\n    from __dbt__cte__int_quickbooks__retained_earnings\n),\n\n\n\nbalances_earnings_unioned as (\n\n    select *\n    from general_ledger_balances\n\n    union all \n\n    select *\n    from retained_earnings\n), \n\nfinal as (\n\n    select \n        balances_earnings_unioned.*,\n    \n        case \n            when account_class = 'Asset' then 1\n            when account_class = 'Liability' then 2\n            when account_class = 'Equity' then 3\n            when account_class = 'Revenue' then 1\n            when account_class = 'Expense' then 2\n        end as account_ordinal \n    \n    from balances_earnings_unioned\n    \n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__general_ledger_by_period`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:30:01.997751Z", "completed_at": "2024-04-24T20:30:02.003876Z"}, {"name": "execute", "started_at": "2024-04-24T20:30:02.005025Z", "completed_at": "2024-04-24T20:30:02.005029Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009785890579223633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.quickbooks.quickbooks__balance_sheet", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__general_ledger_by_period`\n    where period_first_day <= 'YYYY-MM-DD' --Update to be your desired ending date.\n),\n\nliability_date as (\n    select \n        account_id, \n        source_relation,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period\n\n    where account_class = 'Liability'\n\n    group by 1,2\n),\n\nasset_date as (\n    select \n        account_id, \n        source_relation,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period\n\n    where account_class = 'Asset'\n\n    group by 1,2\n),\n\nequity_date as (\n    select \n        account_id,\n        source_relation,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period \n\n    where account_class = 'Equity'\n\n    group by 1,2\n),\n\nliability as (\n    select \n        ld.account_id, \n        l.period_ending_balance\n    from liability_date ld\n\n    left join (select account_id, source_relation, period_first_day, period_ending_balance from general_ledger_by_period where account_class = 'Liability') l\n        on l.account_id = ld.account_id\n            and l.period_first_day = ld.period_first_day\n            and l.source_relation = ld.source_relation\n),\n\nasset as (\n    select ad.account_id, a.period_ending_balance\n    from asset_date ad\n        left join (select account_id, source_relation, period_first_day, period_ending_balance from general_ledger_by_period where account_class = 'Asset') a\n            on a.account_id = ad.account_id\n                and a.period_first_day = ad.period_first_day \n                and a.source_relation = ad.source_relation\n),\n\nequity as (\n    select ed.account_id, e.period_ending_balance\n    from equity_date ed\n        left join (select account_id, source_relation, period_first_day, period_ending_balance from general_ledger_by_period where account_class = 'Equity') e\n            on e.account_id = ed.account_id\n                and e.period_first_day = ed.period_first_day \n                and e.source_relation = ed.source_relation\n)\n\nselect \n    'liability' as balance_sheet_type, \n    sum(period_ending_balance) as balance \nfrom liability\ngroup by 1\n\nunion all\n\nselect \n    'asset' as balance_sheet_type, \n    sum(period_ending_balance) as balance \nfrom asset\ngroup by 1\n\nunion all \n\nselect \n    'equity' as balance_sheet_type, \n    sum(period_ending_balance) as balance \nfrom equity\ngroup by 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:30:02.000020Z", "completed_at": "2024-04-24T20:30:02.004056Z"}, {"name": "execute", "started_at": "2024-04-24T20:30:02.005405Z", "completed_at": "2024-04-24T20:30:02.005408Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0100250244140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.quickbooks.quickbooks__income_statement", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n    select * \n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__general_ledger_by_period`\n),\n\nrevenue as (\n    select \n        account_id, \n        sum(period_net_change) as ending_balance \n    from general_ledger_by_period\n\n    where account_class = 'Revenue'\n        and period_first_day between 'YYYY-MM-DD' and 'YYYY-MM-DD' --Update 'YYYY-MM-DD' to be your desired date period.\n\n    group by 1\n),\n\nexpense as (\n    select \n        account_id, \n        sum(period_net_change) as ending_balance \n    from general_ledger_by_period\n\n    where account_class = 'Expense'\n        and period_first_day between 'YYYY-MM-DD' and 'YYYY-MM-DD' --Update 'YYYY-MM-DD' to be your desired date period.\n\n    group by 1\n),\n\nrevenue_total as (\n    select \n        'revenue' as income_statement_type, \n        sum(ending_balance) \n    from revenue\n),\n\nexpense_total as (\n    select \n        'expene' as income_statement_type, \n        sum(ending_balance) \n    from expense\n)\n\nselect * \nfrom revenue_total\n\nunion all \n\nselect * \nfrom expense_total", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:30:02.001221Z", "completed_at": "2024-04-24T20:30:02.004440Z"}, {"name": "execute", "started_at": "2024-04-24T20:30:02.006113Z", "completed_at": "2024-04-24T20:30:02.006116Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010557889938354492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__balance_sheet", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__general_ledger_by_period`\n    where financial_statement_helper = 'balance_sheet'\n),  \n\nfinal as (\n    select\n        period_first_day as calendar_date,\n        source_relation,\n        account_class,\n        class_id,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        period_ending_balance as amount,\n        account_ordinal\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__balance_sheet`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:30:02.002469Z", "completed_at": "2024-04-24T20:30:02.004832Z"}, {"name": "execute", "started_at": "2024-04-24T20:30:02.006664Z", "completed_at": "2024-04-24T20:30:02.006667Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010695934295654297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__profit_and_loss", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n\n    select *\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__general_ledger_by_period`\n    where financial_statement_helper = 'income_statement'\n),  \n\nfinal as (\n    select\n        period_first_day as calendar_date,\n        source_relation,\n        account_class,\n        class_id,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        period_net_change as amount,\n        account_ordinal\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__profit_and_loss`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:30:02.009358Z", "completed_at": "2024-04-24T20:30:02.019135Z"}, {"name": "execute", "started_at": "2024-04-24T20:30:02.021346Z", "completed_at": "2024-04-24T20:30:02.021352Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014069080352783203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__general_ledger_by_period_account_id__class_id__source_relation__period_first_day.d928e63a45", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, class_id, source_relation, period_first_day\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__general_ledger_by_period`\n    group by account_id, class_id, source_relation, period_first_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:30:02.016106Z", "completed_at": "2024-04-24T20:30:02.021586Z"}, {"name": "execute", "started_at": "2024-04-24T20:30:02.022834Z", "completed_at": "2024-04-24T20:30:02.022838Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014658927917480469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__balance_sheet_account_id__source_relation__calendar_date__class_id.07368a5056", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation, calendar_date, class_id\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__balance_sheet`\n    group by account_id, source_relation, calendar_date, class_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:30:02.019333Z", "completed_at": "2024-04-24T20:30:02.022633Z"}, {"name": "execute", "started_at": "2024-04-24T20:30:02.024232Z", "completed_at": "2024-04-24T20:30:02.024235Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013245105743408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__profit_and_loss_account_id__class_id__source_relation__calendar_date.77ccb375e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, class_id, source_relation, calendar_date\n    from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__profit_and_loss`\n    group by account_id, class_id, source_relation, calendar_date\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:30:02.025395Z", "completed_at": "2024-04-24T20:30:02.029563Z"}, {"name": "execute", "started_at": "2024-04-24T20:30:02.029857Z", "completed_at": "2024-04-24T20:30:02.029860Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005672931671142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__cash_flow_statement", "compiled": true, "compiled_code": "with  __dbt__cte__int_quickbooks__cash_flow_classifications as (\nwith cash_flow_key as (\n \n   select calendar_date as cash_flow_period,\n       source_relation,\n       account_class,\n       class_id,\n       is_sub_account,\n       parent_account_number,\n       parent_account_name,\n       account_type,\n       account_sub_type,\n       account_number,\n       account_id,\n       account_name,\n       amount as cash_ending_period,\n       to_hex(md5(cast(coalesce(cast(account_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(calendar_date as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(class_id as string), '_dbt_utils_surrogate_key_null_') as string))) as account_unique_id\n   from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__balance_sheet`\n),\n \n\n \ncash_flow_types_and_ordinals as (\n\n   select cash_flow_key.*,\n   \n       case when account_type = 'Bank' then 'Cash or Cash Equivalents'\n           when account_type = 'Accounts Receivable' then 'Operating'\n           when account_type = 'Credit Card' then 'Operating'\n           when account_type = 'Other Current Asset' then 'Operating'\n           when account_type = 'Accounts Payable' then 'Operating'\n           when account_type = 'Other Current Liability' then 'Operating'\n           when account_name = 'Net Income Adjustment' then 'Operating'\n           when account_type = 'Fixed Asset' then 'Investing'\n           when account_type = 'Other Asset' then 'Investing'\n           when account_type = 'Long Term Liability' then 'Financing'\n           when account_class = 'Equity' then 'Financing'\n        end as cash_flow_type,\n        case when account_type = 'Bank' then 1\n           when account_type = 'Accounts Receivable' then 2\n           when account_type = 'Credit Card' then 2\n           when account_type = 'Other Current Asset' then 2\n           when account_type = 'Accounts Payable' then 2\n           when account_type = 'Other Current Liability' then 2\n           when account_name = 'Net Income Adjustment' then 2\n           when account_type = 'Fixed Asset' then 3\n           when account_type = 'Other Asset' then 3\n           when account_type = 'Long Term Liability' then 4\n           when account_class = 'Equity' then 4\n        end as cash_flow_ordinal\n    \n\n   from cash_flow_key\n \n   \n)\n\nselect *\nfrom cash_flow_types_and_ordinals\n), cash_flow_classifications as (\n \n   select *\n   from __dbt__cte__int_quickbooks__cash_flow_classifications\n), \n\nfinal as (\n    \n    select cash_flow_classifications.*,\n        coalesce(lag(cash_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period),0) as cash_beginning_period,\n        cash_ending_period - coalesce(lag(cash_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_net_period\n    from cash_flow_classifications\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__cash_flow_statement`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:30:02.031769Z", "completed_at": "2024-04-24T20:30:02.035277Z"}, {"name": "execute", "started_at": "2024-04-24T20:30:02.035816Z", "completed_at": "2024-04-24T20:30:02.035819Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005552768707275391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.not_null_quickbooks__cash_flow_statement_account_unique_id.748fb9ef0a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_unique_id\nfrom `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__cash_flow_statement`\nwhere account_unique_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-24T20:30:02.033513Z", "completed_at": "2024-04-24T20:30:02.035612Z"}, {"name": "execute", "started_at": "2024-04-24T20:30:02.036635Z", "completed_at": "2024-04-24T20:30:02.036638Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005825042724609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.unique_quickbooks__cash_flow_statement_account_unique_id.c6ce55cc0d", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select account_unique_id as unique_field\n  from `dbt-package-testing`.`hubspot_integration_tests_55_quickbooks`.`quickbooks__cash_flow_statement`\n  where account_unique_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 34.51092195510864, "args": {"vars": {}, "favor_state": false, "select": [], "introspect": true, "invocation_command": "dbt docs generate", "log_level_file": "debug", "strict_mode": false, "indirect_selection": "eager", "enable_legacy_logger": false, "log_format": "default", "print": true, "partial_parse": true, "cache_selected_only": false, "project_dir": "/Users/renee/Documents/dbt/quickbooks/develop", "write_json": true, "log_file_max_bytes": 10485760, "log_path": "/Users/renee/Documents/dbt/quickbooks/develop/logs", "profiles_dir": "/Users/renee/.dbt", "static": false, "send_anonymous_usage_stats": true, "version_check": true, "defer": false, "exclude": [], "static_parser": true, "show_resource_report": false, "printer_width": 80, "empty_catalog": false, "macro_debugging": false, "log_format_file": "debug", "warn_error_options": {"include": [], "exclude": []}, "partial_parse_file_diff": true, "populate_cache": true, "use_colors_file": true, "log_level": "info", "quiet": false, "use_colors": true, "which": "generate", "compile": true}}