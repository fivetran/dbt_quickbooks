{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.16", "generated_at": "2024-07-16T07:38:32.260128Z", "invocation_id": "8c66256d-600e-44ac-a345-cfe0bac5ee1f", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:15.264909Z", "completed_at": "2024-07-16T07:38:16.419916Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.420397Z", "completed_at": "2024-07-16T07:38:16.420402Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3535442352294922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__account_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:15.293592Z", "completed_at": "2024-07-16T07:38:16.403994Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.404970Z", "completed_at": "2024-07-16T07:38:16.404977Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3571550846099854, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:15.286525Z", "completed_at": "2024-07-16T07:38:16.393151Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.395284Z", "completed_at": "2024-07-16T07:38:16.395320Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.36570405960083, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__address_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.612908Z", "completed_at": "2024-07-16T07:38:16.623802Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.626265Z", "completed_at": "2024-07-16T07:38:16.626270Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02811288833618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.626730Z", "completed_at": "2024-07-16T07:38:16.642448Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.648423Z", "completed_at": "2024-07-16T07:38:16.648434Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0250852108001709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.633503Z", "completed_at": "2024-07-16T07:38:16.642705Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.648780Z", "completed_at": "2024-07-16T07:38:16.648785Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.025053024291992188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.642943Z", "completed_at": "2024-07-16T07:38:16.650419Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.652858Z", "completed_at": "2024-07-16T07:38:16.652864Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01226186752319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.654207Z", "completed_at": "2024-07-16T07:38:16.667560Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.668238Z", "completed_at": "2024-07-16T07:38:16.668254Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016837120056152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.657223Z", "completed_at": "2024-07-16T07:38:16.669538Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.671731Z", "completed_at": "2024-07-16T07:38:16.671739Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.023929834365844727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.663463Z", "completed_at": "2024-07-16T07:38:16.670381Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.675395Z", "completed_at": "2024-07-16T07:38:16.675406Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01709914207458496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.672064Z", "completed_at": "2024-07-16T07:38:16.683672Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.692860Z", "completed_at": "2024-07-16T07:38:16.692869Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.024510860443115234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__customer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.680303Z", "completed_at": "2024-07-16T07:38:16.695071Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.698880Z", "completed_at": "2024-07-16T07:38:16.698889Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.024303913116455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__department_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__department_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.685495Z", "completed_at": "2024-07-16T07:38:16.696455Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.700189Z", "completed_at": "2024-07-16T07:38:16.700197Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020864009857177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.702187Z", "completed_at": "2024-07-16T07:38:16.709996Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.715071Z", "completed_at": "2024-07-16T07:38:16.715080Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0265347957611084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.727918Z", "completed_at": "2024-07-16T07:38:16.733359Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.733848Z", "completed_at": "2024-07-16T07:38:16.733854Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009050846099853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:15.291266Z", "completed_at": "2024-07-16T07:38:16.624724Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.632383Z", "completed_at": "2024-07-16T07:38:16.632398Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5194921493530273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.715618Z", "completed_at": "2024-07-16T07:38:16.735440Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.778662Z", "completed_at": "2024-07-16T07:38:16.778667Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06950187683105469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.711542Z", "completed_at": "2024-07-16T07:38:16.736283Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.779147Z", "completed_at": "2024-07-16T07:38:16.779150Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.07201409339904785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.737038Z", "completed_at": "2024-07-16T07:38:16.781517Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.787084Z", "completed_at": "2024-07-16T07:38:16.787093Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05383610725402832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.783584Z", "completed_at": "2024-07-16T07:38:16.796413Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.799567Z", "completed_at": "2024-07-16T07:38:16.799585Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.024334192276000977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.789045Z", "completed_at": "2024-07-16T07:38:16.798457Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.805015Z", "completed_at": "2024-07-16T07:38:16.805020Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026109933853149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.792207Z", "completed_at": "2024-07-16T07:38:16.799217Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.807921Z", "completed_at": "2024-07-16T07:38:16.807991Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.024035215377807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__item_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.800383Z", "completed_at": "2024-07-16T07:38:16.811515Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.815584Z", "completed_at": "2024-07-16T07:38:16.815594Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02379608154296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.815902Z", "completed_at": "2024-07-16T07:38:16.831995Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.836909Z", "completed_at": "2024-07-16T07:38:16.836918Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02493906021118164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.822852Z", "completed_at": "2024-07-16T07:38:16.832934Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.838153Z", "completed_at": "2024-07-16T07:38:16.838158Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025384187698364258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.826078Z", "completed_at": "2024-07-16T07:38:16.833403Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.839496Z", "completed_at": "2024-07-16T07:38:16.839501Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02616715431213379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.833721Z", "completed_at": "2024-07-16T07:38:16.847110Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.854960Z", "completed_at": "2024-07-16T07:38:16.854967Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.029377222061157227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.843353Z", "completed_at": "2024-07-16T07:38:16.860332Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.863278Z", "completed_at": "2024-07-16T07:38:16.863284Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.024194002151489258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.851051Z", "completed_at": "2024-07-16T07:38:16.862933Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.865663Z", "completed_at": "2024-07-16T07:38:16.865668Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02850818634033203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.855388Z", "completed_at": "2024-07-16T07:38:16.863535Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.866441Z", "completed_at": "2024-07-16T07:38:16.866446Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02803516387939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.866740Z", "completed_at": "2024-07-16T07:38:16.884419Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.895078Z", "completed_at": "2024-07-16T07:38:16.895093Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03403520584106445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.879576Z", "completed_at": "2024-07-16T07:38:16.898776Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.901962Z", "completed_at": "2024-07-16T07:38:16.901971Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03170204162597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.885454Z", "completed_at": "2024-07-16T07:38:16.899325Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.904580Z", "completed_at": "2024-07-16T07:38:16.904584Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027245044708251953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__transfer_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__transfer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.891100Z", "completed_at": "2024-07-16T07:38:16.900470Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.904897Z", "completed_at": "2024-07-16T07:38:16.904909Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.023225069046020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.916719Z", "completed_at": "2024-07-16T07:38:16.917893Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.927021Z", "completed_at": "2024-07-16T07:38:16.927028Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01538395881652832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.908044Z", "completed_at": "2024-07-16T07:38:16.921642Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.927505Z", "completed_at": "2024-07-16T07:38:16.927509Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025480031967163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.922126Z", "completed_at": "2024-07-16T07:38:16.924186Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.927986Z", "completed_at": "2024-07-16T07:38:16.927990Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01546335220336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.account_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.918272Z", "completed_at": "2024-07-16T07:38:16.929989Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.933960Z", "completed_at": "2024-07-16T07:38:16.933981Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.028049230575561523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        \n    select \n        cast(null as TEXT) as _dbt_source_relation\n    limit 0", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.936204Z", "completed_at": "2024-07-16T07:38:16.937455Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.944099Z", "completed_at": "2024-07-16T07:38:16.944106Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01279902458190918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.937796Z", "completed_at": "2024-07-16T07:38:16.939863Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.944435Z", "completed_at": "2024-07-16T07:38:16.944443Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012763023376464844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.941264Z", "completed_at": "2024-07-16T07:38:16.942365Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.945060Z", "completed_at": "2024-07-16T07:38:16.945064Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015109062194824219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.946513Z", "completed_at": "2024-07-16T07:38:16.948683Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.952356Z", "completed_at": "2024-07-16T07:38:16.952361Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010426759719848633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.954357Z", "completed_at": "2024-07-16T07:38:16.955447Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.959945Z", "completed_at": "2024-07-16T07:38:16.959952Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009945869445800781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_payment_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.955786Z", "completed_at": "2024-07-16T07:38:16.956791Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.960233Z", "completed_at": "2024-07-16T07:38:16.960240Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010024070739746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bundle_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.957504Z", "completed_at": "2024-07-16T07:38:16.958374Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.960817Z", "completed_at": "2024-07-16T07:38:16.960822Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012301921844482422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bundle_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.962204Z", "completed_at": "2024-07-16T07:38:16.964270Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.967362Z", "completed_at": "2024-07-16T07:38:16.967368Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009470224380493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.credit_card_payment_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.969274Z", "completed_at": "2024-07-16T07:38:16.970430Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.974645Z", "completed_at": "2024-07-16T07:38:16.974651Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009122848510742188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.credit_memo_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.970752Z", "completed_at": "2024-07-16T07:38:16.971704Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.974897Z", "completed_at": "2024-07-16T07:38:16.974900Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009202957153320312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.credit_memo_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.972324Z", "completed_at": "2024-07-16T07:38:16.973313Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.975352Z", "completed_at": "2024-07-16T07:38:16.975355Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010635852813720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.976632Z", "completed_at": "2024-07-16T07:38:16.977736Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.980585Z", "completed_at": "2024-07-16T07:38:16.980591Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007834196090698242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.department_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.982341Z", "completed_at": "2024-07-16T07:38:16.984145Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.988561Z", "completed_at": "2024-07-16T07:38:16.988566Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00988006591796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.deposit_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.984438Z", "completed_at": "2024-07-16T07:38:16.985528Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.988794Z", "completed_at": "2024-07-16T07:38:16.988796Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00997304916381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.deposit_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.986159Z", "completed_at": "2024-07-16T07:38:16.987179Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.989234Z", "completed_at": "2024-07-16T07:38:16.989236Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01108407974243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.estimate_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.990421Z", "completed_at": "2024-07-16T07:38:16.991473Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:16.994282Z", "completed_at": "2024-07-16T07:38:16.994288Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0076580047607421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.estimate_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.996071Z", "completed_at": "2024-07-16T07:38:16.997146Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.002678Z", "completed_at": "2024-07-16T07:38:17.002684Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010368108749389648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.997418Z", "completed_at": "2024-07-16T07:38:16.998294Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.002926Z", "completed_at": "2024-07-16T07:38:17.002929Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010432004928588867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_line_bundle_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:16.998926Z", "completed_at": "2024-07-16T07:38:17.001118Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.003380Z", "completed_at": "2024-07-16T07:38:17.003383Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01154780387878418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.004559Z", "completed_at": "2024-07-16T07:38:17.005648Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.008205Z", "completed_at": "2024-07-16T07:38:17.008209Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00724482536315918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.009789Z", "completed_at": "2024-07-16T07:38:17.010924Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.014699Z", "completed_at": "2024-07-16T07:38:17.014702Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008218765258789062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.011200Z", "completed_at": "2024-07-16T07:38:17.012101Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.014916Z", "completed_at": "2024-07-16T07:38:17.014918Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008262157440185547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.journal_entry_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.012608Z", "completed_at": "2024-07-16T07:38:17.013483Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.015332Z", "completed_at": "2024-07-16T07:38:17.015335Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009268999099731445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.journal_entry_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.016395Z", "completed_at": "2024-07-16T07:38:17.017314Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.019473Z", "completed_at": "2024-07-16T07:38:17.019476Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006354093551635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.020942Z", "completed_at": "2024-07-16T07:38:17.022729Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.026290Z", "completed_at": "2024-07-16T07:38:17.026293Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008453130722045898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.payment_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.022967Z", "completed_at": "2024-07-16T07:38:17.023804Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.026512Z", "completed_at": "2024-07-16T07:38:17.026514Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00853109359741211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.024251Z", "completed_at": "2024-07-16T07:38:17.025093Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.026917Z", "completed_at": "2024-07-16T07:38:17.026919Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009544849395751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.027953Z", "completed_at": "2024-07-16T07:38:17.028858Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.031057Z", "completed_at": "2024-07-16T07:38:17.031060Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006347179412841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_order_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.032566Z", "completed_at": "2024-07-16T07:38:17.033527Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.038015Z", "completed_at": "2024-07-16T07:38:17.038020Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008707046508789062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_order_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.033784Z", "completed_at": "2024-07-16T07:38:17.035406Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.038251Z", "completed_at": "2024-07-16T07:38:17.038254Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008769989013671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_order_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.035897Z", "completed_at": "2024-07-16T07:38:17.036788Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.038678Z", "completed_at": "2024-07-16T07:38:17.038680Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00985407829284668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.refund_receipt_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.039779Z", "completed_at": "2024-07-16T07:38:17.040733Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.042989Z", "completed_at": "2024-07-16T07:38:17.042992Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0066301822662353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.refund_receipt_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.044565Z", "completed_at": "2024-07-16T07:38:17.045524Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.049277Z", "completed_at": "2024-07-16T07:38:17.049281Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007911920547485352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.sales_receipt_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.045774Z", "completed_at": "2024-07-16T07:38:17.046633Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.049492Z", "completed_at": "2024-07-16T07:38:17.049494Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007959604263305664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.sales_receipt_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.047131Z", "completed_at": "2024-07-16T07:38:17.048069Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.049874Z", "completed_at": "2024-07-16T07:38:17.049876Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009846925735473633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.transfer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.050884Z", "completed_at": "2024-07-16T07:38:17.052685Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.055251Z", "completed_at": "2024-07-16T07:38:17.055255Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007590055465698242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.vendor_credit_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.056829Z", "completed_at": "2024-07-16T07:38:17.057892Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.066461Z", "completed_at": "2024-07-16T07:38:17.066465Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01295614242553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.vendor_credit_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.058154Z", "completed_at": "2024-07-16T07:38:17.059054Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:17.066904Z", "completed_at": "2024-07-16T07:38:17.066907Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013184070587158203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.vendor_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.075159Z", "completed_at": "2024-07-16T07:38:18.081047Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:18.082465Z", "completed_at": "2024-07-16T07:38:18.082469Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1032698154449463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__address", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__address_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    city\n    \n , \n    cast(null as TEXT) as \n    \n    country\n    \n , \n    cast(null as TEXT) as \n    \n    country_sub_division_code\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    latitude\n    \n , \n    cast(null as TEXT) as \n    \n    line_1\n    \n , \n    cast(null as TEXT) as \n    \n    line_2\n    \n , \n    cast(null as TEXT) as \n    \n    line_3\n    \n , \n    cast(null as TEXT) as \n    \n    line_4\n    \n , \n    cast(null as TEXT) as \n    \n    line_5\n    \n , \n    cast(null as TEXT) as \n    \n    longitude\n    \n , \n    cast(null as TEXT) as \n    \n    postal_code\n    \n \n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as address_id,\n        city,\n        country,\n        line_1 as address_1,\n        line_2 as address_2,\n        postal_code,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.079053Z", "completed_at": "2024-07-16T07:38:18.064220Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:18.080319Z", "completed_at": "2024-07-16T07:38:18.080323Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1034917831420898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as TEXT) as \n    \n    bill_id\n    \n , \n    cast(null as TEXT) as \n    \n    bill_payment_credit_card_id\n    \n , \n    cast(null as TEXT) as \n    \n    bill_payment_id\n    \n , \n    cast(null as TEXT) as \n    \n    check_id\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_charge_id\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_credit_id\n    \n , \n    cast(null as TEXT) as \n    \n    deposit_id\n    \n , \n    cast(null as TEXT) as \n    \n    expense_id\n    \n , \n    cast(null as TEXT) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    journal_entry_id\n    \n , \n    cast(null as TEXT) as \n    \n    linked_bill_payment_id\n    \n , \n    cast(null as TEXT) as \n    \n    vendor_credit_id\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n  \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_payment_id as TEXT) as bill_payment_id,\n        index,\n        amount,\n        cast(bill_id as TEXT) as bill_id,\n        deposit_id,\n        expense_id,\n        journal_entry_id,\n        linked_bill_payment_id,\n        vendor_credit_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.068374Z", "completed_at": "2024-07-16T07:38:18.062993Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:18.079873Z", "completed_at": "2024-07-16T07:38:18.079883Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1121199131011963, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    bill_id\n    \n , \n    cast(null as TEXT) as \n    \n    bill_payment_id\n    \n , \n    cast(null as TEXT) as \n    \n    index\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as TEXT) as bill_id,\n        index,\n        cast(bill_payment_id as TEXT) as bill_payment_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:17.059515Z", "completed_at": "2024-07-16T07:38:18.081368Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:18.082709Z", "completed_at": "2024-07-16T07:38:18.082711Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1414289474487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__account", "compiled": true, "compiled_code": "with base as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account_tmp\"\n\n),\n\naccount as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    account_number\n    \n , \n    cast(null as TEXT) as \n    \n    account_sub_type\n    \n , \n    cast(null as TEXT) as \n    \n    account_type\n    \n , \n    cast(null as boolean) as \n    \n    active\n    \n , \n    cast(null as float) as \n    \n    balance\n    \n , \n    cast(null as float) as \n    \n    balance_with_sub_accounts\n    \n , \n    cast(null as TEXT) as \n    \n    classification\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    description\n    \n , \n    cast(null as TEXT) as \n    \n    fully_qualified_name\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as TEXT) as \n    \n    parent_account_id\n    \n , \n    cast(null as boolean) as \n    \n    sub_account\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as TEXT) as \n    \n    tax_code_id\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as account_id,\n        cast(account_number as TEXT) as account_number,\n        sub_account as is_sub_account,\n        cast(parent_account_id as TEXT) as parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        classification,\n        balance,\n        balance_with_sub_accounts,\n        active as is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n    from account\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:18.186559Z", "completed_at": "2024-07-16T07:38:19.250239Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:19.252040Z", "completed_at": "2024-07-16T07:38:19.252043Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1708240509033203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as float) as \n    \n    balance\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    department_id\n    \n , \n    cast(null as TEXT) as \n    \n    doc_number\n    \n , \n    cast(null as date) as \n    \n    due_date\n    \n , \n    cast(null as float) as \n    \n    exchange_rate\n    \n , \n    cast(null as TEXT) as \n    \n    global_tax_calculation\n    \n , \n    cast(null as float) as \n    \n    home_balance\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    payable_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    private_note\n    \n , \n    cast(null as TEXT) as \n    \n    sales_term_id\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as float) as \n    \n    total_amount\n    \n , \n    cast(null as date) as \n    \n    transaction_date\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    vendor_id\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n \nfinal as (\n    \n    select \n        cast(id as TEXT) as bill_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        cast( date_trunc('day', due_date) as date) as due_date_at, \n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        exchange_rate,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        total_amount,\n        cast(vendor_id as TEXT) as vendor_id,\n        private_note,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:18.191651Z", "completed_at": "2024-07-16T07:38:19.250589Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:19.252471Z", "completed_at": "2024-07-16T07:38:19.252473Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1835689544677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle_item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    bundle_id\n    \n , \n    cast(null as TEXT) as \n    \n    item_id\n    \n , \n    cast(null as float) as \n    \n    item_quantity\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n  \n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bundle_id as TEXT) as bundle_id,\n        cast(item_id as TEXT) as item_id,\n        item_quantity,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:18.199330Z", "completed_at": "2024-07-16T07:38:19.251370Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:19.253130Z", "completed_at": "2024-07-16T07:38:19.253134Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1657471656799316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    active\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    description\n    \n , \n    cast(null as TEXT) as \n    \n    fully_qualified_name\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as boolean) as \n    \n    print_grouped_items\n    \n , \n    cast(null as float) as \n    \n    purchase_cost\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as boolean) as \n    \n    taxable\n    \n , \n    cast(null as float) as \n    \n    unit_price\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as bundle_id,\n        created_at,\n        active as is_active,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n\n    from fields\n)\n\nselect * from final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:18.181311Z", "completed_at": "2024-07-16T07:38:19.249957Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:19.251806Z", "completed_at": "2024-07-16T07:38:19.251814Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1852779388427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    check_bank_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    check_print_status\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    department_id\n    \n , \n    cast(null as TEXT) as \n    \n    doc_number\n    \n , \n    cast(null as float) as \n    \n    exchange_rate\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    pay_type\n    \n , \n    cast(null as TEXT) as \n    \n    payable_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    private_note\n    \n , \n    cast(null as boolean) as \n    \n    process_bill_payment\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as float) as \n    \n    total_amount\n    \n , \n    cast(null as date) as \n    \n    transaction_date\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    vendor_id\n    \n \n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as bill_payment_id,\n        cast(check_bank_account_id as TEXT) as check_bank_account_id,\n        check_print_status,\n        cast(credit_card_account_id as TEXT) as credit_card_account_id,\n        exchange_rate,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        pay_type,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(vendor_id as TEXT) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:19.357121Z", "completed_at": "2024-07-16T07:38:20.395238Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:20.397216Z", "completed_at": "2024-07-16T07:38:20.397220Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1569600105285645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as TEXT) as \n    \n    bundle_id\n    \n , \n    cast(null as float) as \n    \n    bundle_quantity\n    \n , \n    cast(null as TEXT) as \n    \n    credit_memo_id\n    \n , \n    cast(null as TEXT) as \n    \n    description\n    \n , \n    cast(null as timestamp) as \n    \n    description_service_date\n    \n , \n    cast(null as TEXT) as \n    \n    description_tax_code_id\n    \n , \n    cast(null as TEXT) as \n    \n    discount_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    discount_class_id\n    \n , \n    cast(null as float) as \n    \n    discount_discount_percent\n    \n , \n    cast(null as boolean) as \n    \n    discount_percent_based\n    \n , \n    cast(null as TEXT) as \n    \n    discount_tax_code_id\n    \n , \n    cast(null as TEXT) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_class_id\n    \n , \n    cast(null as float) as \n    \n    sales_item_discount_amount\n    \n , \n    cast(null as float) as \n    \n    sales_item_discount_rate\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_item_id\n    \n , \n    cast(null as float) as \n    \n    sales_item_quantity\n    \n , \n    cast(null as timestamp) as \n    \n    sales_item_service_date\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_tax_code_id\n    \n , \n    cast(null as float) as \n    \n    sales_item_unit_price\n    \n , \n    cast(null as TEXT) as \n    \n    sub_total_item_id\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(credit_memo_id as TEXT) as credit_memo_id,\n        index,\n        amount,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:19.372156Z", "completed_at": "2024-07-16T07:38:20.395826Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:20.397679Z", "completed_at": "2024-07-16T07:38:20.397682Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1507501602172852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    apply_tax_after_discount\n    \n , \n    cast(null as float) as \n    \n    balance\n    \n , \n    cast(null as TEXT) as \n    \n    bill_email\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_id\n    \n , \n    cast(null as TEXT) as \n    \n    class_id\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    custom_p_o_number\n    \n , \n    cast(null as TEXT) as \n    \n    customer_id\n    \n , \n    cast(null as TEXT) as \n    \n    customer_memo\n    \n , \n    cast(null as TEXT) as \n    \n    department_id\n    \n , \n    cast(null as TEXT) as \n    \n    doc_number\n    \n , \n    cast(null as TEXT) as \n    \n    email_status\n    \n , \n    cast(null as float) as \n    \n    exchange_rate\n    \n , \n    cast(null as TEXT) as \n    \n    global_tax_calculation\n    \n , \n    cast(null as float) as \n    \n    home_balance\n    \n , \n    cast(null as float) as \n    \n    home_total_amount\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    payment_method_id\n    \n , \n    cast(null as TEXT) as \n    \n    print_status\n    \n , \n    cast(null as TEXT) as \n    \n    private_note\n    \n , \n    cast(null as float) as \n    \n    remaining_credit\n    \n , \n    cast(null as TEXT) as \n    \n    sales_term_id\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_id\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as float) as \n    \n    total_amount\n    \n , \n    cast(null as TEXT) as \n    \n    total_tax\n    \n , \n    cast(null as date) as \n    \n    transaction_date\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as credit_memo_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        cast(class_id as TEXT) as class_id,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:19.367777Z", "completed_at": "2024-07-16T07:38:20.394679Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:20.396960Z", "completed_at": "2024-07-16T07:38:20.396978Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1519091129302979, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__customer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    active\n    \n , \n    cast(null as TEXT) as \n    \n    alternate_phone_number\n    \n , \n    cast(null as TEXT) as \n    \n    ar_account_id\n    \n , \n    cast(null as float) as \n    \n    balance\n    \n , \n    cast(null as float) as \n    \n    balance_with_jobs\n    \n , \n    cast(null as TEXT) as \n    \n    bill_address_id\n    \n , \n    cast(null as boolean) as \n    \n    bill_with_parent\n    \n , \n    cast(null as TEXT) as \n    \n    company_name\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    default_tax_code_id\n    \n , \n    cast(null as TEXT) as \n    \n    display_name\n    \n , \n    cast(null as TEXT) as \n    \n    email\n    \n , \n    cast(null as TEXT) as \n    \n    family_name\n    \n , \n    cast(null as TEXT) as \n    \n    fax_number\n    \n , \n    cast(null as TEXT) as \n    \n    fully_qualified_name\n    \n , \n    cast(null as TEXT) as \n    \n    given_name\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as boolean) as \n    \n    job\n    \n , \n    cast(null as TEXT) as \n    \n    level\n    \n , \n    cast(null as TEXT) as \n    \n    middle_name\n    \n , \n    cast(null as TEXT) as \n    \n    mobile_number\n    \n , \n    cast(null as TEXT) as \n    \n    notes\n    \n , \n    cast(null as date) as \n    \n    open_balance_date\n    \n , \n    cast(null as TEXT) as \n    \n    parent_customer_id\n    \n , \n    cast(null as TEXT) as \n    \n    payment_method_id\n    \n , \n    cast(null as TEXT) as \n    \n    phone_number\n    \n , \n    cast(null as TEXT) as \n    \n    preferred_delivery_method\n    \n , \n    cast(null as TEXT) as \n    \n    print_on_check_name\n    \n , \n    cast(null as TEXT) as \n    \n    resale_number\n    \n , \n    cast(null as TEXT) as \n    \n    sales_term_id\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_id\n    \n , \n    cast(null as TEXT) as \n    \n    suffix\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as TEXT) as \n    \n    tax_exemption_reason_id\n    \n , \n    cast(null as boolean) as \n    \n    taxable\n    \n , \n    cast(null as TEXT) as \n    \n    title\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    website\n    \n \n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as customer_id,\n        active as is_active,\n        balance,\n        balance_with_jobs,\n        bill_with_parent,\n        company_name,\n        fully_qualified_name,\n        currency_id,\n        display_name,\n        website,\n        taxable,\n        source_relation\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:19.376624Z", "completed_at": "2024-07-16T07:38:20.395534Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:20.397452Z", "completed_at": "2024-07-16T07:38:20.397455Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1524627208709717, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__department", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__department_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    active\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    fully_qualified_name\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as TEXT) as \n    \n    parent_department_id\n    \n , \n    cast(null as boolean) as \n    \n    sub_department\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as department_id,\n        active as is_active,\n        created_at,\n        updated_at,\n        fully_qualified_name,\n        name,\n        sub_department as is_sub_department,\n        parent_department_id,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__department\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:20.537495Z", "completed_at": "2024-07-16T07:38:21.545653Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:21.547350Z", "completed_at": "2024-07-16T07:38:21.547360Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1169190406799316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    account_expense_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    account_expense_billable_status\n    \n , \n    cast(null as TEXT) as \n    \n    account_expense_class_id\n    \n , \n    cast(null as TEXT) as \n    \n    account_expense_customer_id\n    \n , \n    cast(null as float) as \n    \n    account_expense_tax_amount\n    \n , \n    cast(null as TEXT) as \n    \n    account_expense_tax_code_id\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as TEXT) as \n    \n    bill_id\n    \n , \n    cast(null as TEXT) as \n    \n    description\n    \n , \n    cast(null as TEXT) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    item_expense_billable_status\n    \n , \n    cast(null as TEXT) as \n    \n    item_expense_class_id\n    \n , \n    cast(null as TEXT) as \n    \n    item_expense_customer_id\n    \n , \n    cast(null as TEXT) as \n    \n    item_expense_item_id\n    \n , \n    cast(null as float) as \n    \n    item_expense_quantity\n    \n , \n    cast(null as TEXT) as \n    \n    item_expense_tax_code_id\n    \n , \n    cast(null as float) as \n    \n    item_expense_unit_price\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as TEXT) as bill_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        item_expense_billable_status,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:20.532913Z", "completed_at": "2024-07-16T07:38:21.545964Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:21.548020Z", "completed_at": "2024-07-16T07:38:21.548024Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1242527961730957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    account_id\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as TEXT) as \n    \n    class_id\n    \n , \n    cast(null as TEXT) as \n    \n    description\n    \n , \n    cast(null as float) as \n    \n    discount_amount\n    \n , \n    cast(null as float) as \n    \n    discount_rate\n    \n , \n    cast(null as TEXT) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    invoice_id\n    \n , \n    cast(null as TEXT) as \n    \n    invoice_line_index\n    \n , \n    cast(null as TEXT) as \n    \n    item_id\n    \n , \n    cast(null as TEXT) as \n    \n    line_num\n    \n , \n    cast(null as float) as \n    \n    quantity\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_item_id\n    \n , \n    cast(null as float) as \n    \n    sales_item_quantity\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_tax_code_id\n    \n , \n    cast(null as timestamp) as \n    \n    service_date\n    \n , \n    cast(null as TEXT) as \n    \n    tax_code_id\n    \n , \n    cast(null as float) as \n    \n    unit_price\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        index,\n        cast(class_id as TEXT) as class_id,\n        description,\n        amount,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        cast(item_id as TEXT) as item_id,\n        quantity,\n        sales_item_quantity,\n        cast(account_id as TEXT) as account_id,\n        unit_price,\n        invoice_line_index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:20.528736Z", "completed_at": "2024-07-16T07:38:21.546842Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:21.548710Z", "completed_at": "2024-07-16T07:38:21.548713Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1312499046325684, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    account_id\n    \n , \n    cast(null as TEXT) as \n    \n    cash_back_account_id\n    \n , \n    cast(null as float) as \n    \n    cash_back_amount\n    \n , \n    cast(null as TEXT) as \n    \n    cash_back_memo\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    department_id\n    \n , \n    cast(null as TEXT) as \n    \n    global_tax_calculation\n    \n , \n    cast(null as float) as \n    \n    home_total_amount\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    private_note\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as float) as \n    \n    total_amount\n    \n , \n    cast(null as date) as \n    \n    transaction_date\n    \n , \n    cast(null as TEXT) as \n    \n    transaction_source\n    \n , \n    cast(null as TEXT) as \n    \n    transaction_status\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as deposit_id,\n        cast(account_id as TEXT) as account_id,\n        created_at,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        total_amount,\n        home_total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:20.521471Z", "completed_at": "2024-07-16T07:38:21.546565Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:21.548475Z", "completed_at": "2024-07-16T07:38:21.548479Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1492247581481934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as TEXT) as \n    \n    bill_id\n    \n , \n    cast(null as TEXT) as \n    \n    deposit_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    deposit_check_number\n    \n , \n    cast(null as TEXT) as \n    \n    deposit_class_id\n    \n , \n    cast(null as TEXT) as \n    \n    deposit_customer_id\n    \n , \n    cast(null as TEXT) as \n    \n    deposit_id\n    \n , \n    cast(null as TEXT) as \n    \n    deposit_payment_method_id\n    \n , \n    cast(null as TEXT) as \n    \n    deposit_tax_applicable_on\n    \n , \n    cast(null as TEXT) as \n    \n    deposit_tax_code_id\n    \n , \n    cast(null as TEXT) as \n    \n    deposit_transaction_type\n    \n , \n    cast(null as TEXT) as \n    \n    description\n    \n , \n    cast(null as TEXT) as \n    \n    detail_type\n    \n , \n    cast(null as TEXT) as \n    \n    expense_id\n    \n , \n    cast(null as TEXT) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    invoice_id\n    \n , \n    cast(null as TEXT) as \n    \n    journal_entry_id\n    \n , \n    cast(null as TEXT) as \n    \n    payment_id\n    \n , \n    cast(null as TEXT) as \n    \n    purchase_id\n    \n , \n    cast(null as TEXT) as \n    \n    refund_receipt_id\n    \n , \n    cast(null as TEXT) as \n    \n    sales_receipt_id\n    \n , \n    cast(null as TEXT) as \n    \n    transfer_id\n    \n , \n    cast(null as TEXT) as \n    \n    vendor_credit_id\n    \n \n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(deposit_id as TEXT) as deposit_id,\n        index,\n        amount,\n        description,\n        cast(deposit_account_id as TEXT) as deposit_account_id,\n        cast(deposit_class_id as TEXT) as deposit_class_id,\n        cast(deposit_customer_id as TEXT) as deposit_customer_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:21.658932Z", "completed_at": "2024-07-16T07:38:22.629483Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:22.631818Z", "completed_at": "2024-07-16T07:38:22.631821Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0764949321746826, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line_tmp\"\n\n),\n\nfields as ( \n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    account_id\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as TEXT) as \n    \n    bundle_id\n    \n , \n    cast(null as float) as \n    \n    bundle_quantity\n    \n , \n    cast(null as TEXT) as \n    \n    description\n    \n , \n    cast(null as timestamp) as \n    \n    description_service_date\n    \n , \n    cast(null as TEXT) as \n    \n    description_tax_code_id\n    \n , \n    cast(null as TEXT) as \n    \n    discount_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    discount_class_id\n    \n , \n    cast(null as float) as \n    \n    discount_discount_percent\n    \n , \n    cast(null as boolean) as \n    \n    discount_percent_based\n    \n , \n    cast(null as TEXT) as \n    \n    discount_tax_code_id\n    \n , \n    cast(null as TEXT) as \n    \n    detail_type\n    \n , \n    cast(null as TEXT) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    invoice_id\n    \n , \n    cast(null as TEXT) as \n    \n    item_id\n    \n , \n    cast(null as float) as \n    \n    quantity\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_class_id\n    \n , \n    cast(null as float) as \n    \n    sales_item_discount_amount\n    \n , \n    cast(null as float) as \n    \n    sales_item_discount_rate\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_item_id\n    \n , \n    cast(null as float) as \n    \n    sales_item_quantity\n    \n , \n    cast(null as timestamp) as \n    \n    sales_item_service_date\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_tax_code_id\n    \n , \n    cast(null as float) as \n    \n    sales_item_unit_price\n    \n , \n    cast(null as TEXT) as \n    \n    sub_total_item_id\n    \n , \n    cast(null as TEXT) as \n    \n    tax_code_id\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        index,\n        amount,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        detail_type,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        description,\n        quantity,\n        bundle_quantity,\n        cast(bundle_id as TEXT) as bundle_id,\n        cast(account_id as TEXT) as account_id,\n        cast(item_id as TEXT) as item_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:21.645483Z", "completed_at": "2024-07-16T07:38:22.630460Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:22.632574Z", "completed_at": "2024-07-16T07:38:22.632584Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0957691669464111, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate_tmp\"\n\n),\n \nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    accepted_by\n    \n , \n    cast(null as timestamp) as \n    \n    accepted_date\n    \n , \n    cast(null as boolean) as \n    \n    apply_tax_after_discount\n    \n , \n    cast(null as TEXT) as \n    \n    bill_email\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_id\n    \n , \n    cast(null as TEXT) as \n    \n    class_id\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    customer_id\n    \n , \n    cast(null as TEXT) as \n    \n    customer_memo\n    \n , \n    cast(null as TEXT) as \n    \n    delivery_type\n    \n , \n    cast(null as TEXT) as \n    \n    department_id\n    \n , \n    cast(null as TEXT) as \n    \n    doc_number\n    \n , \n    cast(null as date) as \n    \n    due_date\n    \n , \n    cast(null as TEXT) as \n    \n    email_status\n    \n , \n    cast(null as float) as \n    \n    exchange_rate\n    \n , \n    cast(null as timestamp) as \n    \n    expiration_date\n    \n , \n    cast(null as TEXT) as \n    \n    global_tax_calculation\n    \n , \n    cast(null as float) as \n    \n    home_total_amount\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    print_status\n    \n , \n    cast(null as TEXT) as \n    \n    private_note\n    \n , \n    cast(null as TEXT) as \n    \n    sales_term_id\n    \n , \n    cast(null as timestamp) as \n    \n    ship_date\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_id\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as TEXT) as \n    \n    tax_code_id\n    \n , \n    cast(null as float) as \n    \n    total_amount\n    \n , \n    cast(null as float) as \n    \n    total_tax\n    \n , \n    cast(null as date) as \n    \n    transaction_date\n    \n , \n    cast(null as TEXT) as \n    \n    transaction_status\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as estimate_id,\n        cast(class_id as TEXT) as class_id,\n        created_at,\n        currency_id,\n        customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        exchange_rate,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:21.652311Z", "completed_at": "2024-07-16T07:38:22.629955Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:22.632050Z", "completed_at": "2024-07-16T07:38:22.632055Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0894460678100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    account_id\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as TEXT) as \n    \n    bundle_id\n    \n , \n    cast(null as float) as \n    \n    bundle_quantity\n    \n , \n    cast(null as TEXT) as \n    \n    description\n    \n , \n    cast(null as timestamp) as \n    \n    description_service_date\n    \n , \n    cast(null as TEXT) as \n    \n    description_tax_code_id\n    \n , \n    cast(null as TEXT) as \n    \n    discount_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    discount_class_id\n    \n , \n    cast(null as float) as \n    \n    discount_discount_percent\n    \n , \n    cast(null as boolean) as \n    \n    discount_percent_based\n    \n , \n    cast(null as TEXT) as \n    \n    discount_tax_code_id\n    \n , \n    cast(null as TEXT) as \n    \n    estimate_id\n    \n , \n    cast(null as TEXT) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    item_id\n    \n , \n    cast(null as float) as \n    \n    quantity\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_class_id\n    \n , \n    cast(null as float) as \n    \n    sales_item_discount_amount\n    \n , \n    cast(null as float) as \n    \n    sales_item_discount_rate\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_item_id\n    \n , \n    cast(null as float) as \n    \n    sales_item_quantity\n    \n , \n    cast(null as timestamp) as \n    \n    sales_item_service_date\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_tax_code_id\n    \n , \n    cast(null as float) as \n    \n    sales_item_unit_price\n    \n , \n    cast(null as TEXT) as \n    \n    sub_total_item_id\n    \n , \n    cast(null as TEXT) as \n    \n    tax_code_id\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(estimate_id as TEXT) as estimate_id,\n        index,\n        description,\n        discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        sales_item_item_id,\n        sales_item_quantity,\n        item_id,\n        quantity,\n        account_id,\n        amount,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:21.665742Z", "completed_at": "2024-07-16T07:38:22.629157Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:22.631345Z", "completed_at": "2024-07-16T07:38:22.631355Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0836482048034668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    charge_credit_id\n    \n , \n    cast(null as TEXT) as \n    \n    estimate_id\n    \n , \n    cast(null as TEXT) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    invoice_id\n    \n , \n    cast(null as TEXT) as \n    \n    payment_id\n    \n , \n    cast(null as TEXT) as \n    \n    reimburse_charge_id\n    \n , \n    cast(null as TEXT) as \n    \n    statement_charge_id\n    \n , \n    cast(null as TEXT) as \n    \n    time_activity_id\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        cast(payment_id as TEXT) as payment_id,\n        cast(estimate_id as TEXT) as estimate_id,\n        index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:22.741677Z", "completed_at": "2024-07-16T07:38:23.704255Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:23.704788Z", "completed_at": "2024-07-16T07:38:23.704795Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1099560260772705, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    allow_ipnpayment\n    \n , \n    cast(null as boolean) as \n    \n    allow_online_achpayment\n    \n , \n    cast(null as boolean) as \n    \n    allow_online_credit_card_payment\n    \n , \n    cast(null as boolean) as \n    \n    allow_online_payment\n    \n , \n    cast(null as boolean) as \n    \n    apply_tax_after_discount\n    \n , \n    cast(null as float) as \n    \n    balance\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_id\n    \n , \n    cast(null as TEXT) as \n    \n    billing_bcc_email\n    \n , \n    cast(null as TEXT) as \n    \n    billing_cc_email\n    \n , \n    cast(null as TEXT) as \n    \n    billing_email\n    \n , \n    cast(null as TEXT) as \n    \n    class_id\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    custom_p_o_number\n    \n , \n    cast(null as TEXT) as \n    \n    custom_sales_rep\n    \n , \n    cast(null as TEXT) as \n    \n    customer_id\n    \n , \n    cast(null as TEXT) as \n    \n    customer_memo\n    \n , \n    cast(null as timestamp) as \n    \n    delivery_time\n    \n , \n    cast(null as TEXT) as \n    \n    delivery_type\n    \n , \n    cast(null as TEXT) as \n    \n    department_id\n    \n , \n    cast(null as float) as \n    \n    deposit\n    \n , \n    cast(null as TEXT) as \n    \n    deposit_to_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    doc_number\n    \n , \n    cast(null as date) as \n    \n    due_date\n    \n , \n    cast(null as TEXT) as \n    \n    email_status\n    \n , \n    cast(null as float) as \n    \n    exchange_rate\n    \n , \n    cast(null as TEXT) as \n    \n    global_tax_calculation\n    \n , \n    cast(null as float) as \n    \n    home_balance\n    \n , \n    cast(null as float) as \n    \n    home_total_amount\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    print_status\n    \n , \n    cast(null as TEXT) as \n    \n    private_note\n    \n , \n    cast(null as TEXT) as \n    \n    sales_term_id\n    \n , \n    cast(null as timestamp) as \n    \n    ship_date\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_id\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as TEXT) as \n    \n    tax_code_id\n    \n , \n    cast(null as float) as \n    \n    total_amount\n    \n , \n    cast(null as float) as \n    \n    total_tax\n    \n , \n    cast(null as TEXT) as \n    \n    tracking_number\n    \n , \n    cast(null as date) as \n    \n    transaction_date\n    \n , \n    cast(null as TEXT) as \n    \n    transaction_source\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as invoice_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(customer_id as TEXT) as customer_id,\n        cast(billing_address_id as TEXT) as billing_address_id,\n        shipping_address_id,\n        delivery_type,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        cast(class_id as TEXT) as class_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:22.754323Z", "completed_at": "2024-07-16T07:38:23.813528Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:23.814010Z", "completed_at": "2024-07-16T07:38:23.814015Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1578280925750732, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__item", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    active\n    \n , \n    cast(null as TEXT) as \n    \n    asset_account_id\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    description\n    \n , \n    cast(null as TEXT) as \n    \n    expense_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    fully_qualified_name\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    income_account_id\n    \n , \n    cast(null as date) as \n    \n    inventory_start_date\n    \n , \n    cast(null as TEXT) as \n    \n    level\n    \n , \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    cast(null as TEXT) as \n    \n    parent_item_id\n    \n , \n    cast(null as float) as \n    \n    purchase_cost\n    \n , \n    cast(null as TEXT) as \n    \n    purchase_description\n    \n , \n    cast(null as TEXT) as \n    \n    purchase_tax_code_id\n    \n , \n    cast(null as boolean) as \n    \n    purchase_tax_included\n    \n , \n    cast(null as float) as \n    \n    quantity_on_hand\n    \n , \n    cast(null as TEXT) as \n    \n    sales_tax_code_id\n    \n , \n    cast(null as boolean) as \n    \n    sales_tax_included\n    \n , \n    cast(null as TEXT) as \n    \n    stock_keeping_unit\n    \n , \n    cast(null as boolean) as \n    \n    sub_item\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as boolean) as \n    \n    taxable\n    \n , \n    cast(null as boolean) as \n    \n    track_quantity_on_hand\n    \n , \n    cast(null as TEXT) as \n    \n    type\n    \n , \n    cast(null as float) as \n    \n    unit_price\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as item_id,\n        active as is_active,\n        created_at,\n        cast(income_account_id as TEXT) as income_account_id,\n        cast(asset_account_id as TEXT) as asset_account_id,\n        cast(expense_account_id as TEXT) as expense_account_id,\n        name,\n        purchase_cost,\n        taxable,\n        type,\n        unit_price,\n        inventory_start_date,\n        cast(parent_item_id as TEXT) as parent_item_id,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:22.766173Z", "completed_at": "2024-07-16T07:38:23.849742Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:23.851253Z", "completed_at": "2024-07-16T07:38:23.851257Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2131950855255127, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    adjustment\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    doc_number\n    \n , \n    cast(null as float) as \n    \n    exchange_rate\n    \n , \n    cast(null as float) as \n    \n    home_total_amount\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    private_note\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as TEXT) as \n    \n    tax_code_id\n    \n , \n    cast(null as float) as \n    \n    total_amount\n    \n , \n    cast(null as float) as \n    \n    total_tax\n    \n , \n    cast(null as date) as \n    \n    transaction_date\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as journal_entry_id,\n        adjustment as is_adjustment,\n        created_at,\n        currency_id,\n        cast(doc_number as TEXT) as doc_number,\n        exchange_rate,\n        private_note,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:22.758717Z", "completed_at": "2024-07-16T07:38:23.850430Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:23.855634Z", "completed_at": "2024-07-16T07:38:23.855638Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2143361568450928, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    account_id\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as TEXT) as \n    \n    billable_status\n    \n , \n    cast(null as TEXT) as \n    \n    class_id\n    \n , \n    cast(null as TEXT) as \n    \n    customer_id\n    \n , \n    cast(null as TEXT) as \n    \n    department_id\n    \n , \n    cast(null as TEXT) as \n    \n    description\n    \n , \n    cast(null as date) as \n    \n    description_service_date\n    \n , \n    cast(null as TEXT) as \n    \n    description_tax_code_id\n    \n , \n    cast(null as TEXT) as \n    \n    employee_id\n    \n , \n    cast(null as TEXT) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    journal_entry_id\n    \n , \n    cast(null as TEXT) as \n    \n    posting_type\n    \n , \n    cast(null as float) as \n    \n    tax_amount\n    \n , \n    cast(null as TEXT) as \n    \n    tax_applicable_on\n    \n , \n    cast(null as TEXT) as \n    \n    tax_code_id\n    \n , \n    cast(null as TEXT) as \n    \n    vendor_id\n    \n \n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(journal_entry_id as TEXT) as journal_entry_id,\n        index,\n        cast(account_id as TEXT) as account_id,\n        amount,\n        cast(customer_id as TEXT) as customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast(class_id as TEXT) as class_id,\n        description,\n        billable_status,\n        posting_type,\n        cast(vendor_id as TEXT) as vendor_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:23.851478Z", "completed_at": "2024-07-16T07:38:24.925954Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:24.926878Z", "completed_at": "2024-07-16T07:38:24.926887Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2232029438018799, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as TEXT) as \n    \n    check_id\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_charge_id\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_credit_id\n    \n , \n    cast(null as TEXT) as \n    \n    credit_memo_id\n    \n , \n    cast(null as TEXT) as \n    \n    deposit_id\n    \n , \n    cast(null as TEXT) as \n    \n    expense_id\n    \n , \n    cast(null as TEXT) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    invoice_id\n    \n , \n    cast(null as TEXT) as \n    \n    journal_entry_id\n    \n , \n    cast(null as TEXT) as \n    \n    payment_id\n    \n \n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(payment_id as TEXT) as payment_id,\n        index,\n        amount,\n        journal_entry_id,\n        deposit_id,\n        cast(invoice_id as TEXT) as invoice_id,\n        credit_memo_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:23.973938Z", "completed_at": "2024-07-16T07:38:25.078850Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:25.085156Z", "completed_at": "2024-07-16T07:38:25.085162Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2119159698486328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    account_id\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as boolean) as \n    \n    credit\n    \n , \n    cast(null as TEXT) as \n    \n    currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    customer_id\n    \n , \n    cast(null as TEXT) as \n    \n    department_id\n    \n , \n    cast(null as TEXT) as \n    \n    doc_number\n    \n , \n    cast(null as TEXT) as \n    \n    employee_id\n    \n , \n    cast(null as float) as \n    \n    exchange_rate\n    \n , \n    cast(null as TEXT) as \n    \n    global_tax_calculation\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    payment_method_id\n    \n , \n    cast(null as TEXT) as \n    \n    payment_type\n    \n , \n    cast(null as TEXT) as \n    \n    print_status\n    \n , \n    cast(null as TEXT) as \n    \n    private_note\n    \n , \n    cast(null as TEXT) as \n    \n    remit_to_address_id\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as TEXT) as \n    \n    tax_code_id\n    \n , \n    cast(null as float) as \n    \n    total_amount\n    \n , \n    cast(null as float) as \n    \n    total_tax\n    \n , \n    cast(null as date) as \n    \n    transaction_date\n    \n , \n    cast(null as TEXT) as \n    \n    transaction_source\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    vendor_id\n    \n \n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n     \n    select \n        cast(id as TEXT) as purchase_id,\n        cast(account_id as TEXT) as account_id,\n        created_at,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        exchange_rate,\n        credit,\n        total_amount,\n        payment_type,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        cast(vendor_id as TEXT) as vendor_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:23.914700Z", "completed_at": "2024-07-16T07:38:25.077321Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:25.079312Z", "completed_at": "2024-07-16T07:38:25.079317Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2679028511047363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as float) as \n    \n    credit_card_amount\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_auth_code\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_billing_address_street\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_cc_expiry_month\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_cc_expiry_year\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_cctrans_id\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_name_on_account\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_postal_code\n    \n , \n    cast(null as boolean) as \n    \n    credit_card_process_payment\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_status\n    \n , \n    cast(null as timestamp) as \n    \n    credit_card_transaction_authorization_time\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_type\n    \n , \n    cast(null as TEXT) as \n    \n    currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    customer_id\n    \n , \n    cast(null as TEXT) as \n    \n    deposit_to_account_id\n    \n , \n    cast(null as float) as \n    \n    exchange_rate\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    payment_method_id\n    \n , \n    cast(null as TEXT) as \n    \n    private_note\n    \n , \n    cast(null as boolean) as \n    \n    process_payment\n    \n , \n    cast(null as TEXT) as \n    \n    receivable_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    reference_number\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as float) as \n    \n    total_amount\n    \n , \n    cast(null as date) as \n    \n    transaction_date\n    \n , \n    cast(null as TEXT) as \n    \n    transaction_source\n    \n , \n    cast(null as TEXT) as \n    \n    transaction_status\n    \n , \n    cast(null as float) as \n    \n    unapplied_amount\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as payment_id,\n        unapplied_amount,\n        total_amount,\n        currency_id,\n        cast(receivable_account_id as TEXT) as receivable_account_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(customer_id as TEXT) as customer_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:23.969352Z", "completed_at": "2024-07-16T07:38:25.077599Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:25.079551Z", "completed_at": "2024-07-16T07:38:25.079555Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2136118412017822, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    account_expense_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    account_expense_billable_status\n    \n , \n    cast(null as TEXT) as \n    \n    account_expense_class_id\n    \n , \n    cast(null as TEXT) as \n    \n    account_expense_customer_id\n    \n , \n    cast(null as float) as \n    \n    account_expense_tax_amount\n    \n , \n    cast(null as TEXT) as \n    \n    account_expense_tax_code_id\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as TEXT) as \n    \n    description\n    \n , \n    cast(null as TEXT) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    item_expense_billable_status\n    \n , \n    cast(null as TEXT) as \n    \n    item_expense_class_id\n    \n , \n    cast(null as TEXT) as \n    \n    item_expense_customer_id\n    \n , \n    cast(null as TEXT) as \n    \n    item_expense_item_id\n    \n , \n    cast(null as float) as \n    \n    item_expense_quantity\n    \n , \n    cast(null as TEXT) as \n    \n    item_expense_tax_code_id\n    \n , \n    cast(null as float) as \n    \n    item_expense_unit_price\n    \n , \n    cast(null as TEXT) as \n    \n    purchase_id\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_id as TEXT) as purchase_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id, \n        account_expense_billable_status,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_billable_status,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:25.079995Z", "completed_at": "2024-07-16T07:38:26.027050Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:26.027547Z", "completed_at": "2024-07-16T07:38:26.027554Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.057502031326294, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as TEXT) as \n    \n    bundle_id\n    \n , \n    cast(null as float) as \n    \n    bundle_quantity\n    \n , \n    cast(null as TEXT) as \n    \n    description\n    \n , \n    cast(null as date) as \n    \n    description_service_date\n    \n , \n    cast(null as TEXT) as \n    \n    description_tax_code_id\n    \n , \n    cast(null as TEXT) as \n    \n    discount_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    discount_class_id\n    \n , \n    cast(null as float) as \n    \n    discount_discount_percent\n    \n , \n    cast(null as boolean) as \n    \n    discount_percent_based\n    \n , \n    cast(null as TEXT) as \n    \n    discount_tax_code_id\n    \n , \n    cast(null as TEXT) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    refund_id\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_class_id\n    \n , \n    cast(null as float) as \n    \n    sales_item_discount_amount\n    \n , \n    cast(null as float) as \n    \n    sales_item_discount_rate\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_item_id\n    \n , \n    cast(null as float) as \n    \n    sales_item_quantity\n    \n , \n    cast(null as date) as \n    \n    sales_item_service_date\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_tax_code_id\n    \n , \n    cast(null as float) as \n    \n    sales_item_unit_price\n    \n , \n    cast(null as TEXT) as \n    \n    sub_total_item_id\n    \n \n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(refund_id as TEXT) as refund_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id, \n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        sales_item_tax_code_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:25.194925Z", "completed_at": "2024-07-16T07:38:26.245824Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:26.247489Z", "completed_at": "2024-07-16T07:38:26.247498Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1577887535095215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    apply_tax_after_discount\n    \n , \n    cast(null as float) as \n    \n    balance\n    \n , \n    cast(null as TEXT) as \n    \n    bill_email\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_id\n    \n , \n    cast(null as TEXT) as \n    \n    class_id\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as float) as \n    \n    credit_card_amount\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_auth_code\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_billing_address_street\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_cc_expiry_month\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_cc_expiry_year\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_cctrans_id\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_name_on_account\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_postal_code\n    \n , \n    cast(null as boolean) as \n    \n    credit_card_process_payment\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_status\n    \n , \n    cast(null as date) as \n    \n    credit_card_transaction_authorization_time\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_type\n    \n , \n    cast(null as TEXT) as \n    \n    currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    customer_id\n    \n , \n    cast(null as TEXT) as \n    \n    customer_memo\n    \n , \n    cast(null as date) as \n    \n    delivery_time\n    \n , \n    cast(null as TEXT) as \n    \n    delivery_type\n    \n , \n    cast(null as TEXT) as \n    \n    department_id\n    \n , \n    cast(null as TEXT) as \n    \n    deposit_to_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    doc_number\n    \n , \n    cast(null as TEXT) as \n    \n    email_status\n    \n , \n    cast(null as float) as \n    \n    exchange_rate\n    \n , \n    cast(null as TEXT) as \n    \n    global_tax_calculation\n    \n , \n    cast(null as float) as \n    \n    home_balance\n    \n , \n    cast(null as float) as \n    \n    home_total_amount\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    payment_method_id\n    \n , \n    cast(null as TEXT) as \n    \n    payment_reference_number\n    \n , \n    cast(null as TEXT) as \n    \n    print_status\n    \n , \n    cast(null as TEXT) as \n    \n    private_note\n    \n , \n    cast(null as date) as \n    \n    ship_date\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_id\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as TEXT) as \n    \n    tax_code_id\n    \n , \n    cast(null as float) as \n    \n    total_amount\n    \n , \n    cast(null as float) as \n    \n    total_tax\n    \n , \n    cast(null as TEXT) as \n    \n    tracking_number\n    \n , \n    cast(null as date) as \n    \n    transaction_date\n    \n , \n    cast(null as TEXT) as \n    \n    transaction_source\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as sales_receipt_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        created_at,\n        cast(customer_id as TEXT) as customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast(class_id as TEXT) as class_id,\n        currency_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:25.189717Z", "completed_at": "2024-07-16T07:38:26.246388Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:26.248121Z", "completed_at": "2024-07-16T07:38:26.248125Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1589062213897705, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as TEXT) as \n    \n    bundle_id\n    \n , \n    cast(null as float) as \n    \n    bundle_quantity\n    \n , \n    cast(null as TEXT) as \n    \n    description\n    \n , \n    cast(null as date) as \n    \n    description_service_date\n    \n , \n    cast(null as TEXT) as \n    \n    description_tax_code_id\n    \n , \n    cast(null as TEXT) as \n    \n    discount_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    discount_class_id\n    \n , \n    cast(null as float) as \n    \n    discount_discount_percent\n    \n , \n    cast(null as boolean) as \n    \n    discount_percent_based\n    \n , \n    cast(null as TEXT) as \n    \n    discount_tax_code_id\n    \n , \n    cast(null as TEXT) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_class_id\n    \n , \n    cast(null as float) as \n    \n    sales_item_discount_amount\n    \n , \n    cast(null as float) as \n    \n    sales_item_discount_rate\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_item_id\n    \n , \n    cast(null as float) as \n    \n    sales_item_quantity\n    \n , \n    cast(null as date) as \n    \n    sales_item_service_date\n    \n , \n    cast(null as TEXT) as \n    \n    sales_item_tax_code_id\n    \n , \n    cast(null as float) as \n    \n    sales_item_unit_price\n    \n , \n    cast(null as TEXT) as \n    \n    sales_receipt_id\n    \n , \n    cast(null as TEXT) as \n    \n    sub_total_item_id\n    \n \n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(sales_receipt_id as TEXT) as sales_receipt_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_tax_code_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:25.184378Z", "completed_at": "2024-07-16T07:38:26.246141Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:26.247803Z", "completed_at": "2024-07-16T07:38:26.247813Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.160032033920288, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as boolean) as \n    \n    apply_tax_after_discount\n    \n , \n    cast(null as float) as \n    \n    balance\n    \n , \n    cast(null as TEXT) as \n    \n    bill_email\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_id\n    \n , \n    cast(null as TEXT) as \n    \n    check_payment_account_number\n    \n , \n    cast(null as TEXT) as \n    \n    check_payment_bank_name\n    \n , \n    cast(null as TEXT) as \n    \n    check_payment_check_number\n    \n , \n    cast(null as TEXT) as \n    \n    check_payment_name_on_account\n    \n , \n    cast(null as TEXT) as \n    \n    check_payment_status\n    \n , \n    cast(null as TEXT) as \n    \n    class_id\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as float) as \n    \n    credit_card_amount\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_auth_code\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_billing_address_street\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_cc_expiry_month\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_cc_expiry_year\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_cctrans_id\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_name_on_account\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_postal_code\n    \n , \n    cast(null as boolean) as \n    \n    credit_card_process_payment\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_status\n    \n , \n    cast(null as date) as \n    \n    credit_card_transaction_authorization_time\n    \n , \n    cast(null as TEXT) as \n    \n    credit_card_type\n    \n , \n    cast(null as TEXT) as \n    \n    currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    customer_id\n    \n , \n    cast(null as TEXT) as \n    \n    customer_memo\n    \n , \n    cast(null as TEXT) as \n    \n    department_id\n    \n , \n    cast(null as TEXT) as \n    \n    deposit_to_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    doc_number\n    \n , \n    cast(null as float) as \n    \n    exchange_rate\n    \n , \n    cast(null as TEXT) as \n    \n    global_tax_calculation\n    \n , \n    cast(null as float) as \n    \n    home_balance\n    \n , \n    cast(null as float) as \n    \n    home_total_amount\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    payment_method_id\n    \n , \n    cast(null as TEXT) as \n    \n    payment_reference_number\n    \n , \n    cast(null as TEXT) as \n    \n    payment_type\n    \n , \n    cast(null as TEXT) as \n    \n    print_status\n    \n , \n    cast(null as TEXT) as \n    \n    private_note\n    \n , \n    cast(null as TEXT) as \n    \n    shipping_address_id\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as TEXT) as \n    \n    tax_code_id\n    \n , \n    cast(null as float) as \n    \n    total_amount\n    \n , \n    cast(null as float) as \n    \n    total_tax\n    \n , \n    cast(null as date) as \n    \n    transaction_date\n    \n , \n    cast(null as TEXT) as \n    \n    transaction_source\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as refund_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        cast(class_id as TEXT) as class_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        created_at,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        currency_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:26.143211Z", "completed_at": "2024-07-16T07:38:27.170749Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.171230Z", "completed_at": "2024-07-16T07:38:27.171237Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1170299053192139, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__transfer", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__transfer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    from_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    private_note\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as TEXT) as \n    \n    to_account_id\n    \n , \n    cast(null as date) as \n    \n    transaction_date\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as transfer_id,\n        amount,\n        cast(from_account_id as TEXT) as from_account_id,\n        cast(to_account_id as TEXT) as to_account_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__transfer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.265658Z", "completed_at": "2024-07-16T07:38:27.309060Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.310827Z", "completed_at": "2024-07-16T07:38:27.310830Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04998588562011719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__address_address_id__source_relation.5bc813a014", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__address\"\n    group by address_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.313258Z", "completed_at": "2024-07-16T07:38:27.318718Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.319176Z", "completed_at": "2024-07-16T07:38:27.319181Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006889820098876953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__address_address_id.4f100ae50c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__address\"\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.320632Z", "completed_at": "2024-07-16T07:38:27.323900Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.324361Z", "completed_at": "2024-07-16T07:38:27.324365Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00464177131652832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_line_bill_payment_id__index__source_relation.0a7e17967c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\"\n    group by bill_payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.325776Z", "completed_at": "2024-07-16T07:38:27.328485Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.328917Z", "completed_at": "2024-07-16T07:38:27.328921Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004021883010864258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id.1dbb366150", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\"\nwhere bill_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.330297Z", "completed_at": "2024-07-16T07:38:27.332822Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.333248Z", "completed_at": "2024-07-16T07:38:27.333252Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0038199424743652344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id.35f96199bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.334643Z", "completed_at": "2024-07-16T07:38:27.336606Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.337030Z", "completed_at": "2024-07-16T07:38:27.337034Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0032720565795898438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__account_classifications", "compiled": true, "compiled_code": "with accounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\nclassification_fix as (\n\n    select \n        account_id,\n        source_relation,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n\n    select \n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.account_id = adjusted_balances.parent_account_id\n        and parent_accounts.source_relation = adjusted_balances.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__account_classifications\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.338484Z", "completed_at": "2024-07-16T07:38:27.344826Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.345287Z", "completed_at": "2024-07-16T07:38:27.345292Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0077440738677978516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue.127506f73f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        classification as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\n    group by classification\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Asset','Equity','Expense','Liability','Revenue'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.346710Z", "completed_at": "2024-07-16T07:38:27.349693Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.350151Z", "completed_at": "2024-07-16T07:38:27.350155Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004341840744018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__account_account_id__source_relation.864a4b056a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\n    group by account_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.351557Z", "completed_at": "2024-07-16T07:38:27.354113Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.354542Z", "completed_at": "2024-07-16T07:38:27.354546Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0038709640502929688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__account_account_id.9944488b9d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.355922Z", "completed_at": "2024-07-16T07:38:27.358909Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.359380Z", "completed_at": "2024-07-16T07:38:27.359384Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00435185432434082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_bill_id__source_relation.8c08249abf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill\"\n    group by bill_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.360801Z", "completed_at": "2024-07-16T07:38:27.363366Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.363791Z", "completed_at": "2024-07-16T07:38:27.363794Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0038881301879882812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id.ca717958c8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.365176Z", "completed_at": "2024-07-16T07:38:27.368535Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.368967Z", "completed_at": "2024-07-16T07:38:27.368971Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0046579837799072266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id.6d547b8c07", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle_item\"\nwhere bundle_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.370373Z", "completed_at": "2024-07-16T07:38:27.373788Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.374233Z", "completed_at": "2024-07-16T07:38:27.374237Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0047528743743896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_payment_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to accounts payable and a credit record to the specified cash account.\n*/\n\n--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith bill_payments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment\"\n),\n\nbill_payment_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\nap_accounts as (\n\n    select\n        account_id,\n        currency_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Payable'\n        and is_active\n        and not is_sub_account\n),\n\nbill_payment_join as (\n\n    select\n        bill_payments.bill_payment_id as transaction_id,\n        bill_payments.source_relation,\n        row_number() over(partition by bill_payments.bill_payment_id, bill_payments.source_relation \n            order by bill_payments.source_relation, bill_payments.transaction_date) - 1 as index,\n        bill_payments.transaction_date,\n        bill_payments.total_amount as amount,\n        (bill_payments.total_amount * coalesce(bill_payments.exchange_rate, 1)) as converted_amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id,\n        bill_payments.vendor_id,\n        bill_payments.department_id\n    from bill_payments\n\n    left join ap_accounts\n        on ap_accounts.currency_id = bill_payments.currency_id\n        and ap_accounts.source_relation = bill_payments.source_relation\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payment_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        department_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        account_id,\n        cast(null as TEXT) as class_id,\n        department_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source\n    from bill_payment_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_payment_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.375640Z", "completed_at": "2024-07-16T07:38:27.378319Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.378767Z", "completed_at": "2024-07-16T07:38:27.378771Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0040171146392822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_bill_payment_id__source_relation.4b7aafd630", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment\"\n    group by bill_payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.380185Z", "completed_at": "2024-07-16T07:38:27.383088Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.383538Z", "completed_at": "2024-07-16T07:38:27.383542Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004240751266479492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bundle_bundle_id__source_relation.e241a21ebc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bundle_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle\"\n    group by bundle_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.384920Z", "completed_at": "2024-07-16T07:38:27.387530Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.387963Z", "completed_at": "2024-07-16T07:38:27.387967Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004063129425048828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id.908899ccfb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment\"\nwhere bill_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.389528Z", "completed_at": "2024-07-16T07:38:27.392916Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.393364Z", "completed_at": "2024-07-16T07:38:27.393368Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004728078842163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id.382e1dad60", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle\"\nwhere bundle_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.394774Z", "completed_at": "2024-07-16T07:38:27.397761Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.398214Z", "completed_at": "2024-07-16T07:38:27.398218Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004349946975708008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_line_credit_memo_id__index__source_relation.7a43f0e186", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\"\n    group by credit_memo_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.399677Z", "completed_at": "2024-07-16T07:38:27.402366Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.402810Z", "completed_at": "2024-07-16T07:38:27.402814Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0040209293365478516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id.58953be02b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\"\nwhere credit_memo_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.404205Z", "completed_at": "2024-07-16T07:38:27.406836Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.407283Z", "completed_at": "2024-07-16T07:38:27.407287Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003966093063354492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_credit_memo_id__source_relation.917f24c5ca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo\"\n    group by credit_memo_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.408687Z", "completed_at": "2024-07-16T07:38:27.411621Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.412064Z", "completed_at": "2024-07-16T07:38:27.412067Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004260063171386719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__customer_customer_id__source_relation.61cc22a568", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__customer\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:26.350433Z", "completed_at": "2024-07-16T07:38:27.308490Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.310186Z", "completed_at": "2024-07-16T07:38:27.310191Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0700948238372803, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as boolean) as \n    \n    _fivetran_deleted\n    \n , \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as float) as \n    \n    balance\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    department_id\n    \n , \n    cast(null as TEXT) as \n    \n    doc_number\n    \n , \n    cast(null as float) as \n    \n    exchange_rate\n    \n , \n    cast(null as TEXT) as \n    \n    global_tax_calculation\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    payable_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    private_note\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as float) as \n    \n    total_amount\n    \n , \n    cast(null as date) as \n    \n    transaction_date\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as TEXT) as \n    \n    vendor_id\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as vendor_credit_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        exchange_rate,\n        created_at,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        cast(department_id as TEXT) as department_id,\n        private_note,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(vendor_id as TEXT) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:26.345415Z", "completed_at": "2024-07-16T07:38:27.309548Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.311252Z", "completed_at": "2024-07-16T07:38:27.311254Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0716750621795654, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    account_expense_account_id\n    \n , \n    cast(null as TEXT) as \n    \n    account_expense_billable_status\n    \n , \n    cast(null as TEXT) as \n    \n    account_expense_class_id\n    \n , \n    cast(null as TEXT) as \n    \n    account_expense_customer_id\n    \n , \n    cast(null as float) as \n    \n    account_expense_tax_amount\n    \n , \n    cast(null as TEXT) as \n    \n    account_expense_tax_code_id\n    \n , \n    cast(null as float) as \n    \n    amount\n    \n , \n    cast(null as TEXT) as \n    \n    description\n    \n , \n    cast(null as TEXT) as \n    \n    index\n    \n , \n    cast(null as TEXT) as \n    \n    item_expense_billable_status\n    \n , \n    cast(null as TEXT) as \n    \n    item_expense_class_id\n    \n , \n    cast(null as TEXT) as \n    \n    item_expense_customer_id\n    \n , \n    cast(null as TEXT) as \n    \n    item_expense_item_id\n    \n , \n    cast(null as TEXT) as \n    \n    item_expense_quantity\n    \n , \n    cast(null as TEXT) as \n    \n    item_expense_tax_code_id\n    \n , \n    cast(null as float) as \n    \n    item_expense_unit_price\n    \n , \n    cast(null as TEXT) as \n    \n    private_note\n    \n , \n    cast(null as TEXT) as \n    \n    vendor_credit_id\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(vendor_credit_id as TEXT) as vendor_credit_id,\n        index,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_quantity,\n        item_expense_unit_price,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        item_expense_billable_status,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:26.354771Z", "completed_at": "2024-07-16T07:38:27.308781Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.310608Z", "completed_at": "2024-07-16T07:38:27.310611Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0714380741119385, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    account_number\n    \n , \n    cast(null as boolean) as \n    \n    active\n    \n , \n    cast(null as TEXT) as \n    \n    alternate_phone\n    \n , \n    cast(null as float) as \n    \n    balance\n    \n , \n    cast(null as TEXT) as \n    \n    billing_address_id\n    \n , \n    cast(null as TEXT) as \n    \n    company_name\n    \n , \n    cast(null as timestamp) as \n    \n    created_at\n    \n , \n    cast(null as TEXT) as \n    \n    currency_id\n    \n , \n    cast(null as TEXT) as \n    \n    display_name\n    \n , \n    cast(null as TEXT) as \n    \n    email\n    \n , \n    cast(null as TEXT) as \n    \n    family_name\n    \n , \n    cast(null as TEXT) as \n    \n    fax_number\n    \n , \n    cast(null as TEXT) as \n    \n    given_name\n    \n , \n    cast(null as TEXT) as \n    \n    id\n    \n , \n    cast(null as TEXT) as \n    \n    middle_name\n    \n , \n    cast(null as TEXT) as \n    \n    mobile_phone\n    \n , \n    cast(null as TEXT) as \n    \n    other_contacts\n    \n , \n    cast(null as TEXT) as \n    \n    primary_phone\n    \n , \n    cast(null as TEXT) as \n    \n    print_on_check_name\n    \n , \n    cast(null as TEXT) as \n    \n    suffix\n    \n , \n    cast(null as TEXT) as \n    \n    sync_token\n    \n , \n    cast(null as TEXT) as \n    \n    tax_identifier\n    \n , \n    cast(null as TEXT) as \n    \n    term_id\n    \n , \n    cast(null as TEXT) as \n    \n    title\n    \n , \n    cast(null as timestamp) as \n    \n    updated_at\n    \n , \n    cast(null as boolean) as \n    \n    vendor_1099\n    \n , \n    cast(null as TEXT) as \n    \n    web_url\n    \n \n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as vendor_id,\n        account_number,\n        active as is_active,\n        balance,\n        cast(billing_address_id as TEXT) as billing_address_id,\n        company_name,\n        created_at,\n        currency_id,\n        display_name,\n        web_url,\n        vendor_1099 as is_vendor_1099,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.416354Z", "completed_at": "2024-07-16T07:38:27.422471Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.433853Z", "completed_at": "2024-07-16T07:38:27.433861Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.021489858627319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id.d921d2b152", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo\"\nwhere credit_memo_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.422723Z", "completed_at": "2024-07-16T07:38:27.434112Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.435968Z", "completed_at": "2024-07-16T07:38:27.435972Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016829967498779297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id.98232a9723", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__customer\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.431184Z", "completed_at": "2024-07-16T07:38:27.435456Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.437664Z", "completed_at": "2024-07-16T07:38:27.437668Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01903080940246582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_line_bill_id__index__source_relation.73722b1062", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_line\"\n    group by bill_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.426261Z", "completed_at": "2024-07-16T07:38:27.435717Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.437911Z", "completed_at": "2024-07-16T07:38:27.437915Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019910097122192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_join", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill\"\n),\n\nbill_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_line\"\n),\n\nbills_linked as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn\"\n),\n\nbill_payments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment\"\n),\n\nbill_payment_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\"\n\n    where bill_id is not null\n),\n\nbill_pay as (\n\n    select\n        bills.bill_id,\n        bills.source_relation,\n        bills_linked.bill_payment_id\n    from bills\n\n    left join bills_linked\n        on bills.bill_id = bills_linked.bill_id\n        and bills.source_relation = bills_linked.source_relation\n\n    where bills_linked.bill_payment_id is not null\n),\n\nbill_link as (\n\n    select\n        bills.*,\n        bill_pay.bill_payment_id\n    from bills\n\n    left join bill_pay\n        on bills.bill_id = bill_pay.bill_id\n        and bills.source_relation = bill_pay.source_relation\n),\n\nfinal as (\n\n    select\n        cast('bill' as TEXT)  as transaction_type,\n        bill_link.bill_id as transaction_id,\n        bill_link.source_relation,\n        bill_link.doc_number,\n        bill_link.department_id,\n        bill_link.vendor_id as vendor_id,\n        bill_link.payable_account_id,\n        bill_link.total_amount as total_amount,\n        (bill_link.total_amount * coalesce(bill_link.exchange_rate, 1)) as total_converted_amount,\n        bill_link.balance as current_balance,\n        bill_link.due_date_at as due_date,\n        (bill_payments.total_amount * coalesce(bill_payments.exchange_rate, 1)) as total_current_converted_payment,\n        min(bill_payments.transaction_date) as initial_payment_date,\n        max(bill_payments.transaction_date) as recent_payment_date,\n        sum(coalesce(bill_payment_lines.amount, 0)) as total_current_payment\n\n    from bill_link\n\n    left join bill_payments\n        on bill_link.bill_payment_id = bill_payments.bill_payment_id\n        and bill_link.source_relation = bill_payments.source_relation\n\n    left join bill_payment_lines\n        on bill_payments.bill_payment_id = bill_payment_lines.bill_payment_id\n        and bill_payments.source_relation = bill_payment_lines.source_relation\n        and bill_link.bill_id = bill_payment_lines.bill_id\n        and bill_link.source_relation = bill_payment_lines.source_relation\n    \n    group by 1,2,3,4,5,6,7,8,9,10,11,12 \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_join\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.438405Z", "completed_at": "2024-07-16T07:38:27.443045Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.449029Z", "completed_at": "2024-07-16T07:38:27.449034Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05483412742614746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id.25c5ea7348", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_line\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.443929Z", "completed_at": "2024-07-16T07:38:27.487645Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.492285Z", "completed_at": "2024-07-16T07:38:27.492289Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05155181884765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_bundle_invoice_id__index__invoice_line_index__source_relation.5370e9fcd0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, invoice_line_index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle\"\n    group by invoice_id, index, invoice_line_index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.449322Z", "completed_at": "2024-07-16T07:38:27.492008Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.494166Z", "completed_at": "2024-07-16T07:38:27.494169Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05427670478820801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id.cfd59b83a9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.487952Z", "completed_at": "2024-07-16T07:38:27.492879Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.497131Z", "completed_at": "2024-07-16T07:38:27.497135Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05477619171142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_deposit_id__source_relation.5574d8e908", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit\"\n    group by deposit_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.494643Z", "completed_at": "2024-07-16T07:38:27.499368Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.503947Z", "completed_at": "2024-07-16T07:38:27.503951Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018120288848876953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id.880b8c37b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit\"\nwhere deposit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.499935Z", "completed_at": "2024-07-16T07:38:27.507003Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.511795Z", "completed_at": "2024-07-16T07:38:27.511798Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015104055404663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__deposit_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified cash account and a credit record to either undeposited funds or a\nspecific other account indicated in the deposit line.\n*/\n\n--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith deposits as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit\"\n),\n\ndeposit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_line\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\nuf_accounts as (\n\n    select\n        account_id,\n        source_relation\n    from accounts\n\n    where account_sub_type = 'UndepositedFunds'\n        and is_active\n        and not is_sub_account\n),\n\ndeposit_join as (\n\n    select\n        deposits.deposit_id as transaction_id,\n        deposits.source_relation,\n        deposit_lines.index,\n        deposits.transaction_date,\n        deposit_lines.amount,\n        deposit_lines.amount * (coalesce(deposits.home_total_amount/deposits.total_amount, 1)) as converted_amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.deposit_account_id, uf_accounts.account_id) as deposit_from_acct_id,\n        deposit_customer_id as customer_id,\n        deposit_lines.deposit_class_id as class_id,\n        deposits.department_id\n\n    from deposits\n\n    inner join deposit_lines\n        on deposits.deposit_id = deposit_lines.deposit_id\n        and deposits.source_relation = deposit_lines.source_relation\n\n    left join uf_accounts\n        on uf_accounts.source_relation = deposits.source_relation\n\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        deposit_to_acct_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        deposit_from_acct_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source\n    from deposit_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__deposit_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.504204Z", "completed_at": "2024-07-16T07:38:27.511560Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.513661Z", "completed_at": "2024-07-16T07:38:27.513664Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01746678352355957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__deposit_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith deposits as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit\"\n), \n\ndeposit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_line\"\n),\n\nfinal as (\n\n    select\n        deposits.deposit_id as transaction_id,\n        deposits.source_relation,\n        deposit_lines.index as transaction_line_id,\n        cast(null as TEXT) as doc_number,\n        'deposit' as transaction_type,\n        deposits.transaction_date,\n        deposit_lines.deposit_account_id as account_id,\n        deposit_lines.deposit_class_id as class_id,\n        deposits.department_id,\n        deposit_lines.deposit_customer_id as customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        deposit_lines.description,\n        deposit_lines.amount,\n        deposit_lines.amount * (coalesce(deposits.home_total_amount/deposits.total_amount, 1)) as converted_amount,\n        deposits.total_amount,\n        deposits.total_amount * (coalesce(deposits.home_total_amount/deposits.total_amount, 1)) as total_converted_amount\n    from deposits\n    \n    inner join deposit_lines \n        on deposits.deposit_id = deposit_lines.deposit_id\n        and deposits.source_relation = deposit_lines.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__deposit_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.507253Z", "completed_at": "2024-07-16T07:38:27.512356Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.516657Z", "completed_at": "2024-07-16T07:38:27.516661Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015079259872436523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_line_deposit_id__index__source_relation.443de63985", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_line\"\n    group by deposit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.514131Z", "completed_at": "2024-07-16T07:38:27.518451Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.522933Z", "completed_at": "2024-07-16T07:38:27.522937Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014050960540771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id.d615f463e1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_line\"\nwhere deposit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.519651Z", "completed_at": "2024-07-16T07:38:27.529133Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.530594Z", "completed_at": "2024-07-16T07:38:27.530598Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01421499252319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_invoice_id__index__source_relation.99b74bc327", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line\"\n    group by invoice_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.523448Z", "completed_at": "2024-07-16T07:38:27.529961Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.532078Z", "completed_at": "2024-07-16T07:38:27.532081Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01707768440246582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id.0424087a8f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.526379Z", "completed_at": "2024-07-16T07:38:27.530818Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.535809Z", "completed_at": "2024-07-16T07:38:27.535812Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014786720275878906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_estimate_id__source_relation.412260b882", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate\"\n    group by estimate_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.532308Z", "completed_at": "2024-07-16T07:38:27.537518Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.542260Z", "completed_at": "2024-07-16T07:38:27.542265Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012898921966552734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id.0331d3c310", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate\"\nwhere estimate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.539060Z", "completed_at": "2024-07-16T07:38:27.548496Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.549837Z", "completed_at": "2024-07-16T07:38:27.549842Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014346122741699219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_line_estimate_id__index__source_relation.cc61ab0953", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate_line\"\n    group by estimate_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.545962Z", "completed_at": "2024-07-16T07:38:27.550068Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.554596Z", "completed_at": "2024-07-16T07:38:27.554600Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013729095458984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id.c9b9c8f8f4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.543440Z", "completed_at": "2024-07-16T07:38:27.550305Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.554853Z", "completed_at": "2024-07-16T07:38:27.554856Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01736903190612793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id.c060f99b4c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate_line\"\nwhere estimate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.551591Z", "completed_at": "2024-07-16T07:38:27.556521Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.561745Z", "completed_at": "2024-07-16T07:38:27.561749Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013336658477783203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_invoice_id__source_relation.ef51800044", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice\"\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.557264Z", "completed_at": "2024-07-16T07:38:27.562404Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.568414Z", "completed_at": "2024-07-16T07:38:27.568419Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014559030532836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id.b6d8e1ad7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.563104Z", "completed_at": "2024-07-16T07:38:27.569061Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.573920Z", "completed_at": "2024-07-16T07:38:27.573925Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013962030410766602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified expense account and credit record to accounts payable for each bill transaction.\n*/\n\n--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill\"\n),\n\nbill_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.expense_account_id as parent_expense_account_id,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nbill_join as (\n    select\n        bills.bill_id as transaction_id,\n        bills.source_relation,\n        bill_lines.index,\n        bills.transaction_date,\n        bill_lines.amount,\n        (bill_lines.amount * coalesce(bills.exchange_rate, 1)) as converted_amount,\n        coalesce(bill_lines.account_expense_account_id,items.asset_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        coalesce(bill_lines.item_expense_class_id, bill_lines.account_expense_class_id) as class_id,\n        bills.vendor_id,\n        bills.department_id\n    from bills\n\n    inner join bill_lines\n        on bills.bill_id = bill_lines.bill_id\n        and bills.source_relation = bill_lines.source_relation\n\n    left join items\n        on bill_lines.item_expense_item_id = items.item_id\n        and bill_lines.source_relation = items.source_relation\n),\n\nfinal as (\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payed_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payable_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source\n    from bill_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.565598Z", "completed_at": "2024-07-16T07:38:27.569288Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.574174Z", "completed_at": "2024-07-16T07:38:27.574178Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014123201370239258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill\" \n),\n\nbill_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        bills.bill_id as transaction_id,\n        bills.source_relation,\n        bill_lines.index as transaction_line_id,\n        bills.doc_number,\n        'bill' as transaction_type,\n        bills.transaction_date,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id) as account_id,\n        bill_lines.account_expense_class_id as class_id,\n        bills.department_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        bills.vendor_id,\n        coalesce(bill_lines.account_expense_billable_status, bill_lines.item_expense_billable_status) as billable_status,\n        coalesce(bill_lines.description, items.name) as description,\n        bill_lines.amount,\n        bill_lines.amount * (coalesce(bills.exchange_rate, 1)) as converted_amount,\n        bills.total_amount,\n        bills.total_amount * (coalesce(bills.exchange_rate, 1)) as total_converted_amount\n    from bills\n\n    inner join bill_lines \n        on bills.bill_id = bill_lines.bill_id\n        and bills.source_relation = bill_lines.source_relation\n\n    left join items\n        on bill_lines.item_expense_item_id = items.item_id\n        and bill_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.570864Z", "completed_at": "2024-07-16T07:38:27.575999Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.580467Z", "completed_at": "2024-07-16T07:38:27.580471Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01281118392944336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__credit_memo_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to Discounts Refunds Given and a credit record to the specified income account.\n*/\n\n--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith credit_memos as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo\"\n),\n\ncredit_memo_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\ndf_accounts as (\n\n    select\n        account_id as account_id,\n        currency_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n        and not is_sub_account\n),\n\ncredit_memo_join as (\n\n    select\n        credit_memos.credit_memo_id as transaction_id,\n        credit_memos.source_relation,\n        credit_memo_lines.index,\n        credit_memos.transaction_date,\n        credit_memo_lines.amount,\n        (credit_memo_lines.amount * coalesce(credit_memos.exchange_rate, 1)) as converted_amount,\n        coalesce(credit_memo_lines.sales_item_account_id, items.income_account_id, items.expense_account_id) as account_id,\n        credit_memos.customer_id,\n        coalesce(credit_memo_lines.sales_item_class_id, credit_memo_lines.discount_class_id, credit_memos.class_id) as class_id,\n        credit_memos.department_id,\n        credit_memos.currency_id\n\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos.credit_memo_id = credit_memo_lines.credit_memo_id\n        and credit_memos.source_relation = credit_memo_lines.source_relation\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.item_id\n        and credit_memo_lines.source_relation = items.source_relation\n\n    where coalesce(credit_memo_lines.discount_account_id, credit_memo_lines.sales_item_account_id, credit_memo_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        credit_memo_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount * -1 as amount,\n        converted_amount * -1 as converted_amount,\n        account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'credit_memo' as transaction_source\n    from credit_memo_join\n\n    union all\n\n    select\n        transaction_id,\n        credit_memo_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount * -1 as amount,\n        converted_amount * -1 as converted_amount,\n        df_accounts.account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'credit_memo' as transaction_source\n    from credit_memo_join\n\n    left join df_accounts\n        on df_accounts.currency_id = credit_memo_join.currency_id\n        and df_accounts.source_relation = credit_memo_join.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__credit_memo_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.576755Z", "completed_at": "2024-07-16T07:38:27.581126Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.590409Z", "completed_at": "2024-07-16T07:38:27.590414Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017562150955200195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__credit_memo_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith credit_memos as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo\"\n),\n\ncredit_memo_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        credit_memos.credit_memo_id as transaction_id,\n        credit_memos.source_relation,\n        credit_memo_lines.index as transaction_line_id,\n        credit_memos.doc_number,\n        'credit_memo' as transaction_type,\n        credit_memos.transaction_date,\n        credit_memo_lines.sales_item_item_id as item_id,\n        credit_memo_lines.sales_item_quantity as item_quantity,\n        credit_memo_lines.sales_item_unit_price as item_unit_price,\n        case when credit_memo_lines.sales_item_account_id is null\n            then coalesce(items.income_account_id, items.asset_account_id, items.expense_account_id) \n            else credit_memo_lines.sales_item_account_id\n                end as account_id,\n        credit_memos.class_id,\n        credit_memos.department_id,\n        credit_memos.customer_id, \n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        credit_memo_lines.description,\n        credit_memo_lines.amount * -1 as amount,\n        credit_memo_lines.amount * coalesce(-credit_memos.exchange_rate, -1) as converted_amount,\n        credit_memos.total_amount * -1 as total_amount,\n        credit_memos.total_amount * coalesce(-credit_memos.exchange_rate, -1) as total_converted_amount\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos.credit_memo_id = credit_memo_lines.credit_memo_id\n        and credit_memos.source_relation = credit_memo_lines.source_relation\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.item_id\n        and credit_memo_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__credit_memo_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.581844Z", "completed_at": "2024-07-16T07:38:27.591245Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.596283Z", "completed_at": "2024-07-16T07:38:27.596287Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017592906951904297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__invoice_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to accounts receivable and a credit record to a specified revenue account indicated on the invoice line.\n*/\n\n--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice\"\n),\n\ninvoice_lines as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line\"\n),\n\nitems as (\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\naccounts as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\n\n\n\ninvoice_bundles as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle\"\n),\n\nbundles as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle\"\n),\n\nbundle_items as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle_item\"\n),\n\nincome_accounts as (\n\n    select *\n    from accounts\n\n    where account_sub_type = 'SalesOfProductIncome'\n),\n\nbundle_income_accounts as (\n\n    select distinct\n        coalesce(parent.income_account_id, income_accounts.account_id) as account_id,\n        coalesce(parent.source_relation, income_accounts.source_relation) as source_relation,\n        bundle_items.bundle_id\n\n    from items\n\n    left join items as parent\n        on items.parent_item_id = parent.item_id\n        and items.source_relation = parent.source_relation\n\n    inner join income_accounts\n        on income_accounts.account_id = items.income_account_id\n        and income_accounts.source_relation = items.source_relation\n\n    inner join bundle_items\n        on bundle_items.item_id = items.item_id\n        and bundle_items.source_relation = items.source_relation\n),\n\n\nar_accounts as (\n\n    select \n        account_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n        and not is_sub_account\n),\n\ninvoice_join as (\n\n    select\n        invoices.invoice_id as transaction_id,\n        invoices.source_relation,\n        invoice_lines.index,\n        invoices.transaction_date as transaction_date,\n\n        \n        case when invoice_lines.bundle_id is not null and invoices.total_amount = 0 then invoices.total_amount\n            else invoice_lines.amount\n        end as amount,\n        case when invoice_lines.bundle_id is not null and invoices.total_amount = 0 \n            then (invoices.total_amount * coalesce(invoices.exchange_rate, 1))\n            else (invoice_lines.amount * coalesce(invoices.exchange_rate, 1))\n        end as converted_amount,\n        case when invoice_lines.detail_type is not null then invoice_lines.detail_type\n            when coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.sales_item_account_id) is not null then 'SalesItemLineDetail'\n            when invoice_lines.discount_account_id is not null then 'DiscountLineDetail'\n            when coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.discount_account_id, invoice_lines.sales_item_account_id) is null then 'NoAccountMapping'\n        end as invoice_line_transaction_type,\n        coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.discount_account_id, invoice_lines.sales_item_account_id) as account_id,\n\n        \n\n        coalesce(invoice_lines.sales_item_class_id, invoice_lines.discount_class_id, invoices.class_id) as class_id,\n\n        invoices.customer_id,\n        invoices.department_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices.invoice_id = invoice_lines.invoice_id\n        and invoices.source_relation = invoice_lines.source_relation\n\n    left join items\n        on coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) = items.item_id\n        and invoice_lines.source_relation = items.source_relation\n\n    \n    left join bundle_income_accounts\n        on bundle_income_accounts.bundle_id = invoice_lines.bundle_id\n        and bundle_income_accounts.source_relation = invoice_lines.source_relation\n\n    \n),\n\ninvoice_filter as (\n\n    select *\n    from invoice_join\n    where invoice_line_transaction_type not in ('SubTotalLineDetail','NoAccountMapping')\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        invoice_filter.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        account_id,\n        class_id,\n        department_id,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'debit'\n            else 'credit' \n        end as transaction_type,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'invoice discount'\n            else 'invoice'\n        end as transaction_source\n    from invoice_filter\n\n    union all\n\n    select\n        transaction_id,\n        invoice_filter.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        ar_accounts.account_id,\n        class_id,\n        department_id,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'credit'\n            else 'debit' \n        end as transaction_type,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'invoice discount'\n            else 'invoice'\n        end as transaction_source\n    from invoice_filter\n\n    left join ar_accounts\n        on ar_accounts.source_relation = invoice_filter.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__invoice_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.587156Z", "completed_at": "2024-07-16T07:38:27.591528Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.596542Z", "completed_at": "2024-07-16T07:38:27.596546Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017728090286254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__invoice_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice\"\n),\n\ninvoice_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        invoices.invoice_id as transaction_id,\n        invoices.source_relation,\n        invoice_lines.index as transaction_line_id,\n        invoices.doc_number,\n        'invoice' as transaction_type,\n        invoices.transaction_date,\n        coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) as item_id,\n        coalesce(invoice_lines.quantity, invoice_lines.sales_item_quantity) as item_quantity,\n        invoice_lines.sales_item_unit_price as item_unit_price,\n        case when invoice_lines.account_id is null\n            then coalesce(items.income_account_id, items.expense_account_id, items.asset_account_id)\n            else invoice_lines.account_id\n                end as account_id,\n        coalesce(invoice_lines.discount_class_id, invoice_lines.sales_item_class_id) as class_id,\n        invoices.department_id,\n        invoices.customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        invoice_lines.description,\n        invoice_lines.amount,\n        invoice_lines.amount * coalesce(invoices.exchange_rate, 1) as converted_amount,\n        invoices.total_amount,\n        invoices.total_amount * coalesce(invoices.exchange_rate, 1) as total_converted_amount\n    from invoices\n\n    inner join invoice_lines\n        on invoices.invoice_id = invoice_lines.invoice_id\n        and invoices.source_relation = invoice_lines.source_relation\n\n    left join items\n        on coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) = items.item_id\n        and invoice_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__invoice_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.593214Z", "completed_at": "2024-07-16T07:38:27.598271Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.602613Z", "completed_at": "2024-07-16T07:38:27.602618Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012877702713012695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__item_item_id__source_relation.169465a2a6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        item_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n    group by item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.599004Z", "completed_at": "2024-07-16T07:38:27.603277Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.609066Z", "completed_at": "2024-07-16T07:38:27.609070Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013529300689697266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__item_item_id.da906d8fb9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\nwhere item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.603964Z", "completed_at": "2024-07-16T07:38:27.609709Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.614773Z", "completed_at": "2024-07-16T07:38:27.614778Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01393580436706543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id.39198c4ff2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry\"\nwhere journal_entry_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.606496Z", "completed_at": "2024-07-16T07:38:27.609918Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.615027Z", "completed_at": "2024-07-16T07:38:27.615030Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014000892639160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__journal_entry_double_entry", "compiled": true, "compiled_code": "/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\n\n--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith journal_entries as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry\"\n),\n\njournal_entry_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\n),\n\nfinal as (\n\n    select\n        journal_entries.journal_entry_id as transaction_id,\n        journal_entries.source_relation,\n        journal_entry_lines.index,\n        journal_entries.transaction_date,\n        journal_entry_lines.customer_id,\n        journal_entry_lines.vendor_id,\n        journal_entry_lines.amount,\n        (journal_entry_lines.amount * coalesce(journal_entries.exchange_rate, 1)) as converted_amount,\n        journal_entry_lines.account_id,\n        class_id,\n        journal_entry_lines.department_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries.journal_entry_id = journal_entry_lines.journal_entry_id\n        and journal_entries.source_relation = journal_entry_lines.source_relation\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__journal_entry_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.611465Z", "completed_at": "2024-07-16T07:38:27.616729Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.621585Z", "completed_at": "2024-07-16T07:38:27.621589Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0132598876953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__journal_entry_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith journal_entries as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry\"\n),\n\njournal_entry_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\n),\n\nfinal as (\n\n    select\n        journal_entries.journal_entry_id as transaction_id,\n        journal_entries.source_relation,\n        journal_entry_lines.index as transaction_line_id,\n        journal_entries.doc_number,\n        'journal_entry' as transaction_type,\n        journal_entries.transaction_date,\n        journal_entry_lines.account_id,\n        journal_entry_lines.class_id,\n        journal_entry_lines.department_id,\n        journal_entry_lines.customer_id,\n        journal_entry_lines.vendor_id,\n        cast(billable_status as TEXT) as billable_status,\n        journal_entry_lines.description,\n        case when lower(journal_entry_lines.posting_type) = 'credit'\n            then journal_entry_lines.amount * -1 \n            else journal_entry_lines.amount \n        end as amount,\n        case when lower(journal_entry_lines.posting_type) = 'credit'\n            then journal_entry_lines.amount * coalesce(-journal_entries.exchange_rate, -1)\n            else journal_entry_lines.amount * coalesce(journal_entries.exchange_rate, 1)\n        end as converted_amount,\n        journal_entries.total_amount,\n        journal_entries.total_amount * coalesce(journal_entries.exchange_rate, 1) as total_converted_amount\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries.journal_entry_id = journal_entry_lines.journal_entry_id\n        and journal_entries.source_relation = journal_entry_lines.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__journal_entry_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.617453Z", "completed_at": "2024-07-16T07:38:27.622246Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.628727Z", "completed_at": "2024-07-16T07:38:27.628731Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014739990234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit.ab661907c3", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        posting_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\n    group by posting_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Credit','Debit'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.625768Z", "completed_at": "2024-07-16T07:38:27.629372Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.634138Z", "completed_at": "2024-07-16T07:38:27.634141Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013961076736450195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id.bd89a6f784", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\nwhere journal_entry_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.622925Z", "completed_at": "2024-07-16T07:38:27.629626Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.634393Z", "completed_at": "2024-07-16T07:38:27.634397Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014756917953491211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__journal_entry_line_journal_entry_id__index__source_relation.0cd1d9f232", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        journal_entry_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\n    group by journal_entry_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.631193Z", "completed_at": "2024-07-16T07:38:27.636344Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.641505Z", "completed_at": "2024-07-16T07:38:27.641509Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01659083366394043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_line_payment_id__index__source_relation.25be3cf2e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_line\"\n    group by payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.636837Z", "completed_at": "2024-07-16T07:38:27.641938Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.649464Z", "completed_at": "2024-07-16T07:38:27.649468Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01585531234741211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id.6351e3fe26", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_line\"\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.642159Z", "completed_at": "2024-07-16T07:38:27.649698Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.651885Z", "completed_at": "2024-07-16T07:38:27.651889Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015044927597045898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard.7de7edf458", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        payment_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase\"\n    group by payment_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Cash','Check','CreditCard'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.645933Z", "completed_at": "2024-07-16T07:38:27.650775Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.654975Z", "completed_at": "2024-07-16T07:38:27.654979Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015156984329223633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_purchase_id__source_relation.172340b49e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase\"\n    group by purchase_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.652121Z", "completed_at": "2024-07-16T07:38:27.656602Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.662343Z", "completed_at": "2024-07-16T07:38:27.662347Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017727136611938477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id.fc2090959b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase\"\nwhere purchase_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.656841Z", "completed_at": "2024-07-16T07:38:27.662567Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.671105Z", "completed_at": "2024-07-16T07:38:27.671109Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017446041107177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__invoice_join", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice\"\n),\n\ninvoice_linked as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn\"\n),\n\n\nestimates as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate\"\n),\n\n\npayments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment\"\n),\n\npayment_lines_payment as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_line\"\n\n    where invoice_id is not null\n),\n\ninvoice_est as (\n\n    select\n        invoices.invoice_id,\n        invoice_linked.estimate_id,\n        invoices.source_relation\n    from invoices\n\n    left join invoice_linked\n        on invoices.invoice_id = invoice_linked.invoice_id\n        and invoices.source_relation = invoice_linked.source_relation\n\n    where invoice_linked.estimate_id is not null\n),\n\ninvoice_pay as (\n\n    select\n        invoices.invoice_id,\n        invoice_linked.payment_id,\n        invoices.source_relation\n    from invoices\n\n    left join invoice_linked\n        on invoices.invoice_id = invoice_linked.invoice_id\n        and invoices.source_relation = invoice_linked.source_relation\n\n    where invoice_linked.payment_id is not null\n),\n\ninvoice_link as (\n\n    select\n        invoices.*,\n        invoice_est.estimate_id,\n        invoice_pay.payment_id\n    from invoices\n\n    left join invoice_est\n        on invoices.invoice_id = invoice_est.invoice_id\n        and invoices.source_relation = invoice_est.source_relation\n\n    left join invoice_pay\n        on invoices.invoice_id = invoice_pay.invoice_id\n        and invoices.source_relation = invoice_pay.source_relation\n),\n\nfinal as (\n\n    select\n        cast('invoice' as TEXT) as transaction_type,\n        invoice_link.invoice_id as transaction_id,\n        invoice_link.source_relation,\n        invoice_link.doc_number,\n        invoice_link.estimate_id,\n        invoice_link.department_id,\n        invoice_link.customer_id as customer_id,\n        invoice_link.billing_address_id,\n        invoice_link.shipping_address_id,\n        invoice_link.delivery_type,\n        invoice_link.total_amount as total_amount,\n        (invoice_link.total_amount * coalesce(invoice_link.exchange_rate, 1)) as total_converted_amount,\n        invoice_link.balance as current_balance,\n\n        \n        coalesce(estimates.total_amount, 0) as estimate_total_amount,\n        coalesce(estimates.total_amount, 0) * coalesce(estimates.exchange_rate, 1) as estimate_total_converted_amount,\n        estimates.transaction_status as estimate_status,\n\n        \n\n        invoice_link.due_date as due_date,\n        (payments.total_amount * coalesce(payments.exchange_rate, 1)) as total_current_converted_payment,\n        min(payments.transaction_date) as initial_payment_date,\n        max(payments.transaction_date) as recent_payment_date,\n        sum(coalesce(payment_lines_payment.amount, 0)) as total_current_payment\n\n    from invoice_link\n\n    \n    left join estimates\n        on invoice_link.estimate_id = estimates.estimate_id\n        and invoice_link.source_relation = estimates.source_relation\n    \n    left join payments\n        on invoice_link.payment_id = payments.payment_id\n        and invoice_link.source_relation = payments.source_relation\n\n    left join payment_lines_payment\n        on payments.payment_id = payment_lines_payment.payment_id\n        and payments.source_relation = payment_lines_payment.source_relation\n        and invoice_link.invoice_id = payment_lines_payment.invoice_id\n        and invoice_link.source_relation = payment_lines_payment.source_relation\n\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__invoice_join\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.662988Z", "completed_at": "2024-07-16T07:38:27.671330Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.673287Z", "completed_at": "2024-07-16T07:38:27.673291Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015874147415161133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__payment_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to either undeposited funds or a specified cash account and a credit record to accounts receivable.\n*/\n\n--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith payments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment\"\n),\n\npayment_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_line\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\nar_accounts as (\n\n    select\n        account_id,\n        currency_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n        and not is_sub_account\n),\n\npayment_join as (\n\n    select\n        payments.payment_id as transaction_id,\n        payments.source_relation,\n        row_number() over(partition by payments.payment_id, payments.source_relation \n            order by payments.source_relation, payments.transaction_date) - 1 as index,\n        payments.transaction_date,\n        payments.total_amount as amount,\n        (payments.total_amount * coalesce(payments.exchange_rate, 1)) as converted_amount,\n        payments.deposit_to_account_id,\n        payments.receivable_account_id,\n        payments.customer_id,\n        payments.currency_id\n    from payments\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        payment_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        deposit_to_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source\n    from payment_join\n\n    union all\n\n    select\n        transaction_id,\n        payment_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        coalesce(receivable_account_id, ar_accounts.account_id) as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source\n    from payment_join\n\n    left join ar_accounts\n        on ar_accounts.currency_id = payment_join.currency_id\n        and ar_accounts.source_relation = payment_join.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__payment_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.668216Z", "completed_at": "2024-07-16T07:38:27.672741Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.677427Z", "completed_at": "2024-07-16T07:38:27.677431Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016788005828857422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_payment_id__source_relation.1998a8282e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment\"\n    group by payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.673527Z", "completed_at": "2024-07-16T07:38:27.678128Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.682416Z", "completed_at": "2024-07-16T07:38:27.682421Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01407003402709961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id.ca2c1ef54f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment\"\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.678856Z", "completed_at": "2024-07-16T07:38:27.683020Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.690383Z", "completed_at": "2024-07-16T07:38:27.690387Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014874935150146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__purchase_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to a specified expense account and a credit record to the payment account.\n*/\nwith purchases as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase\"\n),\n\npurchase_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.expense_account_id as parent_expense_account_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\npurchase_join as (\n\n    select\n        purchases.purchase_id as transaction_id,\n        purchases.source_relation,\n        purchase_lines.index,\n        purchases.transaction_date,\n        purchase_lines.amount,\n        (purchase_lines.amount * coalesce(purchases.exchange_rate, 1)) as converted_amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, false) = true then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, false) = true then 'credit' else 'debit' end as payed_to_transaction_type,\n        purchases.customer_id,\n        coalesce(purchase_lines.item_expense_class_id, purchase_lines.account_expense_class_id) as class_id,\n        purchases.vendor_id,\n        purchases.department_id\n    from purchases\n\n    inner join purchase_lines\n        on purchases.purchase_id = purchase_lines.purchase_id\n        and purchases.source_relation = purchase_lines.source_relation\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.item_id\n        and purchase_lines.source_relation = items.source_relation\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payed_from_account_id as account_id,\n        class_id,\n        department_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payed_to_account_id as account_id,\n        class_id,\n        department_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source\n    from purchase_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__purchase_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.683248Z", "completed_at": "2024-07-16T07:38:27.690151Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.691891Z", "completed_at": "2024-07-16T07:38:27.691894Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014015913009643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__purchase_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_purchase variable within your dbt_project.yml file to False.\n\n\nwith purchases as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase\"\n),\n\nitems as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\npurchase_lines as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_line\"\n),\n\nfinal as (\n    select\n        purchases.purchase_id as transaction_id,\n        purchases.source_relation,\n        purchase_lines.index as transaction_line_id,\n        purchases.doc_number,\n        'purchase' as transaction_type,\n        purchases.transaction_date,\n        coalesce(purchase_lines.account_expense_account_id, items.expense_account_id) as account_id,\n        purchase_lines.account_expense_class_id as class_id,\n        purchases.department_id,\n        coalesce(purchases.customer_id, account_expense_customer_id, item_expense_customer_id) as customer_id,\n        purchases.vendor_id,\n        coalesce(purchase_lines.account_expense_billable_status, purchase_lines.item_expense_billable_status) as billable_status,\n        purchase_lines.description,\n        case when coalesce(purchases.credit, false)\n            then -1 * purchase_lines.amount\n            else purchase_lines.amount\n        end as amount,\n        case when coalesce(purchases.credit, false)\n            then purchase_lines.amount * coalesce(-purchases.exchange_rate, -1)\n            else purchase_lines.amount * coalesce(purchases.exchange_rate, 1)\n        end as converted_amount,\n        case when coalesce(purchases.credit, false) \n            then -1 * purchases.total_amount\n            else purchases.total_amount\n        end as total_amount,\n        case when coalesce(purchases.credit, false) \n            then purchases.total_amount * coalesce(-purchases.exchange_rate, -1)\n            else purchases.total_amount * coalesce(purchases.exchange_rate, 1)\n        end as total_converted_amount\n    from purchases\n\n    inner join purchase_lines \n        on purchases.purchase_id = purchase_lines.purchase_id\n        and purchases.source_relation = purchase_lines.source_relation\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.item_id\n        and purchase_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__purchase_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.686707Z", "completed_at": "2024-07-16T07:38:27.692105Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.696440Z", "completed_at": "2024-07-16T07:38:27.696443Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01491093635559082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_line_purchase_id__index__source_relation.a23c661eb5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_line\"\n    group by purchase_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.692602Z", "completed_at": "2024-07-16T07:38:27.696889Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.701485Z", "completed_at": "2024-07-16T07:38:27.701489Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014274835586547852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id.5406fca79c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_line\"\nwhere purchase_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.697881Z", "completed_at": "2024-07-16T07:38:27.704515Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.709027Z", "completed_at": "2024-07-16T07:38:27.709032Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014221906661987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_line_refund_id__index__source_relation.614411eb40", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\"\n    group by refund_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.701729Z", "completed_at": "2024-07-16T07:38:27.705905Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.710519Z", "completed_at": "2024-07-16T07:38:27.710522Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017615318298339844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id.57df809b80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\"\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.706152Z", "completed_at": "2024-07-16T07:38:27.710873Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.715861Z", "completed_at": "2024-07-16T07:38:27.715865Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012813091278076172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_sales_receipt_id__source_relation.36bdbcffde", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt\"\n    group by sales_receipt_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.711357Z", "completed_at": "2024-07-16T07:38:27.716283Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.720882Z", "completed_at": "2024-07-16T07:38:27.720886Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015258073806762695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id.b97c1a238a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt\"\nwhere sales_receipt_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.717283Z", "completed_at": "2024-07-16T07:38:27.723793Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.725780Z", "completed_at": "2024-07-16T07:38:27.725784Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014428853988647461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__refund_receipt_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified asset account and a credit record the specified cash account.\n*/\n\n--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith refund_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt\"\n),\n\nrefund_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nrefund_receipt_join as (\n\n    select\n        refund_receipts.refund_id as transaction_id,\n        refund_receipts.source_relation,\n        refund_receipt_lines.index,\n        refund_receipts.transaction_date,\n        refund_receipt_lines.amount,\n        (refund_receipt_lines.amount * coalesce(refund_receipts.exchange_rate, 1)) as converted_amount,\n        refund_receipts.deposit_to_account_id as credit_to_account_id,\n        coalesce(refund_receipt_lines.discount_account_id, refund_receipt_lines.sales_item_account_id, items.parent_income_account_id, items.income_account_id) as debit_account_id,\n        refund_receipts.customer_id,\n        coalesce(refund_receipt_lines.sales_item_class_id, refund_receipt_lines.discount_class_id, refund_receipts.class_id) as class_id,\n        refund_receipts.department_id\n    from refund_receipts\n\n    inner join refund_receipt_lines\n        on refund_receipts.refund_id = refund_receipt_lines.refund_id\n        and refund_receipts.source_relation = refund_receipt_lines.source_relation\n\n    left join items\n        on refund_receipt_lines.sales_item_item_id = items.item_id\n        and refund_receipt_lines.source_relation = items.source_relation\n\n    where coalesce(refund_receipt_lines.discount_account_id, refund_receipt_lines.sales_item_account_id, refund_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        credit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'refund_receipt' as transaction_source\n    from refund_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        debit_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'refund_receipt' as transaction_source\n    from refund_receipt_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__refund_receipt_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.721151Z", "completed_at": "2024-07-16T07:38:27.725540Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.730218Z", "completed_at": "2024-07-16T07:38:27.730221Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017284154891967773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__refund_receipt_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith refund_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt\"\n),\n\nrefund_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        refund_receipts.refund_id as transaction_id,\n        refund_receipts.source_relation,\n        refund_receipt_lines.index as transaction_line_id,\n        refund_receipts.doc_number,\n        'refund_receipt' as transaction_type,\n        refund_receipts.transaction_date,\n        refund_receipt_lines.sales_item_item_id as item_id,\n        refund_receipt_lines.sales_item_quantity as item_quantity,\n        refund_receipt_lines.sales_item_unit_price as item_unit_price,\n        case when refund_receipt_lines.sales_item_account_id is null\n            then coalesce(items.asset_account_id, items.income_account_id, items.expense_account_id) \n            else refund_receipt_lines.sales_item_account_id\n                end as account_id,\n        refund_receipts.class_id,\n        refund_receipts.department_id,\n        refund_receipts.customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        refund_receipt_lines.description,\n        refund_receipt_lines.amount * -1 as amount,\n        refund_receipt_lines.amount * coalesce(-refund_receipts.exchange_rate, -1) as converted_amount,\n        refund_receipts.total_amount * -1 as total_amount,\n        refund_receipts.total_amount * coalesce(-refund_receipts.exchange_rate, -1) as total_converted_amount\n    from refund_receipts\n\n    inner join refund_receipt_lines\n        on refund_receipts.refund_id = refund_receipt_lines.refund_id\n        and refund_receipts.source_relation = refund_receipt_lines.source_relation\n\n    left join items\n        on refund_receipt_lines.sales_item_item_id = items.item_id\n        and refund_receipt_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__refund_receipt_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.726019Z", "completed_at": "2024-07-16T07:38:27.730687Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.735381Z", "completed_at": "2024-07-16T07:38:27.735385Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014854192733764648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__sales_receipt_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified cash account and a credit record to the specified asset account.\n*/\n\n--To disable this model, set the using_sales_receipt variable within your dbt_project.yml file to False.\n\n\nwith sales_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt\"\n),\n\nsales_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nsales_receipt_join as (\n\n    select\n        sales_receipts.sales_receipt_id as transaction_id,\n        sales_receipts.source_relation,\n        sales_receipt_lines.index,\n        sales_receipts.transaction_date,\n        case \n            when sales_receipt_lines.discount_account_id is not null \n                then sales_receipt_lines.amount * (-1)\n            else sales_receipt_lines.amount\n        end as amount,\n        case when sales_receipt_lines.discount_account_id is not null \n                then (sales_receipt_lines.amount * coalesce(-sales_receipts.exchange_rate, -1))\n            else (sales_receipt_lines.amount * coalesce(sales_receipts.exchange_rate, 1))\n        end as converted_amount,\n        sales_receipts.deposit_to_account_id as debit_to_account_id,\n        coalesce(sales_receipt_lines.discount_account_id, sales_receipt_lines.sales_item_account_id, items.parent_income_account_id, items.income_account_id) as credit_to_account_id,\n        sales_receipts.customer_id,\n        coalesce(sales_receipt_lines.sales_item_class_id, sales_receipt_lines.discount_class_id, sales_receipts.class_id) as class_id,\n        sales_receipts.department_id\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts.sales_receipt_id = sales_receipt_lines.sales_receipt_id\n        and sales_receipts.source_relation = sales_receipt_lines.source_relation\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.item_id\n        and sales_receipt_lines.source_relation = items.source_relation\n\n    where coalesce(sales_receipt_lines.discount_account_id, sales_receipt_lines.sales_item_account_id, sales_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        debit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'sales_receipt' as transaction_source\n    from sales_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        credit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'sales_receipt' as transaction_source\n    from sales_receipt_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__sales_receipt_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.730929Z", "completed_at": "2024-07-16T07:38:27.735149Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.739426Z", "completed_at": "2024-07-16T07:38:27.739430Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01488804817199707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__sales_receipt_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_sales_receipt variable within your dbt_project.yml file to False.\n\n\nwith sales_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt\"\n),\n\nsales_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        sales_receipts.sales_receipt_id as transaction_id,\n        sales_receipts.source_relation,\n        sales_receipt_lines.index as transaction_line_id,\n        sales_receipts.doc_number,\n        'sales_receipt' as transaction_type,\n        sales_receipts.transaction_date,\n        sales_receipt_lines.sales_item_item_id as item_id,\n        sales_receipt_lines.sales_item_quantity as item_quantity,\n        sales_receipt_lines.sales_item_unit_price as item_unit_price,\n        coalesce(items.income_account_id, items.asset_account_id, items.expense_account_id) as account_id,\n        sales_receipts.class_id,\n        sales_receipts.department_id,\n        sales_receipts.customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        sales_receipt_lines.description,\n        sales_receipt_lines.amount,\n        sales_receipt_lines.amount * (coalesce(sales_receipts.exchange_rate, 1)) as converted_amount,\n        sales_receipts.total_amount,\n        sales_receipts.total_amount * (coalesce(sales_receipts.exchange_rate, 1)) as total_converted_amount\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts.sales_receipt_id = sales_receipt_lines.sales_receipt_id   \n        and sales_receipts.source_relation = sales_receipt_lines.source_relation\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.item_id\n        and sales_receipt_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__sales_receipt_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.735964Z", "completed_at": "2024-07-16T07:38:27.743431Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.745482Z", "completed_at": "2024-07-16T07:38:27.745486Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014811038970947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_refund_id__source_relation.60f976841d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt\"\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.739954Z", "completed_at": "2024-07-16T07:38:27.745047Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.749435Z", "completed_at": "2024-07-16T07:38:27.749439Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016937255859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_line_sales_receipt_id__index__source_relation.20e80dcbd5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\"\n    group by sales_receipt_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.746284Z", "completed_at": "2024-07-16T07:38:27.753182Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.758600Z", "completed_at": "2024-07-16T07:38:27.758605Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015367984771728516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id.29e8a8216e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt\"\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.749982Z", "completed_at": "2024-07-16T07:38:27.753905Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.759091Z", "completed_at": "2024-07-16T07:38:27.759094Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017342805862426758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.9be0667fc3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\"\nwhere sales_receipt_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.754658Z", "completed_at": "2024-07-16T07:38:27.759820Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.764497Z", "completed_at": "2024-07-16T07:38:27.764501Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012742280960083008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__transfer_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the receiveing account and a credit record to the sending account.\n*/\n\n--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith transfers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__transfer\"\n),\n\ntransfer_body as (\n\n    select\n        transfer_id as transaction_id,\n        source_relation,\n        row_number() over(partition by transfer_id, source_relation \n            order by source_relation, transaction_date) - 1 as index,\n        transaction_date,\n        amount,\n        amount as converted_amount,\n        from_account_id as credit_to_account_id,\n        to_account_id as debit_to_account_id\n    from transfers\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        credit_to_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'credit' as transaction_type,\n        'transfer' as transaction_source\n    from transfer_body\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        debit_to_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'debit' as transaction_type,\n        'transfer' as transaction_source\n    from transfer_body\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__transfer_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.760038Z", "completed_at": "2024-07-16T07:38:27.764728Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.769899Z", "completed_at": "2024-07-16T07:38:27.769903Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01878499984741211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__transfer_transfer_id__source_relation.bfa4c7345e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__transfer\"\n    group by transfer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.766287Z", "completed_at": "2024-07-16T07:38:27.773656Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.777556Z", "completed_at": "2024-07-16T07:38:27.777560Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014456033706665039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id.c1c80a253c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transfer_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__transfer\"\nwhere transfer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.770146Z", "completed_at": "2024-07-16T07:38:27.774152Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.778015Z", "completed_at": "2024-07-16T07:38:27.778018Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016309022903442383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id.1275a5ab5a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_credit_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit\"\nwhere vendor_credit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.774385Z", "completed_at": "2024-07-16T07:38:27.778228Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.782315Z", "completed_at": "2024-07-16T07:38:27.782318Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010977745056152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__vendor_credit_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to payable account and a credit record to the expense account.\n*/\n\n--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith vendor_credits as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit\"\n),\n\nvendor_credit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nvendor_credit_join as (\n\n    select\n        vendor_credits.vendor_credit_id as transaction_id,\n        vendor_credits.source_relation,\n        vendor_credit_lines.index,\n        vendor_credits.transaction_date,\n        vendor_credit_lines.amount,\n        (vendor_credit_lines.amount * coalesce(vendor_credits.exchange_rate, 1)) as converted_amount,\n        vendor_credits.payable_account_id as debit_to_account_id,\n        coalesce(vendor_credit_lines.account_expense_account_id, items.parent_income_account_id, items.income_account_id, items.expense_account_id) as credit_account_id,\n        coalesce(account_expense_customer_id, item_expense_customer_id) as customer_id,\n        coalesce(item_expense_class_id, account_expense_class_id) as class_id,\n        vendor_credits.vendor_id,\n        vendor_credits.department_id\n    from vendor_credits\n\n    inner join vendor_credit_lines\n        on vendor_credits.vendor_credit_id = vendor_credit_lines.vendor_credit_id\n        and vendor_credits.source_relation = vendor_credit_lines.source_relation\n\n    left join items\n        on vendor_credit_lines.item_expense_item_id = items.item_id\n        and vendor_credit_lines.source_relation = items.source_relation\n),\n\nfinal as (\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        credit_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'vendor_credit' as transaction_source\n    from vendor_credit_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        debit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'vendor_credit' as transaction_source\n    from vendor_credit_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__vendor_credit_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.778897Z", "completed_at": "2024-07-16T07:38:27.782533Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.784720Z", "completed_at": "2024-07-16T07:38:27.784724Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014988183975219727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__vendor_credit_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith vendor_credits as (\n    \n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit\"\n),\n\nvendor_credit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        vendor_credits.vendor_credit_id as transaction_id,\n        vendor_credits.source_relation,\n        vendor_credit_lines.index as transaction_line_id,\n        vendor_credits.doc_number,\n        'vendor_credit' as transaction_type,\n        vendor_credits.transaction_date,\n        case when vendor_credit_lines.account_expense_account_id is null\n            then items.expense_account_id\n            else vendor_credit_lines.account_expense_account_id\n                end as account_id,\n        coalesce(vendor_credit_lines.account_expense_class_id, vendor_credit_lines.item_expense_class_id) as class_id,\n        vendor_credits.department_id,\n        coalesce(vendor_credit_lines.account_expense_customer_id, vendor_credit_lines.item_expense_customer_id) as customer_id,\n        vendor_credits.vendor_id,\n        coalesce(vendor_credit_lines.account_expense_billable_status, vendor_credit_lines.item_expense_billable_status) as billable_status,\n        vendor_credit_lines.description,\n        vendor_credit_lines.amount * -1 as amount,\n        vendor_credit_lines.amount * coalesce(-vendor_credits.exchange_rate, -1) as converted_amount,\n        vendor_credits.total_amount * -1 as total_amount,\n        vendor_credits.total_amount * coalesce(-vendor_credits.exchange_rate, -1) as total_converted_amount\n    from vendor_credits\n\n    inner join vendor_credit_lines\n        on vendor_credits.vendor_credit_id = vendor_credit_lines.vendor_credit_id\n        and vendor_credits.source_relation = vendor_credit_lines.source_relation\n\n    left join items\n        on vendor_credit_lines.item_expense_item_id = items.item_id\n        and vendor_credit_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__vendor_credit_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.787864Z", "completed_at": "2024-07-16T07:38:27.792884Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.796898Z", "completed_at": "2024-07-16T07:38:27.796902Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.021026134490966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_vendor_id__source_relation.4960d9d21a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor\"\n    group by vendor_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.784957Z", "completed_at": "2024-07-16T07:38:27.793118Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.797154Z", "completed_at": "2024-07-16T07:38:27.797157Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02883601188659668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_credit_line_vendor_credit_id__index__source_relation.094b35ac4d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_credit_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line\"\n    group by vendor_credit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.793376Z", "completed_at": "2024-07-16T07:38:27.797371Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.812679Z", "completed_at": "2024-07-16T07:38:27.812683Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02251911163330078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id.f509a77195", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor\"\nwhere vendor_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.797590Z", "completed_at": "2024-07-16T07:38:27.813624Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.833982Z", "completed_at": "2024-07-16T07:38:27.833990Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04601311683654785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__ap_ar_enhanced", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_invoice variable within your dbt_project.yml file to False.\n\n\nwith bill_join as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_join\"\n),\n\n\ninvoice_join as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__invoice_join\"\n),\n\n\n\ndepartments as ( \n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__department\"\n),\n\n\n\naddresses as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__address\"\n),\n\n\ncustomers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__customer\"\n),\n\nvendors as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor\"\n),\n\nfinal as (\n\n    select\n        bill_join.transaction_type,\n        bill_join.transaction_id,\n        bill_join.source_relation,\n        doc_number,\n        cast(null as TEXT) as estimate_id, \n\n        \n        departments.fully_qualified_name as department_name,\n        \n\n        'vendor' as transaction_with,\n        vendors.display_name as customer_vendor_name,\n        vendors.balance as customer_vendor_balance,\n\n        \n        billing_address.city as customer_vendor_address_city,\n        billing_address.country as customer_vendor_address_country,\n        concat(billing_address.address_1, billing_address.address_2) as customer_vendor_address_line,\n        \n        \n        vendors.web_url as customer_vendor_website,\n        cast(null as TEXT) as delivery_type,\n        cast(null as TEXT) as estimate_status,\n        bill_join.total_amount,\n        bill_join.total_converted_amount,\n        cast(null as numeric(28,6)) as estimate_total_amount,\n        cast(null as numeric(28,6)) as estimate_total_converted_amount,\n        bill_join.current_balance,\n        bill_join.due_date,\n        case when bill_join.current_balance != 0 and \n        ((bill_join.due_date)::date - (bill_join.recent_payment_date)::date)\n     < 0\n            then true\n            else false\n                end as is_overdue,\n        case when bill_join.current_balance != 0 and \n        ((bill_join.due_date)::date - (bill_join.recent_payment_date)::date)\n     < 0\n            then \n        ((bill_join.due_date)::date - (bill_join.recent_payment_date)::date)\n     * -1\n            else 0\n                end as days_overdue,\n        bill_join.initial_payment_date,\n        bill_join.recent_payment_date,\n        bill_join.total_current_payment,\n        bill_join.total_current_converted_payment\n    from bill_join\n\n    \n    left join departments  \n        on bill_join.department_id = departments.department_id\n        and bill_join.source_relation = departments.source_relation\n    \n\n    left join vendors\n        on bill_join.vendor_id = vendors.vendor_id\n        and bill_join.source_relation = vendors.source_relation\n    \n    \n    left join addresses as billing_address\n        on vendors.billing_address_id = billing_address.address_id\n        and vendors.source_relation = billing_address.source_relation\n    \n    \n    \n    union all\n\n    select \n        invoice_join.transaction_type,\n        invoice_join.transaction_id,\n        invoice_join.source_relation,\n        doc_number,\n        invoice_join.estimate_id,\n\n        \n        departments.fully_qualified_name as department_name,\n        \n\n        'customer' as transaction_with,\n        customers.fully_qualified_name as customer_vendor_name,\n        customers.balance as customer_vendor_current_balance,\n\n        \n        billing_address.city as customer_vendor_address_city,\n        billing_address.country as customer_vendor_address_country,\n        concat(billing_address.address_1, billing_address.address_2) as customer_vendor_address_line,\n        \n\n        customers.website as customer_vendor_website,\n        invoice_join.delivery_type,\n        invoice_join.estimate_status,\n        invoice_join.total_amount as total_amount,\n        invoice_join.total_converted_amount,\n        invoice_join.estimate_total_amount as estimate_total_amount,\n        invoice_join.estimate_total_converted_amount as estimate_total_converted_amount,\n        invoice_join.current_balance as current_balance,\n        invoice_join.due_date,\n        case when invoice_join.current_balance != 0 and \n        ((invoice_join.due_date)::date - (invoice_join.recent_payment_date)::date)\n     < 0\n            then true\n            else false\n                end as is_overdue,\n        case when invoice_join.current_balance != 0 and \n        ((invoice_join.due_date)::date - (invoice_join.recent_payment_date)::date)\n     < 0\n            then \n        ((invoice_join.due_date)::date - (invoice_join.recent_payment_date)::date)\n     * -1\n            else 0\n                end as days_overdue,\n        invoice_join.initial_payment_date,\n        invoice_join.recent_payment_date,\n        invoice_join.total_current_payment as total_current_payment,\n        invoice_join.total_current_converted_payment\n\n    from invoice_join\n\n    \n    left join departments  \n        on invoice_join.department_id = departments.department_id\n        and invoice_join.source_relation = departments.source_relation\n    \n\n    \n    left join addresses as billing_address\n        on invoice_join.billing_address_id = billing_address.address_id\n        and invoice_join.source_relation = billing_address.source_relation\n    \n\n    left join customers\n        on invoice_join.customer_id = customers.customer_id\n        and invoice_join.source_relation = customers.source_relation\n\n    \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__ap_ar_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.815047Z", "completed_at": "2024-07-16T07:38:27.842993Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.848693Z", "completed_at": "2024-07-16T07:38:27.848698Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0365450382232666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__sales_union", "compiled": true, "compiled_code": "\n\nwith sales_union as (\n\n    \n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__sales_receipt_transactions\"\n    \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__invoice_transactions\"\n\n    \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__refund_receipt_transactions\"\n    \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__credit_memo_transactions\"\n    \n),\n\ncustomers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__customer\"\n),\n\n\ndepartments as ( \n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__department\"\n),\n\n\nvendors as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor\"\n),\n\nincome_accounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__account_classifications\"\n    where account_type = 'Income'\n),\n\nfinal as (\n\n    select \n        'sales' as transaction_source,\n        sales_union.transaction_id,\n        sales_union.source_relation,\n        sales_union.transaction_line_id,\n        sales_union.doc_number,\n        sales_union.transaction_type,\n        sales_union.transaction_date,\n        sales_union.item_id,\n        sales_union.item_quantity,\n        sales_union.item_unit_price,\n        sales_union.account_id,\n        income_accounts.name as account_name,\n        income_accounts.account_sub_type as account_sub_type,\n        sales_union.class_id,\n        sales_union.department_id,\n        \n        departments.fully_qualified_name as department_name,\n        \n        sales_union.customer_id,\n        customers.fully_qualified_name as customer_name,\n        customers.website as customer_website,\n        sales_union.vendor_id,\n        vendors.display_name as vendor_name,\n        sales_union.billable_status,\n        sales_union.description,\n        sales_union.amount,\n        sales_union.converted_amount,\n        sales_union.total_amount,\n        sales_union.total_converted_amount\n    from sales_union\n\n    inner join income_accounts\n        on sales_union.account_id = income_accounts.account_id\n        and sales_union.source_relation = income_accounts.source_relation\n\n    left join customers\n        on customers.customer_id = sales_union.customer_id\n        and customers.source_relation = sales_union.source_relation\n\n    left join vendors\n        on vendors.vendor_id = sales_union.vendor_id\n        and vendors.source_relation = sales_union.source_relation\n\n    \n    left join departments\n        on departments.department_id = sales_union.department_id\n        and departments.source_relation = sales_union.source_relation\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__sales_union\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.843230Z", "completed_at": "2024-07-16T07:38:27.848931Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.852943Z", "completed_at": "2024-07-16T07:38:27.852947Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012122154235839844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__expenses_union", "compiled": true, "compiled_code": "with expense_union as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__purchase_transactions\"\n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_transactions\"\n     \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__journal_entry_transactions\"\n     \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__deposit_transactions\"\n     \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__vendor_credit_transactions\"\n    \n),\n\ncustomers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__customer\"\n),\n\n\ndepartments as ( \n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__department\"\n),\n\n\nvendors as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor\"\n),\n\nexpense_accounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__account_classifications\"\n    where account_type = 'Expense'\n),\n\nfinal as (\n\n    select \n        'expense' as transaction_source,\n        expense_union.transaction_id,\n        expense_union.source_relation,\n        expense_union.transaction_line_id,\n        expense_union.doc_number,\n        expense_union.transaction_type,\n        expense_union.transaction_date,\n        cast(null as TEXT) as item_id,\n        cast(null as numeric(28,6)) as item_quantity,\n        cast(null as numeric(28,6)) as item_unit_price,\n        expense_union.account_id,\n        expense_accounts.name as account_name,\n        expense_accounts.account_sub_type as account_sub_type,\n        expense_union.class_id,\n        expense_union.department_id,\n        \n        departments.fully_qualified_name as department_name,\n        \n        expense_union.customer_id,\n        customers.fully_qualified_name as customer_name,\n        customers.website as customer_website,\n        expense_union.vendor_id,\n        vendors.display_name as vendor_name,\n        expense_union.billable_status,\n        expense_union.description,\n        expense_union.amount,\n        expense_union.converted_amount,\n        expense_union.total_amount,\n        expense_union.total_converted_amount\n\n    from expense_union\n\n    inner join expense_accounts\n        on expense_union.account_id = expense_accounts.account_id\n        and expense_union.source_relation = expense_accounts.source_relation\n\n    left join customers\n        on customers.customer_id = expense_union.customer_id\n        and customers.source_relation = expense_union.source_relation\n\n    left join vendors\n        on vendors.vendor_id = expense_union.vendor_id\n        and vendors.source_relation = expense_union.source_relation\n\n    \n    left join departments\n        on departments.department_id = expense_union.department_id\n        and departments.source_relation = expense_union.source_relation\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__expenses_union\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.850033Z", "completed_at": "2024-07-16T07:38:27.857013Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.857495Z", "completed_at": "2024-07-16T07:38:27.857500Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009567975997924805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__ap_ar_enhanced_transaction_id__source_relation__estimate_id.804c1f0bcf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation, estimate_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__ap_ar_enhanced\"\n    group by transaction_id, source_relation, estimate_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.854635Z", "completed_at": "2024-07-16T07:38:27.858220Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.858643Z", "completed_at": "2024-07-16T07:38:27.858646Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004956960678100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__expenses_sales_enhanced", "compiled": true, "compiled_code": "with expenses as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__expenses_union\"\n),\n\n\nsales as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__sales_union\"\n),\n\n\nfinal as (\n    \n    select *\n    from expenses\n\n    \n    union all\n\n    select *\n    from sales\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__expenses_sales_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.860072Z", "completed_at": "2024-07-16T07:38:27.863889Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:27.864348Z", "completed_at": "2024-07-16T07:38:27.864352Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005177021026611328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__expenses_sales_enhanced_transaction_id__source_relation__transaction_line_id__item_id.b57775bacb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation, transaction_line_id, item_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__expenses_sales_enhanced\"\n    group by transaction_id, source_relation, transaction_line_id, item_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:27.821313Z", "completed_at": "2024-07-16T07:38:30.260359Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:30.260823Z", "completed_at": "2024-07-16T07:38:30.260829Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.5589468479156494, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__general_ledger", "compiled": true, "compiled_code": "with unioned_models as (\n\n    \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__purchase_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as text) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as double precision) as \"amount\" ,\n                    cast(\"converted_amount\" as double precision) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__purchase_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as text) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as double precision) as \"amount\" ,\n                    cast(\"converted_amount\" as double precision) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__credit_memo_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as text) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as double precision) as \"amount\" ,\n                    cast(\"converted_amount\" as double precision) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__credit_memo_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__deposit_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as text) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as double precision) as \"amount\" ,\n                    cast(\"converted_amount\" as double precision) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__deposit_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__invoice_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as text) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as double precision) as \"amount\" ,\n                    cast(\"converted_amount\" as double precision) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__invoice_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__journal_entry_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as text) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as double precision) as \"amount\" ,\n                    cast(\"converted_amount\" as double precision) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__journal_entry_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__payment_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as text) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as double precision) as \"amount\" ,\n                    cast(\"converted_amount\" as double precision) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__payment_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__refund_receipt_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as text) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as double precision) as \"amount\" ,\n                    cast(\"converted_amount\" as double precision) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__refund_receipt_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__sales_receipt_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as text) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as double precision) as \"amount\" ,\n                    cast(\"converted_amount\" as double precision) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__sales_receipt_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__transfer_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as text) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as double precision) as \"amount\" ,\n                    cast(\"converted_amount\" as double precision) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__transfer_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__vendor_credit_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as text) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as double precision) as \"amount\" ,\n                    cast(\"converted_amount\" as double precision) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__vendor_credit_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_payment_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as text) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as double precision) as \"amount\" ,\n                    cast(\"converted_amount\" as double precision) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_payment_double_entry\"\n\n            \n        )\n\n        \n),\n\ngl_union as (\n\n    select transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        account_id,\n        class_id,\n        department_id,\n        transaction_type,\n        transaction_source \n    from unioned_models\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__account_classifications\"\n),\n\n\nadjusted_gl as (\n    \n    select\n        md5(cast(coalesce(cast(gl_union.transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.index as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast( gl_union.transaction_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.transaction_source as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) \n            as unique_id,\n        gl_union.transaction_id,\n        gl_union.source_relation,\n        gl_union.index as transaction_index,\n        gl_union.transaction_date,\n        gl_union.customer_id,\n        gl_union.vendor_id,\n        gl_union.amount,\n        gl_union.account_id,\n        gl_union.class_id,\n        gl_union.department_id,\n        accounts.account_number,\n        accounts.name as account_name,\n        accounts.is_sub_account,\n        accounts.parent_account_number,\n        accounts.parent_account_name,\n        accounts.account_type,\n        accounts.account_sub_type,\n        accounts.financial_statement_helper,\n        accounts.balance as account_current_balance,\n        accounts.classification as account_class,\n        gl_union.transaction_type,\n        gl_union.transaction_source,\n        accounts.transaction_type as account_transaction_type,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then gl_union.amount\n            else gl_union.amount * -1\n        end as adjusted_amount,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then gl_union.converted_amount\n            else gl_union.converted_amount * -1\n        end as adjusted_converted_amount\n    from gl_union\n\n    left join accounts\n        on gl_union.account_id = accounts.account_id\n        and gl_union.source_relation = accounts.source_relation\n),\n\nfinal as (\n\n    select\n        *,\n        sum(adjusted_amount) over (partition by account_id, class_id, source_relation\n            order by source_relation, transaction_date, account_id, class_id rows unbounded preceding) as running_balance,\n        sum(adjusted_amount) over (partition by account_id, class_id, source_relation\n            order by source_relation, transaction_date, account_id, class_id rows unbounded preceding) as running_converted_balance\n    from adjusted_gl\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:30.402786Z", "completed_at": "2024-07-16T07:38:30.409333Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:30.409788Z", "completed_at": "2024-07-16T07:38:30.409795Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.029024839401245117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.not_null_quickbooks__general_ledger_unique_id.06732be667", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger\"\nwhere unique_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:30.405246Z", "completed_at": "2024-07-16T07:38:30.410507Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:30.411073Z", "completed_at": "2024-07-16T07:38:30.411077Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.029319047927856445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.unique_quickbooks__general_ledger_unique_id.df148e7545", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unique_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger\"\nwhere unique_id is not null\ngroup by unique_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:30.383082Z", "completed_at": "2024-07-16T07:38:32.058908Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:32.059412Z", "completed_at": "2024-07-16T07:38:32.059424Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.7966949939727783, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__general_ledger_date_spine", "compiled": true, "compiled_code": "-- depends_on: \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger\"\n\nwith spine as (\n\n    \n    \n    \n    \n        \n            \n\n        \n\n    \n\n    \n    \n\n    \n\n     \n    \n        \n    \n        \n\n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2.0\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2024-06-16' as date) + ((interval '1 month') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_month\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_month <= \n\n    cast('2024-07-16' as date) + ((interval '1 month') * (1))\n\n\n\n)\n\nselect * from filtered\n\n\n),\n\ngeneral_ledger as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger\"\n),\n\ndate_spine as (\n    select\n        cast(date_trunc('year', date_month) as date) as date_year,\n        cast(date_trunc('month', date_month) as date) as period_first_day,\n        cast(\n        \n\n    \n\n    date_trunc('month', date_month) + ((interval '1 month') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date) as period_last_day,\n        row_number() over (order by cast(date_trunc('month', date_month) as date)) as period_index\n    from spine\n),\n\nfinal as (\n    select distinct\n        general_ledger.account_id,\n        general_ledger.source_relation,\n        general_ledger.account_number,\n        general_ledger.account_name,\n        general_ledger.is_sub_account,\n        general_ledger.parent_account_number,\n        general_ledger.parent_account_name,\n        general_ledger.account_type,\n        general_ledger.account_sub_type,\n        general_ledger.account_class,\n        general_ledger.financial_statement_helper,\n        general_ledger.class_id,\n        date_spine.date_year,\n        date_spine.period_first_day,\n        date_spine.period_last_day,\n        date_spine.period_index\n    from general_ledger\n\n    cross join date_spine\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__general_ledger_date_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:32.183094Z", "completed_at": "2024-07-16T07:38:32.194097Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:32.194576Z", "completed_at": "2024-07-16T07:38:32.194580Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015332698822021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__general_ledger_balances", "compiled": true, "compiled_code": "with general_ledger as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger\"\n),\n\ngl_accounting_periods as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__general_ledger_date_spine\"\n),\n\ngl_period_balance as (\n\n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        class_id,\n        cast(date_trunc('year', transaction_date) as date) as date_year,\n        cast(date_trunc('month', transaction_date) as date) as date_month,\n        sum(adjusted_amount) as period_balance,\n        sum(adjusted_converted_amount) as period_converted_balance\n    from general_ledger\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14\n),\n\ngl_cumulative_balance as (\n\n    select\n        *,\n        case when financial_statement_helper = 'balance_sheet'\n            then sum(period_balance) over (partition by account_id, class_id, source_relation \n            order by source_relation, date_month, account_id, class_id rows unbounded preceding) \n            else 0\n                end as cumulative_balance,\n        case when financial_statement_helper = 'balance_sheet'\n            then sum(period_balance) over (partition by account_id, class_id, source_relation \n            order by source_relation, date_month, account_id, class_id rows unbounded preceding) \n            else 0\n                end as cumulative_converted_balance\n    from gl_period_balance\n),\n\ngl_beginning_balance as (\n\n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        class_id,\n        date_year,\n        date_month, \n        period_balance as period_net_change,\n        case when financial_statement_helper = 'balance_sheet'\n            then (cumulative_balance - period_balance) \n            else 0\n                end as period_beginning_balance,\n        cumulative_balance as period_ending_balance,\n        period_converted_balance as period_net_converted_change,\n        case when financial_statement_helper = 'balance_sheet'\n            then (cumulative_converted_balance - period_converted_balance) \n            else 0\n                end as period_beginning_converted_balance,\n        cumulative_converted_balance as period_ending_converted_balance\n    from gl_cumulative_balance\n),\n\ngl_patch as (\n\n    select \n        coalesce(gl_beginning_balance.account_id, gl_accounting_periods.account_id) as account_id,\n        coalesce(gl_beginning_balance.source_relation, gl_accounting_periods.source_relation) as source_relation,\n        coalesce(gl_beginning_balance.account_number, gl_accounting_periods.account_number) as account_number,\n        coalesce(gl_beginning_balance.account_name, gl_accounting_periods.account_name) as account_name,\n        coalesce(gl_beginning_balance.is_sub_account, gl_accounting_periods.is_sub_account) as is_sub_account,\n        coalesce(gl_beginning_balance.parent_account_number, gl_accounting_periods.parent_account_number) as parent_account_number,\n        coalesce(gl_beginning_balance.parent_account_name, gl_accounting_periods.parent_account_name) as parent_account_name,\n        coalesce(gl_beginning_balance.account_type, gl_accounting_periods.account_type) as account_type,\n        coalesce(gl_beginning_balance.account_sub_type, gl_accounting_periods.account_sub_type) as account_sub_type,\n        coalesce(gl_beginning_balance.account_class, gl_accounting_periods.account_class) as account_class,\n        coalesce(gl_beginning_balance.class_id, gl_accounting_periods.class_id) as class_id,\n        coalesce(gl_beginning_balance.financial_statement_helper, gl_accounting_periods.financial_statement_helper) as financial_statement_helper,\n        coalesce(gl_beginning_balance.date_year, gl_accounting_periods.date_year) as date_year,\n        gl_accounting_periods.period_first_day,\n        gl_accounting_periods.period_last_day,\n        gl_accounting_periods.period_index,\n        gl_beginning_balance.period_net_change,\n        gl_beginning_balance.period_beginning_balance,\n        gl_beginning_balance.period_ending_balance,\n        case when gl_beginning_balance.period_beginning_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_beginning_balance\n                end as period_beginning_balance_starter,\n        case when gl_beginning_balance.period_ending_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_ending_balance\n                end as period_ending_balance_starter,\n        gl_beginning_balance.period_net_converted_change,\n        gl_beginning_balance.period_beginning_converted_balance,\n        gl_beginning_balance.period_ending_converted_balance,\n        case when gl_beginning_balance.period_beginning_converted_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_beginning_converted_balance\n                end as period_beginning_converted_balance_starter,\n        case when gl_beginning_balance.period_ending_converted_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_ending_converted_balance\n                end as period_ending_converted_balance_starter\n    from gl_accounting_periods\n\n    left join gl_beginning_balance\n        on gl_beginning_balance.account_id = gl_accounting_periods.account_id\n            and gl_beginning_balance.source_relation = gl_accounting_periods.source_relation\n            and gl_beginning_balance.date_month = gl_accounting_periods.period_first_day\n            and gl_beginning_balance.date_year = gl_accounting_periods.date_year\n            and coalesce(gl_beginning_balance.class_id, '0') = coalesce(gl_accounting_periods.class_id, '0')\n),\n\ngl_value_partition as (\n\n    select\n        *,\n        sum(case when period_ending_balance_starter is null \n            then 0 \n            else 1 \n                end) over (order by source_relation, account_id, class_id, period_last_day rows unbounded preceding) as gl_partition,\n        sum(case when period_ending_converted_balance_starter is null \n            then 0 \n            else 1 \n                end) over (order by source_relation, account_id, class_id, period_last_day rows unbounded preceding) as gl_converted_partition\n    from gl_patch\n),\n \nfinal as (\n    \n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        class_id,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        coalesce(period_net_change, 0) as period_net_change,\n        coalesce(period_beginning_balance_starter,\n            first_value(period_ending_balance_starter) over (partition by gl_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_beginning_balance,\n        coalesce(period_ending_balance_starter,\n            first_value(period_ending_balance_starter) over (partition by gl_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_ending_balance,\n        coalesce(period_net_converted_change, 0) as period_net_converted_change,\n        coalesce(period_beginning_converted_balance_starter,\n            first_value(period_ending_converted_balance_starter) over (partition by gl_converted_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_beginning_converted_balance,\n        coalesce(period_ending_converted_balance_starter,\n            first_value(period_ending_converted_balance_starter) over (partition by gl_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_ending_converted_balance\n\n    from gl_value_partition\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__general_ledger_balances\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:32.196307Z", "completed_at": "2024-07-16T07:38:32.202049Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:32.202490Z", "completed_at": "2024-07-16T07:38:32.202494Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007091999053955078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__retained_earnings", "compiled": true, "compiled_code": "with general_ledger_balances as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__general_ledger_balances\"\n),\n\nrevenue_starter as (\n\n    select\n        period_first_day,\n        source_relation,\n        sum(period_net_change) as revenue_net_change,\n        sum(period_net_converted_change) as revenue_net_converted_change\n    from general_ledger_balances\n    \n    where account_class = 'Revenue'\n\n    group by 1,2 \n),\n\nexpense_starter as (\n\n    select \n        period_first_day,\n        source_relation,\n        sum(period_net_change) as expense_net_change,\n        sum(period_net_converted_change) as expense_net_converted_change\n    from general_ledger_balances\n    \n    where account_class = 'Expense'\n\n    group by 1,2 \n),\n\nnet_income_loss as (\n\n    select *\n    from revenue_starter\n\n    join expense_starter \n        using (period_first_day, source_relation)\n),\n\nretained_earnings_starter as (\n\n    select\n        cast('9999' as TEXT) as account_id,\n        source_relation,\n        cast('9999-00' as TEXT) as account_number,\n        cast('Net Income Adjustment' as TEXT) as account_name,\n        false as is_sub_account,\n        cast(null as TEXT) as parent_account_number,\n        cast(null as TEXT) as parent_account_name,\n        cast('Equity' as TEXT) as account_type,\n        cast('RetainedEarnings' as TEXT) as account_sub_type,\n        cast('Equity' as TEXT) as account_class,\n        cast(null as TEXT) as class_id,\n        cast('balance_sheet' as TEXT) as financial_statement_helper,\n        cast(date_trunc('year', period_first_day) as date) as date_year,\n        cast(period_first_day as date) as period_first_day,\n        cast(\n        \n\n    \n\n    date_trunc('month', period_first_day) + ((interval '1 month') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date) as period_last_day,\n        (revenue_net_change - expense_net_change) as period_net_change,\n        (revenue_net_converted_change - expense_net_converted_change) as period_net_converted_change\n    from net_income_loss\n),\n\n\nretained_earnings_beginning as (\n\n    select\n        *,\n        sum(coalesce(period_net_change, 0)) over (order by source_relation, period_first_day, period_first_day rows unbounded preceding) as period_ending_balance,\n        sum(coalesce(period_net_converted_change, 0)) over (order by source_relation, period_first_day, period_first_day rows unbounded preceding) as period_ending_converted_balance\n    from retained_earnings_starter\n),\n\nfinal as (\n    \n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        class_id,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        period_net_change,\n        lag(coalesce(period_ending_balance,0)) over (order by source_relation, period_first_day) as period_beginning_balance,\n        period_ending_balance,\n        period_net_converted_change,\n        lag(coalesce(period_ending_balance,0)) over (order by source_relation, period_first_day) as period_beginning_converted_balance,\n        period_ending_converted_balance\n    from retained_earnings_beginning\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__retained_earnings\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:32.203991Z", "completed_at": "2024-07-16T07:38:32.207016Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:32.207456Z", "completed_at": "2024-07-16T07:38:32.207459Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004351139068603516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__general_ledger_by_period", "compiled": true, "compiled_code": "with general_ledger_balances as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__general_ledger_balances\"\n),\n\nretained_earnings as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__retained_earnings\"\n),\n\n\n\nbalances_earnings_unioned as (\n\n    select *\n    from general_ledger_balances\n\n    union all \n\n    select *\n    from retained_earnings\n), \n\nfinal as (\n\n    select \n        balances_earnings_unioned.*,\n    \n        case \n            when account_class = 'Asset' then 1\n            when account_class = 'Liability' then 2\n            when account_class = 'Equity' then 3\n            when account_class = 'Revenue' then 1\n            when account_class = 'Expense' then 2\n        end as account_ordinal \n    \n    from balances_earnings_unioned\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger_by_period\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:32.211213Z", "completed_at": "2024-07-16T07:38:32.219401Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:32.220556Z", "completed_at": "2024-07-16T07:38:32.220560Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012653827667236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.quickbooks.quickbooks__balance_sheet", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n    where period_first_day <= 'YYYY-MM-DD' --Update to be your desired ending date.\n),\n\nliability_date as (\n    select \n        account_id, \n        source_relation,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period\n\n    where account_class = 'Liability'\n\n    group by 1,2\n),\n\nasset_date as (\n    select \n        account_id, \n        source_relation,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period\n\n    where account_class = 'Asset'\n\n    group by 1,2\n),\n\nequity_date as (\n    select \n        account_id,\n        source_relation,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period \n\n    where account_class = 'Equity'\n\n    group by 1,2\n),\n\nliability as (\n    select \n        ld.account_id, \n        l.period_ending_balance,\n        l.period_ending_converted_balance\n    from liability_date ld\n\n    left join (select account_id, source_relation, period_first_day, period_ending_balance, period_ending_converted_balance from general_ledger_by_period where account_class = 'Liability') l\n        on l.account_id = ld.account_id\n            and l.period_first_day = ld.period_first_day\n            and l.source_relation = ld.source_relation\n),\n\nasset as (\n    select \n        ad.account_id, \n        a.period_ending_balance,\n        a.period_ending_converted_balance\n    from asset_date ad\n        left join (select account_id, source_relation, period_first_day, period_ending_balance, period_ending_converted_balance from general_ledger_by_period where account_class = 'Asset') a\n            on a.account_id = ad.account_id\n                and a.period_first_day = ad.period_first_day \n                and a.source_relation = ad.source_relation\n),\n\nequity as (\n    select\n        ed.account_id, \n        e.period_ending_balance,\n        e.period_ending_converted_balance\n    from equity_date ed\n        left join (select account_id, source_relation, period_first_day, period_ending_balance, period_ending_converted_balance from general_ledger_by_period where account_class = 'Equity') e\n            on e.account_id = ed.account_id\n                and e.period_first_day = ed.period_first_day \n                and e.source_relation = ed.source_relation\n)\n\nselect \n    'liability' as balance_sheet_type, \n    sum(period_ending_balance) as balance,\n    sum(period_ending_converted_balance) as converted_balance\nfrom liability\ngroup by 1\n\nunion all\n\nselect \n    'asset' as balance_sheet_type, \n    sum(period_ending_balance) as balance,\n    sum(period_ending_converted_balance) as converted_balance\nfrom asset\ngroup by 1\n\nunion all \n\nselect \n    'equity' as balance_sheet_type, \n    sum(period_ending_balance) as balance,\n    sum(period_ending_converted_balance) as converted_balance\nfrom equity\ngroup by 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:32.215850Z", "completed_at": "2024-07-16T07:38:32.219667Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:32.221212Z", "completed_at": "2024-07-16T07:38:32.221216Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01262807846069336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__balance_sheet", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n    where financial_statement_helper = 'balance_sheet'\n),  \n\nfinal as (\n    select\n        period_first_day as calendar_date, --  Slated to be deprecated; we recommend using `period_first_day` or `period_last_day`\n        period_first_day,\n        period_last_day,\n        source_relation,\n        account_class,\n        class_id,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        period_ending_balance as amount,\n        period_ending_converted_balance as converted_amount,\n        account_ordinal\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__balance_sheet\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:32.213210Z", "completed_at": "2024-07-16T07:38:32.220124Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:32.222108Z", "completed_at": "2024-07-16T07:38:32.222111Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013903141021728516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.quickbooks.quickbooks__income_statement", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n),\n\nrevenue as (\n    select \n        account_id, \n        sum(period_net_change) as ending_balance,\n        sum(period_net_converted_change) as ending_converted_balance\n    from general_ledger_by_period\n\n    where account_class = 'Revenue'\n        and period_first_day between 'YYYY-MM-DD' and 'YYYY-MM-DD' --Update 'YYYY-MM-DD' to be your desired date period.\n\n    group by 1\n),\n\nexpense as (\n    select \n        account_id, \n        sum(period_net_change) as ending_balance,\n        sum(period_net_converted_change) as ending_converted_balance\n    from general_ledger_by_period\n\n    where account_class = 'Expense'\n        and period_first_day between 'YYYY-MM-DD' and 'YYYY-MM-DD' --Update 'YYYY-MM-DD' to be your desired date period.\n\n    group by 1\n),\n\nrevenue_total as (\n    select \n        'revenue' as income_statement_type, \n        sum(ending_balance) as ending_balance,\n        sum(ending_converted_balance) as ending_converted_balance\n    from revenue\n),\n\nexpense_total as (\n    select \n        'expense' as income_statement_type, \n        sum(ending_balance) as ending_balance,\n        sum(ending_converted_balance) as ending_converted_balance\n    from expense\n)\n\nselect * \nfrom revenue_total\n\nunion all \n\nselect * \nfrom expense_total", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:32.217550Z", "completed_at": "2024-07-16T07:38:32.220806Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:32.223022Z", "completed_at": "2024-07-16T07:38:32.223025Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014086008071899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__profit_and_loss", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n    where financial_statement_helper = 'income_statement'\n),  \n\nfinal as (\n    select\n        period_first_day as calendar_date, --  Slated to be deprecated; we recommend using `period_first_day` or `period_last_day`\n        period_first_day,\n        period_last_day,\n        source_relation,\n        account_class,\n        class_id,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        period_net_change as amount,\n        period_net_converted_change as converted_amount,\n        account_ordinal\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__profit_and_loss\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:32.226369Z", "completed_at": "2024-07-16T07:38:32.241274Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:32.242817Z", "completed_at": "2024-07-16T07:38:32.242822Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01986098289489746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__general_ledger_by_period_account_id__class_id__source_relation__period_first_day.d928e63a45", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, class_id, source_relation, period_first_day\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n    group by account_id, class_id, source_relation, period_first_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:32.230157Z", "completed_at": "2024-07-16T07:38:32.241625Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:32.243069Z", "completed_at": "2024-07-16T07:38:32.243073Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01932215690612793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__cash_flow_classifications", "compiled": true, "compiled_code": "with cash_flow_key as (\n\n    select calendar_date as cash_flow_period,\n        source_relation,\n        account_class,\n        class_id,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        amount as cash_ending_period,\n        converted_amount as cash_converted_ending_period,\n        md5(cast(coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(calendar_date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(class_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as account_unique_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__balance_sheet\"\n),\n\n\n\ncash_flow_types_and_ordinals as (\n\n    select cash_flow_key.*,\n    \n        case when account_type = 'Bank' then 'Cash or Cash Equivalents'\n            when account_type = 'Accounts Receivable' then 'Operating'\n            when account_type = 'Credit Card' then 'Operating'\n            when account_type = 'Other Current Asset' then 'Operating'\n            when account_type = 'Accounts Payable' then 'Operating'\n            when account_type = 'Other Current Liability' then 'Operating'\n            when account_name = 'Net Income Adjustment' then 'Operating'\n            when account_type = 'Fixed Asset' then 'Investing'\n            when account_type = 'Other Asset' then 'Investing'\n            when account_type = 'Long Term Liability' then 'Financing'\n            when account_class = 'Equity' then 'Financing'\n        end as cash_flow_type,\n        case when account_type = 'Bank' then 1\n            when account_type = 'Accounts Receivable' then 2\n            when account_type = 'Credit Card' then 2\n            when account_type = 'Other Current Asset' then 2\n            when account_type = 'Accounts Payable' then 2\n            when account_type = 'Other Current Liability' then 2\n            when account_name = 'Net Income Adjustment' then 2\n            when account_type = 'Fixed Asset' then 3\n            when account_type = 'Other Asset' then 3\n            when account_type = 'Long Term Liability' then 4\n            when account_class = 'Equity' then 4\n        end as cash_flow_ordinal\n        \n    from cash_flow_key\n\n\n)\n\nselect *\nfrom cash_flow_types_and_ordinals", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__cash_flow_classifications\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:32.234896Z", "completed_at": "2024-07-16T07:38:32.242333Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:32.244580Z", "completed_at": "2024-07-16T07:38:32.244582Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01972818374633789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__balance_sheet_account_id__source_relation__calendar_date__class_id.07368a5056", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation, calendar_date, class_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__balance_sheet\"\n    group by account_id, source_relation, calendar_date, class_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:32.238718Z", "completed_at": "2024-07-16T07:38:32.242582Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:32.244813Z", "completed_at": "2024-07-16T07:38:32.244817Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016402244567871094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__profit_and_loss_account_id__class_id__source_relation__calendar_date.77ccb375e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, class_id, source_relation, calendar_date\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__profit_and_loss\"\n    group by account_id, class_id, source_relation, calendar_date\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:32.247008Z", "completed_at": "2024-07-16T07:38:32.248984Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:32.249429Z", "completed_at": "2024-07-16T07:38:32.249433Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003492116928100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__cash_flow_statement", "compiled": true, "compiled_code": "with cash_flow_classifications as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__cash_flow_classifications\"\n), \n\nfinal as (\n    \n    select cash_flow_classifications.*,\n        coalesce(lag(cash_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_beginning_period,\n        cash_ending_period - coalesce(lag(cash_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_net_period,\n        coalesce(lag(cash_converted_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_converted_beginning_period, \n        cash_converted_ending_period - coalesce(lag(cash_converted_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_converted_net_period\n    from cash_flow_classifications\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__cash_flow_statement\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:32.254126Z", "completed_at": "2024-07-16T07:38:32.256680Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:32.257559Z", "completed_at": "2024-07-16T07:38:32.257563Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00716400146484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.unique_quickbooks__cash_flow_statement_account_unique_id.c6ce55cc0d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_unique_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__cash_flow_statement\"\nwhere account_unique_id is not null\ngroup by account_unique_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-16T07:38:32.251726Z", "completed_at": "2024-07-16T07:38:32.256918Z"}, {"name": "execute", "started_at": "2024-07-16T07:38:32.257790Z", "completed_at": "2024-07-16T07:38:32.257793Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007924079895019531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.not_null_quickbooks__cash_flow_statement_account_unique_id.748fb9ef0a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_unique_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__cash_flow_statement\"\nwhere account_unique_id is null\n\n\n", "relation_name": null}], "elapsed_time": 20.585569143295288, "args": {"log_level": "info", "defer": false, "introspect": true, "log_level_file": "debug", "use_colors_file": true, "strict_mode": false, "profiles_dir": "/Users/avinash.kunnath/.dbt", "log_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks/integration_tests/logs", "use_colors": true, "version_check": true, "warn_error_options": {"include": [], "exclude": []}, "invocation_command": "dbt docs generate -t postgres", "partial_parse": true, "static": false, "populate_cache": true, "partial_parse_file_diff": true, "log_file_max_bytes": 10485760, "indirect_selection": "eager", "cache_selected_only": false, "require_explicit_package_overrides_for_builtin_materializations": false, "log_format_file": "debug", "target": "postgres", "which": "generate", "log_format": "default", "project_dir": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks/integration_tests", "empty_catalog": false, "show_resource_report": false, "send_anonymous_usage_stats": true, "print": true, "enable_legacy_logger": false, "compile": true, "quiet": false, "macro_debugging": false, "static_parser": true, "select": [], "printer_width": 80, "favor_state": false, "exclude": [], "write_json": true, "vars": {}}}