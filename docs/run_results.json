{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.16", "generated_at": "2024-07-20T03:24:19.343032Z", "invocation_id": "2a25159b-1d33-410c-bee5-4c0c00d7ce61", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.304479Z", "completed_at": "2024-07-20T03:24:01.314354Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.316275Z", "completed_at": "2024-07-20T03:24:01.316292Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.049447059631347656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"bill_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.270884Z", "completed_at": "2024-07-20T03:24:01.314739Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.316749Z", "completed_at": "2024-07-20T03:24:01.316752Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05176091194152832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__account_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"account_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__account_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.308616Z", "completed_at": "2024-07-20T03:24:01.315039Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.316981Z", "completed_at": "2024-07-20T03:24:01.316985Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.048844099044799805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"bill_linked_txn_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.299790Z", "completed_at": "2024-07-20T03:24:01.315550Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.317801Z", "completed_at": "2024-07-20T03:24:01.317805Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05212211608886719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__address_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"address_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.326209Z", "completed_at": "2024-07-20T03:24:01.335269Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.337028Z", "completed_at": "2024-07-20T03:24:01.337033Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01703619956970215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"bill_payment_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.328838Z", "completed_at": "2024-07-20T03:24:01.335561Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.337465Z", "completed_at": "2024-07-20T03:24:01.337468Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01739788055419922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"bill_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.322920Z", "completed_at": "2024-07-20T03:24:01.335820Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.337703Z", "completed_at": "2024-07-20T03:24:01.337707Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018800973892211914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"bill_payment_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_payment_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.332182Z", "completed_at": "2024-07-20T03:24:01.336291Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.338429Z", "completed_at": "2024-07-20T03:24:01.338432Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018046140670776367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"bundle_item_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bundle_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.343265Z", "completed_at": "2024-07-20T03:24:01.355496Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.357149Z", "completed_at": "2024-07-20T03:24:01.357157Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01760697364807129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"bundle_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bundle_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.346557Z", "completed_at": "2024-07-20T03:24:01.355968Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.357975Z", "completed_at": "2024-07-20T03:24:01.357979Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018243789672851562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"credit_memo_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__credit_memo_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.349434Z", "completed_at": "2024-07-20T03:24:01.356538Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.359238Z", "completed_at": "2024-07-20T03:24:01.359244Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01934504508972168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"credit_memo_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__credit_memo_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.352058Z", "completed_at": "2024-07-20T03:24:01.357442Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.360680Z", "completed_at": "2024-07-20T03:24:01.360686Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0200350284576416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"customer_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__customer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.365099Z", "completed_at": "2024-07-20T03:24:01.377872Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.378891Z", "completed_at": "2024-07-20T03:24:01.378896Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018234729766845703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__department_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"department_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__department_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.368880Z", "completed_at": "2024-07-20T03:24:01.378554Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.380864Z", "completed_at": "2024-07-20T03:24:01.380875Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01897406578063965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"deposit_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__deposit_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.375070Z", "completed_at": "2024-07-20T03:24:01.379154Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.381887Z", "completed_at": "2024-07-20T03:24:01.381891Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015374898910522461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"estimate_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__estimate_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.371983Z", "completed_at": "2024-07-20T03:24:01.379743Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.382664Z", "completed_at": "2024-07-20T03:24:01.382673Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020243167877197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"deposit_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__deposit_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.386304Z", "completed_at": "2024-07-20T03:24:01.395376Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.401563Z", "completed_at": "2024-07-20T03:24:01.401569Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019284963607788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"estimate_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__estimate_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.391961Z", "completed_at": "2024-07-20T03:24:01.401822Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.404080Z", "completed_at": "2024-07-20T03:24:01.404084Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019907236099243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"invoice_line_bundle_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.398437Z", "completed_at": "2024-07-20T03:24:01.402615Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.404687Z", "completed_at": "2024-07-20T03:24:01.404690Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014900922775268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"invoice_linked_txn_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.395655Z", "completed_at": "2024-07-20T03:24:01.402856Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.404964Z", "completed_at": "2024-07-20T03:24:01.404968Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016145944595336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"invoice_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.407137Z", "completed_at": "2024-07-20T03:24:01.412319Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.422399Z", "completed_at": "2024-07-20T03:24:01.422405Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018712997436523438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"invoice_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.412956Z", "completed_at": "2024-07-20T03:24:01.423387Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.425177Z", "completed_at": "2024-07-20T03:24:01.425181Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015231847763061523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__item_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"item_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.415877Z", "completed_at": "2024-07-20T03:24:01.423854Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.425810Z", "completed_at": "2024-07-20T03:24:01.425814Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018402099609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"journal_entry_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__journal_entry_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.419664Z", "completed_at": "2024-07-20T03:24:01.424382Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.426503Z", "completed_at": "2024-07-20T03:24:01.426505Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018914222717285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"journal_entry_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__journal_entry_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.426735Z", "completed_at": "2024-07-20T03:24:01.432557Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.439614Z", "completed_at": "2024-07-20T03:24:01.439619Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019173145294189453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"payment_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__payment_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.433771Z", "completed_at": "2024-07-20T03:24:01.444161Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.446043Z", "completed_at": "2024-07-20T03:24:01.446047Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015730857849121094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"payment_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.437121Z", "completed_at": "2024-07-20T03:24:01.444794Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.446676Z", "completed_at": "2024-07-20T03:24:01.446679Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018459320068359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"purchase_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__purchase_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.439949Z", "completed_at": "2024-07-20T03:24:01.445214Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.447362Z", "completed_at": "2024-07-20T03:24:01.447364Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018373966217041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"purchase_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__purchase_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.447604Z", "completed_at": "2024-07-20T03:24:01.453186Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.458637Z", "completed_at": "2024-07-20T03:24:01.458653Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019433021545410156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"refund_receipt_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.455299Z", "completed_at": "2024-07-20T03:24:01.465234Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.467262Z", "completed_at": "2024-07-20T03:24:01.467269Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01616215705871582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"refund_receipt_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__refund_receipt_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.458923Z", "completed_at": "2024-07-20T03:24:01.466301Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.468776Z", "completed_at": "2024-07-20T03:24:01.468779Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01989603042602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"sales_receipt_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.461913Z", "completed_at": "2024-07-20T03:24:01.466566Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.469022Z", "completed_at": "2024-07-20T03:24:01.469026Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019783973693847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"sales_receipt_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__sales_receipt_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.469275Z", "completed_at": "2024-07-20T03:24:01.475323Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.511040Z", "completed_at": "2024-07-20T03:24:01.511047Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04797196388244629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__transfer_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"transfer_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__transfer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.477059Z", "completed_at": "2024-07-20T03:24:01.515260Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.519614Z", "completed_at": "2024-07-20T03:24:01.519621Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04624199867248535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"vendor_credit_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.511623Z", "completed_at": "2024-07-20T03:24:01.518857Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.521054Z", "completed_at": "2024-07-20T03:24:01.521057Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.047328948974609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"vendor_credit_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor_credit_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.515563Z", "completed_at": "2024-07-20T03:24:01.520099Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.523823Z", "completed_at": "2024-07-20T03:24:01.523827Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04845595359802246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_10\".\"vendor_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.521534Z", "completed_at": "2024-07-20T03:24:01.522609Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.525462Z", "completed_at": "2024-07-20T03:24:01.525465Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0075109004974365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.account_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.527010Z", "completed_at": "2024-07-20T03:24:01.528137Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.532605Z", "completed_at": "2024-07-20T03:24:01.532610Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010437965393066406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.529670Z", "completed_at": "2024-07-20T03:24:01.531624Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.535076Z", "completed_at": "2024-07-20T03:24:01.535079Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011224031448364258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.533094Z", "completed_at": "2024-07-20T03:24:01.534074Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.537448Z", "completed_at": "2024-07-20T03:24:01.537451Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009869098663330078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.535521Z", "completed_at": "2024-07-20T03:24:01.536451Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.538892Z", "completed_at": "2024-07-20T03:24:01.538895Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007779121398925781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.540255Z", "completed_at": "2024-07-20T03:24:01.541265Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.544256Z", "completed_at": "2024-07-20T03:24:01.544259Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008252143859863281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.542486Z", "completed_at": "2024-07-20T03:24:01.543432Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.546426Z", "completed_at": "2024-07-20T03:24:01.546428Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009908914566040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_payment_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.544673Z", "completed_at": "2024-07-20T03:24:01.545540Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.549510Z", "completed_at": "2024-07-20T03:24:01.549513Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008898019790649414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bundle_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.546834Z", "completed_at": "2024-07-20T03:24:01.548577Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.550894Z", "completed_at": "2024-07-20T03:24:01.550897Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008098125457763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bundle_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.552247Z", "completed_at": "2024-07-20T03:24:01.553184Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.555974Z", "completed_at": "2024-07-20T03:24:01.555977Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007877111434936523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.credit_card_payment_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.554358Z", "completed_at": "2024-07-20T03:24:01.555219Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.558075Z", "completed_at": "2024-07-20T03:24:01.558078Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008624076843261719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.credit_memo_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.556382Z", "completed_at": "2024-07-20T03:24:01.557232Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.560214Z", "completed_at": "2024-07-20T03:24:01.560217Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007679939270019531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.credit_memo_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.558475Z", "completed_at": "2024-07-20T03:24:01.559335Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.561573Z", "completed_at": "2024-07-20T03:24:01.561576Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007024049758911133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.562963Z", "completed_at": "2024-07-20T03:24:01.563919Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.567537Z", "completed_at": "2024-07-20T03:24:01.567541Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008809089660644531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.department_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.565081Z", "completed_at": "2024-07-20T03:24:01.566786Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.569715Z", "completed_at": "2024-07-20T03:24:01.569718Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009621143341064453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.deposit_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.567942Z", "completed_at": "2024-07-20T03:24:01.568836Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.571915Z", "completed_at": "2024-07-20T03:24:01.571917Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00864267349243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.deposit_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.570149Z", "completed_at": "2024-07-20T03:24:01.571018Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.573265Z", "completed_at": "2024-07-20T03:24:01.573267Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007139921188354492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.estimate_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.574643Z", "completed_at": "2024-07-20T03:24:01.575564Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.578393Z", "completed_at": "2024-07-20T03:24:01.578396Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008730888366699219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.estimate_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.576745Z", "completed_at": "2024-07-20T03:24:01.577621Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.581323Z", "completed_at": "2024-07-20T03:24:01.581326Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009521245956420898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.578843Z", "completed_at": "2024-07-20T03:24:01.580472Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.583488Z", "completed_at": "2024-07-20T03:24:01.583491Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008577108383178711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_line_bundle_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.581728Z", "completed_at": "2024-07-20T03:24:01.582600Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.584855Z", "completed_at": "2024-07-20T03:24:01.584858Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007904052734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.586280Z", "completed_at": "2024-07-20T03:24:01.587240Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.590181Z", "completed_at": "2024-07-20T03:24:01.590185Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008204936981201172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.588453Z", "completed_at": "2024-07-20T03:24:01.589386Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.592438Z", "completed_at": "2024-07-20T03:24:01.592441Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009026050567626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.590597Z", "completed_at": "2024-07-20T03:24:01.591513Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.594609Z", "completed_at": "2024-07-20T03:24:01.594612Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008034944534301758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.journal_entry_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.592841Z", "completed_at": "2024-07-20T03:24:01.593697Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.596001Z", "completed_at": "2024-07-20T03:24:01.596004Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007203102111816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.journal_entry_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.597338Z", "completed_at": "2024-07-20T03:24:01.599117Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.601904Z", "completed_at": "2024-07-20T03:24:01.601907Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008686065673828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.600316Z", "completed_at": "2024-07-20T03:24:01.601178Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.603994Z", "completed_at": "2024-07-20T03:24:01.603997Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009455204010009766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.payment_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.602305Z", "completed_at": "2024-07-20T03:24:01.603155Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.606137Z", "completed_at": "2024-07-20T03:24:01.606140Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007645845413208008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.604394Z", "completed_at": "2024-07-20T03:24:01.605259Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.607505Z", "completed_at": "2024-07-20T03:24:01.607507Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006990909576416016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.608855Z", "completed_at": "2024-07-20T03:24:01.609786Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.612540Z", "completed_at": "2024-07-20T03:24:01.612543Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008651018142700195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_order_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.610947Z", "completed_at": "2024-07-20T03:24:01.611817Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.615456Z", "completed_at": "2024-07-20T03:24:01.615459Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00944209098815918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_order_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.612960Z", "completed_at": "2024-07-20T03:24:01.614616Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.617639Z", "completed_at": "2024-07-20T03:24:01.617642Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008487224578857422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_order_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.615849Z", "completed_at": "2024-07-20T03:24:01.616722Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.618992Z", "completed_at": "2024-07-20T03:24:01.618995Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007819890975952148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.refund_receipt_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.620333Z", "completed_at": "2024-07-20T03:24:01.621242Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.623970Z", "completed_at": "2024-07-20T03:24:01.623973Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0077419281005859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.refund_receipt_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.622388Z", "completed_at": "2024-07-20T03:24:01.623248Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.626061Z", "completed_at": "2024-07-20T03:24:01.626064Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009237051010131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.sales_receipt_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.624377Z", "completed_at": "2024-07-20T03:24:01.625230Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.628904Z", "completed_at": "2024-07-20T03:24:01.628907Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008298873901367188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.sales_receipt_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.626460Z", "completed_at": "2024-07-20T03:24:01.628033Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.630233Z", "completed_at": "2024-07-20T03:24:01.630236Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007681131362915039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.transfer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.631626Z", "completed_at": "2024-07-20T03:24:01.632536Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.635280Z", "completed_at": "2024-07-20T03:24:01.635283Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007791757583618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.vendor_credit_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.633685Z", "completed_at": "2024-07-20T03:24:01.634550Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.637361Z", "completed_at": "2024-07-20T03:24:01.637364Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01441812515258789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.vendor_credit_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.635686Z", "completed_at": "2024-07-20T03:24:01.636536Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:01.645397Z", "completed_at": "2024-07-20T03:24:01.645401Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013628005981445312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.vendor_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.647819Z", "completed_at": "2024-07-20T03:24:02.809983Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:02.812185Z", "completed_at": "2024-07-20T03:24:02.812192Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2922728061676025, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__account", "compiled": true, "compiled_code": "with base as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__account_tmp\"\n\n),\n\naccount as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    account_sub_type\n    \n as \n    \n    account_sub_type\n    \n, \n    \n    \n    account_type\n    \n as \n    \n    account_type\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_sub_accounts\n    \n as \n    \n    balance_with_sub_accounts\n    \n, \n    \n    \n    classification\n    \n as \n    \n    classification\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    sub_account\n    \n as \n    \n    sub_account\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as account_id,\n        cast(account_number as TEXT) as account_number,\n        sub_account as is_sub_account,\n        cast(parent_account_id as TEXT) as parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        classification,\n        balance,\n        balance_with_sub_accounts,\n        active as is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n    from account\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.658141Z", "completed_at": "2024-07-20T03:24:02.810603Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:02.812444Z", "completed_at": "2024-07-20T03:24:02.812448Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2865290641784668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__address", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__address_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_sub_division_code\n    \n as \n    \n    country_sub_division_code\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    line_1\n    \n as \n    \n    line_1\n    \n, \n    \n    \n    line_2\n    \n as \n    \n    line_2\n    \n, \n    \n    \n    line_3\n    \n as \n    \n    line_3\n    \n, \n    \n    \n    line_4\n    \n as \n    \n    line_4\n    \n, \n    \n    \n    line_5\n    \n as \n    \n    line_5\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    postal_code\n    \n as \n    \n    postal_code\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as address_id,\n        city,\n        country,\n        line_1 as address_1,\n        line_2 as address_2,\n        postal_code,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.637755Z", "completed_at": "2024-07-20T03:24:02.810866Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:02.812688Z", "completed_at": "2024-07-20T03:24:02.812690Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3085191249847412, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as TEXT) as bill_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        item_expense_billable_status,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:01.653639Z", "completed_at": "2024-07-20T03:24:02.811122Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:02.812922Z", "completed_at": "2024-07-20T03:24:02.812925Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.296811819076538, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as TEXT) as bill_id,\n        index,\n        cast(bill_payment_id as TEXT) as bill_payment_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:02.945702Z", "completed_at": "2024-07-20T03:24:04.312822Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:04.313360Z", "completed_at": "2024-07-20T03:24:04.313367Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4823901653289795, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_payment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    check_bank_account_id\n    \n as \n    \n    check_bank_account_id\n    \n, \n    \n    \n    check_print_status\n    \n as \n    \n    check_print_status\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_account_id\n    \n as \n    \n    credit_card_account_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    pay_type\n    \n as \n    \n    pay_type\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_bill_payment\n    \n as \n    \n    process_bill_payment\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as bill_payment_id,\n        cast(check_bank_account_id as TEXT) as check_bank_account_id,\n        check_print_status,\n        cast(credit_card_account_id as TEXT) as credit_card_account_id,\n        exchange_rate,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        pay_type,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(vendor_id as TEXT) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:02.951549Z", "completed_at": "2024-07-20T03:24:04.313890Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:04.314348Z", "completed_at": "2024-07-20T03:24:04.314351Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.491520881652832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n \nfinal as (\n    \n    select \n        cast(id as TEXT) as bill_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        cast( date_trunc('day', due_date) as date) as due_date_at, \n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        exchange_rate,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        total_amount,\n        cast(vendor_id as TEXT) as vendor_id,\n        private_note,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:02.961961Z", "completed_at": "2024-07-20T03:24:04.430408Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:04.430865Z", "completed_at": "2024-07-20T03:24:04.430869Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.583319902420044, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bundle_item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    item_quantity\n    \n as \n    \n    item_quantity\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n  \n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bundle_id as TEXT) as bundle_id,\n        cast(item_id as TEXT) as item_id,\n        item_quantity,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bundle_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:02.956982Z", "completed_at": "2024-07-20T03:24:04.452976Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:04.453490Z", "completed_at": "2024-07-20T03:24:04.453497Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.628424882888794, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_payment_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_credit_card_id\n    \n as \n    \n    bill_payment_credit_card_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    linked_bill_payment_id\n    \n as \n    \n    linked_bill_payment_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n  \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_payment_id as TEXT) as bill_payment_id,\n        index,\n        amount,\n        cast(bill_id as TEXT) as bill_id,\n        deposit_id,\n        expense_id,\n        journal_entry_id,\n        linked_bill_payment_id,\n        vendor_credit_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:04.425880Z", "completed_at": "2024-07-20T03:24:05.725512Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:05.726006Z", "completed_at": "2024-07-20T03:24:05.726012Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4655301570892334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bundle_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    print_grouped_items\n    \n as \n    \n    print_grouped_items\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as bundle_id,\n        created_at,\n        active as is_active,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n\n    from fields\n)\n\nselect * from final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bundle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:04.437005Z", "completed_at": "2024-07-20T03:24:05.726670Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:05.727104Z", "completed_at": "2024-07-20T03:24:05.727107Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4645130634307861, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__credit_memo_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(credit_memo_id as TEXT) as credit_memo_id,\n        index,\n        amount,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:04.539741Z", "completed_at": "2024-07-20T03:24:05.902280Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:05.904819Z", "completed_at": "2024-07-20T03:24:05.904827Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.491044282913208, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__credit_memo_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remaining_credit\n    \n as \n    \n    remaining_credit\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as credit_memo_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        cast(class_id as TEXT) as class_id,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__credit_memo\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:04.580575Z", "completed_at": "2024-07-20T03:24:05.903419Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:05.909374Z", "completed_at": "2024-07-20T03:24:05.909379Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4519269466400146, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__customer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone_number\n    \n as \n    \n    alternate_phone_number\n    \n, \n    \n    \n    ar_account_id\n    \n as \n    \n    ar_account_id\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_jobs\n    \n as \n    \n    balance_with_jobs\n    \n, \n    \n    \n    bill_address_id\n    \n as \n    \n    bill_address_id\n    \n, \n    \n    \n    bill_with_parent\n    \n as \n    \n    bill_with_parent\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    default_tax_code_id\n    \n as \n    \n    default_tax_code_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    job\n    \n as \n    \n    job\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_number\n    \n as \n    \n    mobile_number\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    open_balance_date\n    \n as \n    \n    open_balance_date\n    \n, \n    \n    \n    parent_customer_id\n    \n as \n    \n    parent_customer_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    preferred_delivery_method\n    \n as \n    \n    preferred_delivery_method\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    resale_number\n    \n as \n    \n    resale_number\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_exemption_reason_id\n    \n as \n    \n    tax_exemption_reason_id\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    website\n    \n as \n    \n    website\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as customer_id,\n        active as is_active,\n        balance,\n        balance_with_jobs,\n        bill_with_parent,\n        company_name,\n        fully_qualified_name,\n        currency_id,\n        display_name,\n        website,\n        taxable,\n        source_relation\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:05.909637Z", "completed_at": "2024-07-20T03:24:07.231294Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:07.231774Z", "completed_at": "2024-07-20T03:24:07.231780Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4756982326507568, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__deposit_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    deposit_account_id\n    \n as \n    \n    deposit_account_id\n    \n, \n    \n    \n    deposit_check_number\n    \n as \n    \n    deposit_check_number\n    \n, \n    \n    \n    deposit_class_id\n    \n as \n    \n    deposit_class_id\n    \n, \n    \n    \n    deposit_customer_id\n    \n as \n    \n    deposit_customer_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    deposit_payment_method_id\n    \n as \n    \n    deposit_payment_method_id\n    \n, \n    \n    \n    deposit_tax_applicable_on\n    \n as \n    \n    deposit_tax_applicable_on\n    \n, \n    \n    \n    deposit_tax_code_id\n    \n as \n    \n    deposit_tax_code_id\n    \n, \n    \n    \n    deposit_transaction_type\n    \n as \n    \n    deposit_transaction_type\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n, \n    \n    \n    refund_receipt_id\n    \n as \n    \n    refund_receipt_id\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(deposit_id as TEXT) as deposit_id,\n        index,\n        amount,\n        description,\n        cast(deposit_account_id as TEXT) as deposit_account_id,\n        cast(deposit_class_id as TEXT) as deposit_class_id,\n        cast(deposit_customer_id as TEXT) as deposit_customer_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__deposit_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:05.905054Z", "completed_at": "2024-07-20T03:24:07.328397Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:07.328854Z", "completed_at": "2024-07-20T03:24:07.328858Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.559208869934082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__department", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__department_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_department_id\n    \n as \n    \n    parent_department_id\n    \n, \n    \n    \n    sub_department\n    \n as \n    \n    sub_department\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as department_id,\n        active as is_active,\n        created_at,\n        updated_at,\n        fully_qualified_name,\n        name,\n        sub_department as is_sub_department,\n        parent_department_id,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__department\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:06.039803Z", "completed_at": "2024-07-20T03:24:07.467741Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:07.482272Z", "completed_at": "2024-07-20T03:24:07.482279Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5792629718780518, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__deposit_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    cash_back_account_id\n    \n as \n    \n    cash_back_account_id\n    \n, \n    \n    \n    cash_back_amount\n    \n as \n    \n    cash_back_amount\n    \n, \n    \n    \n    cash_back_memo\n    \n as \n    \n    cash_back_memo\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as deposit_id,\n        cast(account_id as TEXT) as account_id,\n        created_at,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        total_amount,\n        home_total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__deposit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:06.034914Z", "completed_at": "2024-07-20T03:24:07.483114Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:07.483597Z", "completed_at": "2024-07-20T03:24:07.483600Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.6035900115966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__estimate_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(estimate_id as TEXT) as estimate_id,\n        index,\n        description,\n        discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        sales_item_item_id,\n        sales_item_quantity,\n        item_id,\n        quantity,\n        account_id,\n        amount,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__estimate_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:07.385620Z", "completed_at": "2024-07-20T03:24:08.577632Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:08.578121Z", "completed_at": "2024-07-20T03:24:08.578129Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3814949989318848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__estimate_tmp\"\n\n),\n \nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accepted_by\n    \n as \n    \n    accepted_by\n    \n, \n    \n    \n    accepted_date\n    \n as \n    \n    accepted_date\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    expiration_date\n    \n as \n    \n    expiration_date\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as estimate_id,\n        cast(class_id as TEXT) as class_id,\n        created_at,\n        currency_id,\n        customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        exchange_rate,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__estimate\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:07.463374Z", "completed_at": "2024-07-20T03:24:08.804395Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:08.804997Z", "completed_at": "2024-07-20T03:24:08.805007Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4934227466583252, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discount_amount\n    \n as \n    \n    discount_amount\n    \n, \n    \n    \n    discount_rate\n    \n as \n    \n    discount_rate\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_line_index\n    \n as \n    \n    invoice_line_index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    line_num\n    \n as \n    \n    line_num\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    service_date\n    \n as \n    \n    service_date\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        index,\n        cast(class_id as TEXT) as class_id,\n        description,\n        amount,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        cast(item_id as TEXT) as item_id,\n        quantity,\n        sales_item_quantity,\n        cast(account_id as TEXT) as account_id,\n        unit_price,\n        invoice_line_index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:07.618448Z", "completed_at": "2024-07-20T03:24:09.007758Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:09.008696Z", "completed_at": "2024-07-20T03:24:09.008699Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5166940689086914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    charge_credit_id\n    \n as \n    \n    charge_credit_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    reimburse_charge_id\n    \n as \n    \n    reimburse_charge_id\n    \n, \n    \n    \n    statement_charge_id\n    \n as \n    \n    statement_charge_id\n    \n, \n    \n    \n    time_activity_id\n    \n as \n    \n    time_activity_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        cast(payment_id as TEXT) as payment_id,\n        cast(estimate_id as TEXT) as estimate_id,\n        index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:07.639674Z", "completed_at": "2024-07-20T03:24:09.007481Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:09.008458Z", "completed_at": "2024-07-20T03:24:09.008464Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5106379985809326, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_line_tmp\"\n\n),\n\nfields as ( \n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        index,\n        amount,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        detail_type,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        description,\n        quantity,\n        bundle_quantity,\n        cast(bundle_id as TEXT) as bundle_id,\n        cast(account_id as TEXT) as account_id,\n        cast(item_id as TEXT) as item_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:08.797314Z", "completed_at": "2024-07-20T03:24:09.957042Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:09.957541Z", "completed_at": "2024-07-20T03:24:09.957548Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.28908109664917, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allow_ipnpayment\n    \n as \n    \n    allow_ipnpayment\n    \n, \n    \n    \n    allow_online_achpayment\n    \n as \n    \n    allow_online_achpayment\n    \n, \n    \n    \n    allow_online_credit_card_payment\n    \n as \n    \n    allow_online_credit_card_payment\n    \n, \n    \n    \n    allow_online_payment\n    \n as \n    \n    allow_online_payment\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    billing_bcc_email\n    \n as \n    \n    billing_bcc_email\n    \n, \n    \n    \n    billing_cc_email\n    \n as \n    \n    billing_cc_email\n    \n, \n    \n    \n    billing_email\n    \n as \n    \n    billing_email\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    custom_sales_rep\n    \n as \n    \n    custom_sales_rep\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit\n    \n as \n    \n    deposit\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as invoice_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(customer_id as TEXT) as customer_id,\n        cast(billing_address_id as TEXT) as billing_address_id,\n        shipping_address_id,\n        delivery_type,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        cast(class_id as TEXT) as class_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:08.971925Z", "completed_at": "2024-07-20T03:24:10.282988Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:10.283518Z", "completed_at": "2024-07-20T03:24:10.283525Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4551382064819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__item", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    asset_account_id\n    \n as \n    \n    asset_account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    expense_account_id\n    \n as \n    \n    expense_account_id\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    income_account_id\n    \n as \n    \n    income_account_id\n    \n, \n    \n    \n    inventory_start_date\n    \n as \n    \n    inventory_start_date\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_item_id\n    \n as \n    \n    parent_item_id\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    purchase_description\n    \n as \n    \n    purchase_description\n    \n, \n    \n    \n    purchase_tax_code_id\n    \n as \n    \n    purchase_tax_code_id\n    \n, \n    \n    \n    purchase_tax_included\n    \n as \n    \n    purchase_tax_included\n    \n, \n    \n    \n    quantity_on_hand\n    \n as \n    \n    quantity_on_hand\n    \n, \n    \n    \n    sales_tax_code_id\n    \n as \n    \n    sales_tax_code_id\n    \n, \n    \n    \n    sales_tax_included\n    \n as \n    \n    sales_tax_included\n    \n, \n    \n    \n    stock_keeping_unit\n    \n as \n    \n    stock_keeping_unit\n    \n, \n    \n    \n    sub_item\n    \n as \n    \n    sub_item\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    track_quantity_on_hand\n    \n as \n    \n    track_quantity_on_hand\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as item_id,\n        active as is_active,\n        created_at,\n        cast(income_account_id as TEXT) as income_account_id,\n        cast(asset_account_id as TEXT) as asset_account_id,\n        cast(expense_account_id as TEXT) as expense_account_id,\n        name,\n        purchase_cost,\n        taxable,\n        type,\n        unit_price,\n        inventory_start_date,\n        cast(parent_item_id as TEXT) as parent_item_id,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:09.150164Z", "completed_at": "2024-07-20T03:24:10.344918Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:10.345373Z", "completed_at": "2024-07-20T03:24:10.345377Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3230578899383545, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__journal_entry_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    adjustment\n    \n as \n    \n    adjustment\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as journal_entry_id,\n        adjustment as is_adjustment,\n        created_at,\n        currency_id,\n        cast(doc_number as TEXT) as doc_number,\n        exchange_rate,\n        private_note,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__journal_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:09.142573Z", "completed_at": "2024-07-20T03:24:10.358801Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:10.359267Z", "completed_at": "2024-07-20T03:24:10.359271Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3480088710784912, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__journal_entry_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    billable_status\n    \n as \n    \n    billable_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    posting_type\n    \n as \n    \n    posting_type\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_applicable_on\n    \n as \n    \n    tax_applicable_on\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(journal_entry_id as TEXT) as journal_entry_id,\n        index,\n        cast(account_id as TEXT) as account_id,\n        amount,\n        cast(customer_id as TEXT) as customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast(class_id as TEXT) as class_id,\n        description,\n        billable_status,\n        posting_type,\n        cast(vendor_id as TEXT) as vendor_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:10.092081Z", "completed_at": "2024-07-20T03:24:11.205601Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:11.206109Z", "completed_at": "2024-07-20T03:24:11.206122Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2219789028167725, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__payment_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(payment_id as TEXT) as payment_id,\n        index,\n        amount,\n        journal_entry_id,\n        deposit_id,\n        cast(invoice_id as TEXT) as invoice_id,\n        credit_memo_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__payment_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:10.421679Z", "completed_at": "2024-07-20T03:24:11.632656Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:11.633138Z", "completed_at": "2024-07-20T03:24:11.633145Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3284070491790771, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__payment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_payment\n    \n as \n    \n    process_payment\n    \n, \n    \n    \n    receivable_account_id\n    \n as \n    \n    receivable_account_id\n    \n, \n    \n    \n    reference_number\n    \n as \n    \n    reference_number\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    unapplied_amount\n    \n as \n    \n    unapplied_amount\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as payment_id,\n        unapplied_amount,\n        total_amount,\n        currency_id,\n        cast(receivable_account_id as TEXT) as receivable_account_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(customer_id as TEXT) as customer_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:10.492774Z", "completed_at": "2024-07-20T03:24:11.667471Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:11.667916Z", "completed_at": "2024-07-20T03:24:11.667920Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.286147117614746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__purchase_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit\n    \n as \n    \n    credit\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remit_to_address_id\n    \n as \n    \n    remit_to_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n     \n    select \n        cast(id as TEXT) as purchase_id,\n        cast(account_id as TEXT) as account_id,\n        created_at,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        exchange_rate,\n        credit,\n        total_amount,\n        payment_type,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        cast(vendor_id as TEXT) as vendor_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__purchase\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:10.478603Z", "completed_at": "2024-07-20T03:24:11.701914Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:11.702358Z", "completed_at": "2024-07-20T03:24:11.702362Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3770561218261719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__purchase_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_id as TEXT) as purchase_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id, \n        account_expense_billable_status,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_billable_status,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__purchase_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:11.319805Z", "completed_at": "2024-07-20T03:24:12.487159Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:12.488052Z", "completed_at": "2024-07-20T03:24:12.488061Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.276365041732788, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(refund_id as TEXT) as refund_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id, \n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        sales_item_tax_code_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:11.779358Z", "completed_at": "2024-07-20T03:24:13.205847Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:13.206875Z", "completed_at": "2024-07-20T03:24:13.206883Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5412828922271729, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(sales_receipt_id as TEXT) as sales_receipt_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_tax_code_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:11.753551Z", "completed_at": "2024-07-20T03:24:13.206523Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:13.207650Z", "completed_at": "2024-07-20T03:24:13.207655Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6176283359527588, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__refund_receipt_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    check_payment_account_number\n    \n as \n    \n    check_payment_account_number\n    \n, \n    \n    \n    check_payment_bank_name\n    \n as \n    \n    check_payment_bank_name\n    \n, \n    \n    \n    check_payment_check_number\n    \n as \n    \n    check_payment_check_number\n    \n, \n    \n    \n    check_payment_name_on_account\n    \n as \n    \n    check_payment_name_on_account\n    \n, \n    \n    \n    check_payment_status\n    \n as \n    \n    check_payment_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as refund_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        cast(class_id as TEXT) as class_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        created_at,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        currency_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__refund_receipt\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:11.864689Z", "completed_at": "2024-07-20T03:24:13.267355Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:13.267850Z", "completed_at": "2024-07-20T03:24:13.267856Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.555454969406128, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__sales_receipt_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as sales_receipt_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        created_at,\n        cast(customer_id as TEXT) as customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast(class_id as TEXT) as class_id,\n        currency_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__sales_receipt\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:12.598733Z", "completed_at": "2024-07-20T03:24:13.992677Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:13.993207Z", "completed_at": "2024-07-20T03:24:13.993217Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5196750164031982, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__transfer", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__transfer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    from_account_id\n    \n as \n    \n    from_account_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    to_account_id\n    \n as \n    \n    to_account_id\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as transfer_id,\n        amount,\n        cast(from_account_id as TEXT) as from_account_id,\n        cast(to_account_id as TEXT) as to_account_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__transfer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.123757Z", "completed_at": "2024-07-20T03:24:14.131171Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.131643Z", "completed_at": "2024-07-20T03:24:14.131648Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012996673583984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__account_classifications", "compiled": true, "compiled_code": "with accounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\nclassification_fix as (\n\n    select \n        account_id,\n        source_relation,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n\n    select \n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.account_id = adjusted_balances.parent_account_id\n        and parent_accounts.source_relation = adjusted_balances.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__account_classifications\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.133154Z", "completed_at": "2024-07-20T03:24:14.140988Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.141458Z", "completed_at": "2024-07-20T03:24:14.141464Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009244918823242188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue.127506f73f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        classification as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__account\"\n    group by classification\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Asset','Equity','Expense','Liability','Revenue'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.142951Z", "completed_at": "2024-07-20T03:24:14.148563Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.149028Z", "completed_at": "2024-07-20T03:24:14.149032Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0070018768310546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__account_account_id__source_relation.864a4b056a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__account\"\n    group by account_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.150493Z", "completed_at": "2024-07-20T03:24:14.155546Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.156005Z", "completed_at": "2024-07-20T03:24:14.156010Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006428956985473633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__account_account_id.9944488b9d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__account\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.157468Z", "completed_at": "2024-07-20T03:24:14.160511Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.160953Z", "completed_at": "2024-07-20T03:24:14.160957Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0043871402740478516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__address_address_id__source_relation.5bc813a014", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__address\"\n    group by address_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.162355Z", "completed_at": "2024-07-20T03:24:14.165795Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.166226Z", "completed_at": "2024-07-20T03:24:14.166230Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004759073257446289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__address_address_id.4f100ae50c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__address\"\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.167632Z", "completed_at": "2024-07-20T03:24:14.170859Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.171311Z", "completed_at": "2024-07-20T03:24:14.171314Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004578113555908203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_line_bill_id__index__source_relation.73722b1062", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_line\"\n    group by bill_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.172706Z", "completed_at": "2024-07-20T03:24:14.175296Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.175725Z", "completed_at": "2024-07-20T03:24:14.175728Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003893136978149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id.25c5ea7348", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_line\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.177111Z", "completed_at": "2024-07-20T03:24:14.179739Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.180181Z", "completed_at": "2024-07-20T03:24:14.180184Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003954887390136719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id.35f96199bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.182041Z", "completed_at": "2024-07-20T03:24:14.186017Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.186559Z", "completed_at": "2024-07-20T03:24:14.186564Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005980014801025391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_bill_payment_id__source_relation.4b7aafd630", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_payment\"\n    group by bill_payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.188399Z", "completed_at": "2024-07-20T03:24:14.192375Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.192850Z", "completed_at": "2024-07-20T03:24:14.192855Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005518913269042969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id.908899ccfb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_payment\"\nwhere bill_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.194314Z", "completed_at": "2024-07-20T03:24:14.197177Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.197633Z", "completed_at": "2024-07-20T03:24:14.197638Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004214763641357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_bill_id__source_relation.8c08249abf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill\"\n    group by bill_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.199055Z", "completed_at": "2024-07-20T03:24:14.201631Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.202063Z", "completed_at": "2024-07-20T03:24:14.202066Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0038902759552001953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id.ca717958c8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.203441Z", "completed_at": "2024-07-20T03:24:14.206054Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.206509Z", "completed_at": "2024-07-20T03:24:14.206513Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003972053527832031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id.6d547b8c07", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bundle_item\"\nwhere bundle_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.207958Z", "completed_at": "2024-07-20T03:24:14.212838Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.213291Z", "completed_at": "2024-07-20T03:24:14.213296Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006249904632568359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_join", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill\"\n),\n\nbill_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_line\"\n),\n\nbills_linked as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn\"\n),\n\nbill_payments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_payment\"\n),\n\nbill_payment_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\"\n\n    where bill_id is not null\n),\n\nbill_pay as (\n\n    select\n        bills.bill_id,\n        bills.source_relation,\n        bills_linked.bill_payment_id\n    from bills\n\n    left join bills_linked\n        on bills.bill_id = bills_linked.bill_id\n        and bills.source_relation = bills_linked.source_relation\n\n    where bills_linked.bill_payment_id is not null\n),\n\nbill_link as (\n\n    select\n        bills.*,\n        bill_pay.bill_payment_id\n    from bills\n\n    left join bill_pay\n        on bills.bill_id = bill_pay.bill_id\n        and bills.source_relation = bill_pay.source_relation\n),\n\nfinal as (\n\n    select\n        cast('bill' as TEXT)  as transaction_type,\n        bill_link.bill_id as transaction_id,\n        bill_link.source_relation,\n        bill_link.doc_number,\n        bill_link.department_id,\n        bill_link.vendor_id as vendor_id,\n        bill_link.payable_account_id,\n        bill_link.total_amount as total_amount,\n        (bill_link.total_amount * coalesce(bill_link.exchange_rate, 1)) as total_converted_amount,\n        bill_link.balance as current_balance,\n        bill_link.due_date_at as due_date,\n        min(bill_payments.transaction_date) as initial_payment_date,\n        max(bill_payments.transaction_date) as recent_payment_date,\n        sum(coalesce(bill_payment_lines.amount, 0)) as total_current_payment,\n        sum(coalesce(bill_payment_lines.amount, 0) * coalesce(bill_payments.exchange_rate, 1)) as total_current_converted_payment\n\n    from bill_link\n\n    left join bill_payments\n        on bill_link.bill_payment_id = bill_payments.bill_payment_id\n        and bill_link.source_relation = bill_payments.source_relation\n\n    left join bill_payment_lines\n        on bill_payments.bill_payment_id = bill_payment_lines.bill_payment_id\n        and bill_payments.source_relation = bill_payment_lines.source_relation\n        and bill_link.bill_id = bill_payment_lines.bill_id\n        and bill_link.source_relation = bill_payment_lines.source_relation\n    \n    group by 1,2,3,4,5,6,7,8,9,10,11 \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__bill_join\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.214754Z", "completed_at": "2024-07-20T03:24:14.219150Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.219597Z", "completed_at": "2024-07-20T03:24:14.219602Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005759000778198242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_payment_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to accounts payable and a credit record to the specified cash account.\n*/\n\n--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith bill_payments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_payment\"\n),\n\nbill_payment_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\nap_accounts as (\n\n    select\n        account_id,\n        currency_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Payable'\n        and is_active\n        and not is_sub_account\n),\n\nbill_payment_join as (\n\n    select\n        bill_payments.bill_payment_id as transaction_id,\n        bill_payments.source_relation,\n        row_number() over(partition by bill_payments.bill_payment_id, bill_payments.source_relation \n            order by bill_payments.source_relation, bill_payments.transaction_date) - 1 as index,\n        bill_payments.transaction_date,\n        bill_payments.total_amount as amount,\n        (bill_payments.total_amount * coalesce(bill_payments.exchange_rate, 1)) as converted_amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id,\n        bill_payments.vendor_id,\n        bill_payments.department_id\n    from bill_payments\n\n    left join ap_accounts\n        on ap_accounts.currency_id = bill_payments.currency_id\n        and ap_accounts.source_relation = bill_payments.source_relation\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payment_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        department_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        account_id,\n        cast(null as TEXT) as class_id,\n        department_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source\n    from bill_payment_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__bill_payment_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.221155Z", "completed_at": "2024-07-20T03:24:14.224066Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.224538Z", "completed_at": "2024-07-20T03:24:14.224543Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004394054412841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_line_bill_payment_id__index__source_relation.0a7e17967c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\"\n    group by bill_payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.226004Z", "completed_at": "2024-07-20T03:24:14.228739Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.229196Z", "completed_at": "2024-07-20T03:24:14.229200Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004096031188964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id.1dbb366150", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\"\nwhere bill_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.230652Z", "completed_at": "2024-07-20T03:24:14.233711Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.234165Z", "completed_at": "2024-07-20T03:24:14.234169Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0044519901275634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bundle_bundle_id__source_relation.e241a21ebc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bundle_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bundle\"\n    group by bundle_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.235586Z", "completed_at": "2024-07-20T03:24:14.238135Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.238566Z", "completed_at": "2024-07-20T03:24:14.238569Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003858804702758789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id.382e1dad60", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bundle\"\nwhere bundle_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.239972Z", "completed_at": "2024-07-20T03:24:14.243861Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.244322Z", "completed_at": "2024-07-20T03:24:14.244326Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0052568912506103516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_line_credit_memo_id__index__source_relation.7a43f0e186", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\"\n    group by credit_memo_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.245777Z", "completed_at": "2024-07-20T03:24:14.248362Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.248809Z", "completed_at": "2024-07-20T03:24:14.248813Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003938198089599609, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id.58953be02b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\"\nwhere credit_memo_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.250229Z", "completed_at": "2024-07-20T03:24:14.252974Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.253421Z", "completed_at": "2024-07-20T03:24:14.253425Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0041010379791259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_credit_memo_id__source_relation.917f24c5ca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__credit_memo\"\n    group by credit_memo_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.254844Z", "completed_at": "2024-07-20T03:24:14.257501Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.257937Z", "completed_at": "2024-07-20T03:24:14.257941Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003991842269897461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id.d921d2b152", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__credit_memo\"\nwhere credit_memo_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.259414Z", "completed_at": "2024-07-20T03:24:14.262377Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.262828Z", "completed_at": "2024-07-20T03:24:14.262831Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004354953765869141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__customer_customer_id__source_relation.61cc22a568", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__customer\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.264239Z", "completed_at": "2024-07-20T03:24:14.267655Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.268092Z", "completed_at": "2024-07-20T03:24:14.268095Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004748821258544922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id.98232a9723", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__customer\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.269492Z", "completed_at": "2024-07-20T03:24:14.272566Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.273023Z", "completed_at": "2024-07-20T03:24:14.273029Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004436016082763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_line_deposit_id__index__source_relation.443de63985", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__deposit_line\"\n    group by deposit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.274463Z", "completed_at": "2024-07-20T03:24:14.277017Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.277457Z", "completed_at": "2024-07-20T03:24:14.277460Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003895998001098633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id.d615f463e1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__deposit_line\"\nwhere deposit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.278845Z", "completed_at": "2024-07-20T03:24:14.282115Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.282581Z", "completed_at": "2024-07-20T03:24:14.282585Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0046198368072509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__deposit_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified cash account and a credit record to either undeposited funds or a\nspecific other account indicated in the deposit line.\n*/\n\n--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith deposits as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__deposit\"\n),\n\ndeposit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__deposit_line\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\nuf_accounts as (\n\n    select\n        account_id,\n        source_relation\n    from accounts\n\n    where account_sub_type = 'UndepositedFunds'\n        and is_active\n        and not is_sub_account\n),\n\ndeposit_join as (\n\n    select\n        deposits.deposit_id as transaction_id,\n        deposits.source_relation,\n        deposit_lines.index,\n        deposits.transaction_date,\n        deposit_lines.amount,\n        deposit_lines.amount * (coalesce(deposits.home_total_amount/deposits.total_amount, 1)) as converted_amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.deposit_account_id, uf_accounts.account_id) as deposit_from_acct_id,\n        deposit_customer_id as customer_id,\n        deposit_lines.deposit_class_id as class_id,\n        deposits.department_id\n\n    from deposits\n\n    inner join deposit_lines\n        on deposits.deposit_id = deposit_lines.deposit_id\n        and deposits.source_relation = deposit_lines.source_relation\n\n    left join uf_accounts\n        on uf_accounts.source_relation = deposits.source_relation\n\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        deposit_to_acct_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        deposit_from_acct_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source\n    from deposit_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__deposit_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.284115Z", "completed_at": "2024-07-20T03:24:14.287414Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.287908Z", "completed_at": "2024-07-20T03:24:14.287913Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0048139095306396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__deposit_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith deposits as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__deposit\"\n), \n\ndeposit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__deposit_line\"\n),\n\nfinal as (\n\n    select\n        deposits.deposit_id as transaction_id,\n        deposits.source_relation,\n        deposit_lines.index as transaction_line_id,\n        cast(null as TEXT) as doc_number,\n        'deposit' as transaction_type,\n        deposits.transaction_date,\n        deposit_lines.deposit_account_id as account_id,\n        deposit_lines.deposit_class_id as class_id,\n        deposits.department_id,\n        deposit_lines.deposit_customer_id as customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        deposit_lines.description,\n        deposit_lines.amount,\n        deposit_lines.amount * (coalesce(deposits.home_total_amount/deposits.total_amount, 1)) as converted_amount,\n        deposits.total_amount,\n        deposits.total_amount * (coalesce(deposits.home_total_amount/deposits.total_amount, 1)) as total_converted_amount\n    from deposits\n    \n    inner join deposit_lines \n        on deposits.deposit_id = deposit_lines.deposit_id\n        and deposits.source_relation = deposit_lines.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__deposit_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.289448Z", "completed_at": "2024-07-20T03:24:14.293219Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.293673Z", "completed_at": "2024-07-20T03:24:14.293677Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005178928375244141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_deposit_id__source_relation.5574d8e908", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__deposit\"\n    group by deposit_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.295077Z", "completed_at": "2024-07-20T03:24:14.297644Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.298071Z", "completed_at": "2024-07-20T03:24:14.298075Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003862142562866211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id.880b8c37b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__deposit\"\nwhere deposit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.299501Z", "completed_at": "2024-07-20T03:24:14.302478Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.302936Z", "completed_at": "2024-07-20T03:24:14.302940Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004355192184448242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_line_estimate_id__index__source_relation.cc61ab0953", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__estimate_line\"\n    group by estimate_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.304364Z", "completed_at": "2024-07-20T03:24:14.306998Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.307435Z", "completed_at": "2024-07-20T03:24:14.307438Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00396275520324707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id.c060f99b4c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__estimate_line\"\nwhere estimate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.308846Z", "completed_at": "2024-07-20T03:24:14.311502Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.311953Z", "completed_at": "2024-07-20T03:24:14.311956Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004008769989013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_estimate_id__source_relation.412260b882", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__estimate\"\n    group by estimate_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.313355Z", "completed_at": "2024-07-20T03:24:14.316010Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.316439Z", "completed_at": "2024-07-20T03:24:14.316443Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00397801399230957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id.0331d3c310", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__estimate\"\nwhere estimate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.318912Z", "completed_at": "2024-07-20T03:24:14.322158Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.322620Z", "completed_at": "2024-07-20T03:24:14.322624Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005682945251464844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_bundle_invoice_id__index__invoice_line_index__source_relation.5370e9fcd0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, invoice_line_index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle\"\n    group by invoice_id, index, invoice_line_index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.324075Z", "completed_at": "2024-07-20T03:24:14.326739Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.327188Z", "completed_at": "2024-07-20T03:24:14.327192Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0040378570556640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id.cfd59b83a9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.328638Z", "completed_at": "2024-07-20T03:24:14.331377Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.331814Z", "completed_at": "2024-07-20T03:24:14.331818Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004066944122314453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id.c9b9c8f8f4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.333233Z", "completed_at": "2024-07-20T03:24:14.335908Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.336379Z", "completed_at": "2024-07-20T03:24:14.336382Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004061222076416016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_invoice_id__index__source_relation.99b74bc327", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_line\"\n    group by invoice_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.337808Z", "completed_at": "2024-07-20T03:24:14.340361Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.340792Z", "completed_at": "2024-07-20T03:24:14.340795Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0038712024688720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id.0424087a8f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_line\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.342194Z", "completed_at": "2024-07-20T03:24:14.345930Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.346387Z", "completed_at": "2024-07-20T03:24:14.346391Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005176067352294922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_invoice_id__source_relation.ef51800044", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice\"\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.347887Z", "completed_at": "2024-07-20T03:24:14.350370Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.350801Z", "completed_at": "2024-07-20T03:24:14.350805Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0038008689880371094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id.b6d8e1ad7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.352203Z", "completed_at": "2024-07-20T03:24:14.354956Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.355401Z", "completed_at": "2024-07-20T03:24:14.355406Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004097938537597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified expense account and credit record to accounts payable for each bill transaction.\n*/\n\n--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill\"\n),\n\nbill_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.expense_account_id as parent_expense_account_id,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nbill_join as (\n    select\n        bills.bill_id as transaction_id,\n        bills.source_relation,\n        bill_lines.index,\n        bills.transaction_date,\n        bill_lines.amount,\n        (bill_lines.amount * coalesce(bills.exchange_rate, 1)) as converted_amount,\n        coalesce(bill_lines.account_expense_account_id,items.asset_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        coalesce(bill_lines.item_expense_class_id, bill_lines.account_expense_class_id) as class_id,\n        bills.vendor_id,\n        bills.department_id\n    from bills\n\n    inner join bill_lines\n        on bills.bill_id = bill_lines.bill_id\n        and bills.source_relation = bill_lines.source_relation\n\n    left join items\n        on bill_lines.item_expense_item_id = items.item_id\n        and bill_lines.source_relation = items.source_relation\n),\n\nfinal as (\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payed_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payable_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source\n    from bill_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__bill_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.356857Z", "completed_at": "2024-07-20T03:24:14.359929Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.360414Z", "completed_at": "2024-07-20T03:24:14.360418Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004509925842285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill\" \n),\n\nbill_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bill_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        bills.bill_id as transaction_id,\n        bills.source_relation,\n        bill_lines.index as transaction_line_id,\n        bills.doc_number,\n        'bill' as transaction_type,\n        bills.transaction_date,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id) as account_id,\n        bill_lines.account_expense_class_id as class_id,\n        bills.department_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        bills.vendor_id,\n        coalesce(bill_lines.account_expense_billable_status, bill_lines.item_expense_billable_status) as billable_status,\n        coalesce(bill_lines.description, items.name) as description,\n        bill_lines.amount,\n        bill_lines.amount * (coalesce(bills.exchange_rate, 1)) as converted_amount,\n        bills.total_amount,\n        bills.total_amount * (coalesce(bills.exchange_rate, 1)) as total_converted_amount\n    from bills\n\n    inner join bill_lines \n        on bills.bill_id = bill_lines.bill_id\n        and bills.source_relation = bill_lines.source_relation\n\n    left join items\n        on bill_lines.item_expense_item_id = items.item_id\n        and bill_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__bill_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.362562Z", "completed_at": "2024-07-20T03:24:14.365882Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.366321Z", "completed_at": "2024-07-20T03:24:14.366326Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005163908004760742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__credit_memo_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to Discounts Refunds Given and a credit record to the specified income account.\n*/\n\n--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith credit_memos as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__credit_memo\"\n),\n\ncredit_memo_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\ndf_accounts as (\n\n    select\n        account_id as account_id,\n        currency_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n        and not is_sub_account\n),\n\ncredit_memo_join as (\n\n    select\n        credit_memos.credit_memo_id as transaction_id,\n        credit_memos.source_relation,\n        credit_memo_lines.index,\n        credit_memos.transaction_date,\n        credit_memo_lines.amount,\n        (credit_memo_lines.amount * coalesce(credit_memos.exchange_rate, 1)) as converted_amount,\n        coalesce(credit_memo_lines.sales_item_account_id, items.income_account_id, items.expense_account_id) as account_id,\n        credit_memos.customer_id,\n        coalesce(credit_memo_lines.sales_item_class_id, credit_memo_lines.discount_class_id, credit_memos.class_id) as class_id,\n        credit_memos.department_id,\n        credit_memos.currency_id\n\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos.credit_memo_id = credit_memo_lines.credit_memo_id\n        and credit_memos.source_relation = credit_memo_lines.source_relation\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.item_id\n        and credit_memo_lines.source_relation = items.source_relation\n\n    where coalesce(credit_memo_lines.discount_account_id, credit_memo_lines.sales_item_account_id, credit_memo_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        credit_memo_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount * -1 as amount,\n        converted_amount * -1 as converted_amount,\n        account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'credit_memo' as transaction_source\n    from credit_memo_join\n\n    union all\n\n    select\n        transaction_id,\n        credit_memo_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount * -1 as amount,\n        converted_amount * -1 as converted_amount,\n        df_accounts.account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'credit_memo' as transaction_source\n    from credit_memo_join\n\n    left join df_accounts\n        on df_accounts.currency_id = credit_memo_join.currency_id\n        and df_accounts.source_relation = credit_memo_join.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__credit_memo_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.367752Z", "completed_at": "2024-07-20T03:24:14.371685Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.372137Z", "completed_at": "2024-07-20T03:24:14.372143Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005280017852783203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__credit_memo_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith credit_memos as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__credit_memo\"\n),\n\ncredit_memo_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        credit_memos.credit_memo_id as transaction_id,\n        credit_memos.source_relation,\n        credit_memo_lines.index as transaction_line_id,\n        credit_memos.doc_number,\n        'credit_memo' as transaction_type,\n        credit_memos.transaction_date,\n        credit_memo_lines.sales_item_item_id as item_id,\n        credit_memo_lines.sales_item_quantity as item_quantity,\n        credit_memo_lines.sales_item_unit_price as item_unit_price,\n        case when credit_memo_lines.sales_item_account_id is null\n            then coalesce(items.income_account_id, items.asset_account_id, items.expense_account_id) \n            else credit_memo_lines.sales_item_account_id\n                end as account_id,\n        credit_memos.class_id,\n        credit_memos.department_id,\n        credit_memos.customer_id, \n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        credit_memo_lines.description,\n        credit_memo_lines.amount * -1 as amount,\n        credit_memo_lines.amount * coalesce(-credit_memos.exchange_rate, -1) as converted_amount,\n        credit_memos.total_amount * -1 as total_amount,\n        credit_memos.total_amount * coalesce(-credit_memos.exchange_rate, -1) as total_converted_amount\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos.credit_memo_id = credit_memo_lines.credit_memo_id\n        and credit_memos.source_relation = credit_memo_lines.source_relation\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.item_id\n        and credit_memo_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__credit_memo_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.373547Z", "completed_at": "2024-07-20T03:24:14.377914Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.378359Z", "completed_at": "2024-07-20T03:24:14.378362Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005694150924682617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__invoice_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to accounts receivable and a credit record to a specified revenue account indicated on the invoice line.\n*/\n\n--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice\"\n),\n\ninvoice_lines as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_line\"\n),\n\nitems as (\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\naccounts as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\n\n\n\ninvoice_bundles as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle\"\n),\n\nbundles as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bundle\"\n),\n\nbundle_items as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__bundle_item\"\n),\n\nincome_accounts as (\n\n    select *\n    from accounts\n\n    where account_sub_type = 'SalesOfProductIncome'\n),\n\nbundle_income_accounts as (\n\n    select distinct\n        coalesce(parent.income_account_id, income_accounts.account_id) as account_id,\n        coalesce(parent.source_relation, income_accounts.source_relation) as source_relation,\n        bundle_items.bundle_id\n\n    from items\n\n    left join items as parent\n        on items.parent_item_id = parent.item_id\n        and items.source_relation = parent.source_relation\n\n    inner join income_accounts\n        on income_accounts.account_id = items.income_account_id\n        and income_accounts.source_relation = items.source_relation\n\n    inner join bundle_items\n        on bundle_items.item_id = items.item_id\n        and bundle_items.source_relation = items.source_relation\n),\n\n\nar_accounts as (\n\n    select \n        account_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n        and not is_sub_account\n),\n\ninvoice_join as (\n\n    select\n        invoices.invoice_id as transaction_id,\n        invoices.source_relation,\n        invoice_lines.index,\n        invoices.transaction_date as transaction_date,\n\n        \n        case when invoice_lines.bundle_id is not null and invoices.total_amount = 0 then invoices.total_amount\n            else invoice_lines.amount\n        end as amount,\n        case when invoice_lines.bundle_id is not null and invoices.total_amount = 0 \n            then (invoices.total_amount * coalesce(invoices.exchange_rate, 1))\n            else (invoice_lines.amount * coalesce(invoices.exchange_rate, 1))\n        end as converted_amount,\n        case when invoice_lines.detail_type is not null then invoice_lines.detail_type\n            when coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.sales_item_account_id) is not null then 'SalesItemLineDetail'\n            when invoice_lines.discount_account_id is not null then 'DiscountLineDetail'\n            when coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.discount_account_id, invoice_lines.sales_item_account_id) is null then 'NoAccountMapping'\n        end as invoice_line_transaction_type,\n        coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.discount_account_id, invoice_lines.sales_item_account_id) as account_id,\n\n        \n\n        coalesce(invoice_lines.sales_item_class_id, invoice_lines.discount_class_id, invoices.class_id) as class_id,\n\n        invoices.customer_id,\n        invoices.department_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices.invoice_id = invoice_lines.invoice_id\n        and invoices.source_relation = invoice_lines.source_relation\n\n    left join items\n        on coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) = items.item_id\n        and invoice_lines.source_relation = items.source_relation\n\n    \n    left join bundle_income_accounts\n        on bundle_income_accounts.bundle_id = invoice_lines.bundle_id\n        and bundle_income_accounts.source_relation = invoice_lines.source_relation\n\n    \n),\n\ninvoice_filter as (\n\n    select *\n    from invoice_join\n    where invoice_line_transaction_type not in ('SubTotalLineDetail','NoAccountMapping')\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        invoice_filter.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        account_id,\n        class_id,\n        department_id,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'debit'\n            else 'credit' \n        end as transaction_type,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'invoice discount'\n            else 'invoice'\n        end as transaction_source\n    from invoice_filter\n\n    union all\n\n    select\n        transaction_id,\n        invoice_filter.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        ar_accounts.account_id,\n        class_id,\n        department_id,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'credit'\n            else 'debit' \n        end as transaction_type,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'invoice discount'\n            else 'invoice'\n        end as transaction_source\n    from invoice_filter\n\n    left join ar_accounts\n        on ar_accounts.source_relation = invoice_filter.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__invoice_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.379767Z", "completed_at": "2024-07-20T03:24:14.382860Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.383299Z", "completed_at": "2024-07-20T03:24:14.383303Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0044291019439697266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__invoice_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice\"\n),\n\ninvoice_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        invoices.invoice_id as transaction_id,\n        invoices.source_relation,\n        invoice_lines.index as transaction_line_id,\n        invoices.doc_number,\n        'invoice' as transaction_type,\n        invoices.transaction_date,\n        coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) as item_id,\n        coalesce(invoice_lines.quantity, invoice_lines.sales_item_quantity) as item_quantity,\n        invoice_lines.sales_item_unit_price as item_unit_price,\n        case when invoice_lines.account_id is null\n            then coalesce(items.income_account_id, items.expense_account_id, items.asset_account_id)\n            else invoice_lines.account_id\n                end as account_id,\n        coalesce(invoice_lines.discount_class_id, invoice_lines.sales_item_class_id) as class_id,\n        invoices.department_id,\n        invoices.customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        invoice_lines.description,\n        invoice_lines.amount,\n        invoice_lines.amount * coalesce(invoices.exchange_rate, 1) as converted_amount,\n        invoices.total_amount,\n        invoices.total_amount * coalesce(invoices.exchange_rate, 1) as total_converted_amount\n    from invoices\n\n    inner join invoice_lines\n        on invoices.invoice_id = invoice_lines.invoice_id\n        and invoices.source_relation = invoice_lines.source_relation\n\n    left join items\n        on coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) = items.item_id\n        and invoice_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__invoice_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.384728Z", "completed_at": "2024-07-20T03:24:14.387854Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.388307Z", "completed_at": "2024-07-20T03:24:14.388311Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004483938217163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__item_item_id__source_relation.169465a2a6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        item_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\"\n    group by item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.389719Z", "completed_at": "2024-07-20T03:24:14.392318Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.392753Z", "completed_at": "2024-07-20T03:24:14.392757Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003907918930053711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__item_item_id.da906d8fb9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\"\nwhere item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.394127Z", "completed_at": "2024-07-20T03:24:14.397631Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.398071Z", "completed_at": "2024-07-20T03:24:14.398074Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004827976226806641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id.39198c4ff2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__journal_entry\"\nwhere journal_entry_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.399469Z", "completed_at": "2024-07-20T03:24:14.440986Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.441446Z", "completed_at": "2024-07-20T03:24:14.441451Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0429229736328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__journal_entry_double_entry", "compiled": true, "compiled_code": "/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\n\n--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith journal_entries as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__journal_entry\"\n),\n\njournal_entry_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\n),\n\nfinal as (\n\n    select\n        journal_entries.journal_entry_id as transaction_id,\n        journal_entries.source_relation,\n        journal_entry_lines.index,\n        journal_entries.transaction_date,\n        journal_entry_lines.customer_id,\n        journal_entry_lines.vendor_id,\n        journal_entry_lines.amount,\n        (journal_entry_lines.amount * coalesce(journal_entries.exchange_rate, 1)) as converted_amount,\n        journal_entry_lines.account_id,\n        class_id,\n        journal_entry_lines.department_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries.journal_entry_id = journal_entry_lines.journal_entry_id\n        and journal_entries.source_relation = journal_entry_lines.source_relation\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__journal_entry_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.442952Z", "completed_at": "2024-07-20T03:24:14.445441Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.445876Z", "completed_at": "2024-07-20T03:24:14.445880Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0038111209869384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__journal_entry_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith journal_entries as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__journal_entry\"\n),\n\njournal_entry_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\n),\n\nfinal as (\n\n    select\n        journal_entries.journal_entry_id as transaction_id,\n        journal_entries.source_relation,\n        journal_entry_lines.index as transaction_line_id,\n        journal_entries.doc_number,\n        'journal_entry' as transaction_type,\n        journal_entries.transaction_date,\n        journal_entry_lines.account_id,\n        journal_entry_lines.class_id,\n        journal_entry_lines.department_id,\n        journal_entry_lines.customer_id,\n        journal_entry_lines.vendor_id,\n        cast(billable_status as TEXT) as billable_status,\n        journal_entry_lines.description,\n        case when lower(journal_entry_lines.posting_type) = 'credit'\n            then journal_entry_lines.amount * -1 \n            else journal_entry_lines.amount \n        end as amount,\n        case when lower(journal_entry_lines.posting_type) = 'credit'\n            then journal_entry_lines.amount * coalesce(-journal_entries.exchange_rate, -1)\n            else journal_entry_lines.amount * coalesce(journal_entries.exchange_rate, 1)\n        end as converted_amount,\n        journal_entries.total_amount,\n        journal_entries.total_amount * coalesce(journal_entries.exchange_rate, 1) as total_converted_amount\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries.journal_entry_id = journal_entry_lines.journal_entry_id\n        and journal_entries.source_relation = journal_entry_lines.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__journal_entry_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.447281Z", "completed_at": "2024-07-20T03:24:14.450652Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.451109Z", "completed_at": "2024-07-20T03:24:14.451113Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004741191864013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit.ab661907c3", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        posting_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\n    group by posting_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Credit','Debit'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.452595Z", "completed_at": "2024-07-20T03:24:14.455748Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.456223Z", "completed_at": "2024-07-20T03:24:14.456228Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00458073616027832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__journal_entry_line_journal_entry_id__index__source_relation.0cd1d9f232", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        journal_entry_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\n    group by journal_entry_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.457688Z", "completed_at": "2024-07-20T03:24:14.460422Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.460910Z", "completed_at": "2024-07-20T03:24:14.460914Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004187107086181641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id.bd89a6f784", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\nwhere journal_entry_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.462420Z", "completed_at": "2024-07-20T03:24:14.466961Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.467433Z", "completed_at": "2024-07-20T03:24:14.467438Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005955934524536133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_line_payment_id__index__source_relation.25be3cf2e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__payment_line\"\n    group by payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.469025Z", "completed_at": "2024-07-20T03:24:14.471824Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.472255Z", "completed_at": "2024-07-20T03:24:14.472259Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004227876663208008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id.6351e3fe26", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__payment_line\"\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.473928Z", "completed_at": "2024-07-20T03:24:14.478476Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.478978Z", "completed_at": "2024-07-20T03:24:14.478983Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006188869476318359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__invoice_join", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice\"\n),\n\ninvoice_linked as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn\"\n),\n\n\nestimates as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__estimate\"\n),\n\n\npayments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__payment\"\n),\n\npayment_lines_payment as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__payment_line\"\n\n    where invoice_id is not null\n),\n\ninvoice_est as (\n\n    select\n        invoices.invoice_id,\n        invoice_linked.estimate_id,\n        invoices.source_relation\n    from invoices\n\n    left join invoice_linked\n        on invoices.invoice_id = invoice_linked.invoice_id\n        and invoices.source_relation = invoice_linked.source_relation\n\n    where invoice_linked.estimate_id is not null\n),\n\ninvoice_pay as (\n\n    select\n        invoices.invoice_id,\n        invoice_linked.payment_id,\n        invoices.source_relation\n    from invoices\n\n    left join invoice_linked\n        on invoices.invoice_id = invoice_linked.invoice_id\n        and invoices.source_relation = invoice_linked.source_relation\n\n    where invoice_linked.payment_id is not null\n),\n\ninvoice_link as (\n\n    select\n        invoices.*,\n        invoice_est.estimate_id,\n        invoice_pay.payment_id\n    from invoices\n\n    left join invoice_est\n        on invoices.invoice_id = invoice_est.invoice_id\n        and invoices.source_relation = invoice_est.source_relation\n\n    left join invoice_pay\n        on invoices.invoice_id = invoice_pay.invoice_id\n        and invoices.source_relation = invoice_pay.source_relation\n),\n\nfinal as (\n\n    select\n        cast('invoice' as TEXT) as transaction_type,\n        invoice_link.invoice_id as transaction_id,\n        invoice_link.source_relation,\n        invoice_link.doc_number,\n        invoice_link.estimate_id,\n        invoice_link.department_id,\n        invoice_link.customer_id as customer_id,\n        invoice_link.billing_address_id,\n        invoice_link.shipping_address_id,\n        invoice_link.delivery_type,\n        invoice_link.total_amount as total_amount,\n        (invoice_link.total_amount * coalesce(invoice_link.exchange_rate, 1)) as total_converted_amount,\n        invoice_link.balance as current_balance,\n\n        \n        coalesce(estimates.total_amount, 0) as estimate_total_amount,\n        coalesce(estimates.total_amount, 0) * coalesce(estimates.exchange_rate, 1) as estimate_total_converted_amount,\n        estimates.transaction_status as estimate_status,\n\n        \n\n        invoice_link.due_date as due_date,\n        min(payments.transaction_date) as initial_payment_date,\n        max(payments.transaction_date) as recent_payment_date,\n        sum(coalesce(payment_lines_payment.amount, 0)) as total_current_payment,\n        sum(coalesce(payment_lines_payment.amount, 0) * coalesce(payments.exchange_rate, 1)) as total_current_converted_payment\n\n    from invoice_link\n\n    \n    left join estimates\n        on invoice_link.estimate_id = estimates.estimate_id\n        and invoice_link.source_relation = estimates.source_relation\n    \n    left join payments\n        on invoice_link.payment_id = payments.payment_id\n        and invoice_link.source_relation = payments.source_relation\n\n    left join payment_lines_payment\n        on payments.payment_id = payment_lines_payment.payment_id\n        and payments.source_relation = payment_lines_payment.source_relation\n        and invoice_link.invoice_id = payment_lines_payment.invoice_id\n        and invoice_link.source_relation = payment_lines_payment.source_relation\n\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__invoice_join\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.480441Z", "completed_at": "2024-07-20T03:24:14.484632Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.504901Z", "completed_at": "2024-07-20T03:24:14.504907Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.025555849075317383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__payment_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to either undeposited funds or a specified cash account and a credit record to accounts receivable.\n*/\n\n--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith payments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__payment\"\n),\n\npayment_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__payment_line\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\nar_accounts as (\n\n    select\n        account_id,\n        currency_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n        and not is_sub_account\n),\n\npayment_join as (\n\n    select\n        payments.payment_id as transaction_id,\n        payments.source_relation,\n        row_number() over(partition by payments.payment_id, payments.source_relation \n            order by payments.source_relation, payments.transaction_date) - 1 as index,\n        payments.transaction_date,\n        payments.total_amount as amount,\n        (payments.total_amount * coalesce(payments.exchange_rate, 1)) as converted_amount,\n        payments.deposit_to_account_id,\n        payments.receivable_account_id,\n        payments.customer_id,\n        payments.currency_id\n    from payments\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        payment_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        deposit_to_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source\n    from payment_join\n\n    union all\n\n    select\n        transaction_id,\n        payment_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        coalesce(receivable_account_id, ar_accounts.account_id) as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source\n    from payment_join\n\n    left join ar_accounts\n        on ar_accounts.currency_id = payment_join.currency_id\n        and ar_accounts.source_relation = payment_join.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__payment_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.506748Z", "completed_at": "2024-07-20T03:24:14.510733Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.511833Z", "completed_at": "2024-07-20T03:24:14.511836Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006104946136474609, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_payment_id__source_relation.1998a8282e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__payment\"\n    group by payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.513309Z", "completed_at": "2024-07-20T03:24:14.516065Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.516503Z", "completed_at": "2024-07-20T03:24:14.516507Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0040929317474365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id.ca2c1ef54f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__payment\"\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.517947Z", "completed_at": "2024-07-20T03:24:14.521499Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.521947Z", "completed_at": "2024-07-20T03:24:14.521950Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004920005798339844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard.7de7edf458", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        payment_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__purchase\"\n    group by payment_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Cash','Check','CreditCard'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.523384Z", "completed_at": "2024-07-20T03:24:14.527032Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.527481Z", "completed_at": "2024-07-20T03:24:14.527485Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005015850067138672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_purchase_id__source_relation.172340b49e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__purchase\"\n    group by purchase_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.528931Z", "completed_at": "2024-07-20T03:24:14.531489Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.531914Z", "completed_at": "2024-07-20T03:24:14.531917Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0038802623748779297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id.fc2090959b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__purchase\"\nwhere purchase_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.533315Z", "completed_at": "2024-07-20T03:24:14.535586Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.536018Z", "completed_at": "2024-07-20T03:24:14.536021Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0035848617553710938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__purchase_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to a specified expense account and a credit record to the payment account.\n*/\nwith purchases as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__purchase\"\n),\n\npurchase_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__purchase_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.expense_account_id as parent_expense_account_id\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\npurchase_join as (\n\n    select\n        purchases.purchase_id as transaction_id,\n        purchases.source_relation,\n        purchase_lines.index,\n        purchases.transaction_date,\n        purchase_lines.amount,\n        (purchase_lines.amount * coalesce(purchases.exchange_rate, 1)) as converted_amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, false) = true then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, false) = true then 'credit' else 'debit' end as payed_to_transaction_type,\n        purchases.customer_id,\n        coalesce(purchase_lines.item_expense_class_id, purchase_lines.account_expense_class_id) as class_id,\n        purchases.vendor_id,\n        purchases.department_id\n    from purchases\n\n    inner join purchase_lines\n        on purchases.purchase_id = purchase_lines.purchase_id\n        and purchases.source_relation = purchase_lines.source_relation\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.item_id\n        and purchase_lines.source_relation = items.source_relation\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payed_from_account_id as account_id,\n        class_id,\n        department_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payed_to_account_id as account_id,\n        class_id,\n        department_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source\n    from purchase_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__purchase_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.537424Z", "completed_at": "2024-07-20T03:24:14.539753Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.540184Z", "completed_at": "2024-07-20T03:24:14.540188Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0036399364471435547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__purchase_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_purchase variable within your dbt_project.yml file to False.\n\n\nwith purchases as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__purchase\"\n),\n\nitems as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\npurchase_lines as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__purchase_line\"\n),\n\nfinal as (\n    select\n        purchases.purchase_id as transaction_id,\n        purchases.source_relation,\n        purchase_lines.index as transaction_line_id,\n        purchases.doc_number,\n        'purchase' as transaction_type,\n        purchases.transaction_date,\n        coalesce(purchase_lines.account_expense_account_id, items.expense_account_id) as account_id,\n        purchase_lines.account_expense_class_id as class_id,\n        purchases.department_id,\n        coalesce(purchases.customer_id, account_expense_customer_id, item_expense_customer_id) as customer_id,\n        purchases.vendor_id,\n        coalesce(purchase_lines.account_expense_billable_status, purchase_lines.item_expense_billable_status) as billable_status,\n        purchase_lines.description,\n        case when coalesce(purchases.credit, false)\n            then -1 * purchase_lines.amount\n            else purchase_lines.amount\n        end as amount,\n        case when coalesce(purchases.credit, false)\n            then purchase_lines.amount * coalesce(-purchases.exchange_rate, -1)\n            else purchase_lines.amount * coalesce(purchases.exchange_rate, 1)\n        end as converted_amount,\n        case when coalesce(purchases.credit, false) \n            then -1 * purchases.total_amount\n            else purchases.total_amount\n        end as total_amount,\n        case when coalesce(purchases.credit, false) \n            then purchases.total_amount * coalesce(-purchases.exchange_rate, -1)\n            else purchases.total_amount * coalesce(purchases.exchange_rate, 1)\n        end as total_converted_amount\n    from purchases\n\n    inner join purchase_lines \n        on purchases.purchase_id = purchase_lines.purchase_id\n        and purchases.source_relation = purchase_lines.source_relation\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.item_id\n        and purchase_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__purchase_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.541583Z", "completed_at": "2024-07-20T03:24:14.544294Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.544745Z", "completed_at": "2024-07-20T03:24:14.544748Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004044055938720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_line_purchase_id__index__source_relation.a23c661eb5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__purchase_line\"\n    group by purchase_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.546144Z", "completed_at": "2024-07-20T03:24:14.548727Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.549161Z", "completed_at": "2024-07-20T03:24:14.549167Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003919839859008789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id.5406fca79c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__purchase_line\"\nwhere purchase_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.550606Z", "completed_at": "2024-07-20T03:24:14.554621Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.555079Z", "completed_at": "2024-07-20T03:24:14.555083Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0054090023040771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_line_refund_id__index__source_relation.614411eb40", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\"\n    group by refund_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.556671Z", "completed_at": "2024-07-20T03:24:14.559216Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.559650Z", "completed_at": "2024-07-20T03:24:14.559654Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003998994827270508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id.57df809b80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\"\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.561076Z", "completed_at": "2024-07-20T03:24:14.563996Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.564448Z", "completed_at": "2024-07-20T03:24:14.564452Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004269123077392578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_line_sales_receipt_id__index__source_relation.20e80dcbd5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\"\n    group by sales_receipt_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.565854Z", "completed_at": "2024-07-20T03:24:14.568499Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.568943Z", "completed_at": "2024-07-20T03:24:14.568946Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0039730072021484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.9be0667fc3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\"\nwhere sales_receipt_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.570357Z", "completed_at": "2024-07-20T03:24:14.573356Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.573789Z", "completed_at": "2024-07-20T03:24:14.573792Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004308938980102539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__refund_receipt_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified asset account and a credit record the specified cash account.\n*/\n\n--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith refund_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__refund_receipt\"\n),\n\nrefund_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nrefund_receipt_join as (\n\n    select\n        refund_receipts.refund_id as transaction_id,\n        refund_receipts.source_relation,\n        refund_receipt_lines.index,\n        refund_receipts.transaction_date,\n        refund_receipt_lines.amount,\n        (refund_receipt_lines.amount * coalesce(refund_receipts.exchange_rate, 1)) as converted_amount,\n        refund_receipts.deposit_to_account_id as credit_to_account_id,\n        coalesce(refund_receipt_lines.discount_account_id, refund_receipt_lines.sales_item_account_id, items.parent_income_account_id, items.income_account_id) as debit_account_id,\n        refund_receipts.customer_id,\n        coalesce(refund_receipt_lines.sales_item_class_id, refund_receipt_lines.discount_class_id, refund_receipts.class_id) as class_id,\n        refund_receipts.department_id\n    from refund_receipts\n\n    inner join refund_receipt_lines\n        on refund_receipts.refund_id = refund_receipt_lines.refund_id\n        and refund_receipts.source_relation = refund_receipt_lines.source_relation\n\n    left join items\n        on refund_receipt_lines.sales_item_item_id = items.item_id\n        and refund_receipt_lines.source_relation = items.source_relation\n\n    where coalesce(refund_receipt_lines.discount_account_id, refund_receipt_lines.sales_item_account_id, refund_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        credit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'refund_receipt' as transaction_source\n    from refund_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        debit_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'refund_receipt' as transaction_source\n    from refund_receipt_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__refund_receipt_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.575172Z", "completed_at": "2024-07-20T03:24:14.578850Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.579291Z", "completed_at": "2024-07-20T03:24:14.579295Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005251884460449219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__refund_receipt_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith refund_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__refund_receipt\"\n),\n\nrefund_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        refund_receipts.refund_id as transaction_id,\n        refund_receipts.source_relation,\n        refund_receipt_lines.index as transaction_line_id,\n        refund_receipts.doc_number,\n        'refund_receipt' as transaction_type,\n        refund_receipts.transaction_date,\n        refund_receipt_lines.sales_item_item_id as item_id,\n        refund_receipt_lines.sales_item_quantity as item_quantity,\n        refund_receipt_lines.sales_item_unit_price as item_unit_price,\n        case when refund_receipt_lines.sales_item_account_id is null\n            then coalesce(items.asset_account_id, items.income_account_id, items.expense_account_id) \n            else refund_receipt_lines.sales_item_account_id\n                end as account_id,\n        refund_receipts.class_id,\n        refund_receipts.department_id,\n        refund_receipts.customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        refund_receipt_lines.description,\n        refund_receipt_lines.amount * -1 as amount,\n        refund_receipt_lines.amount * coalesce(-refund_receipts.exchange_rate, -1) as converted_amount,\n        refund_receipts.total_amount * -1 as total_amount,\n        refund_receipts.total_amount * coalesce(-refund_receipts.exchange_rate, -1) as total_converted_amount\n    from refund_receipts\n\n    inner join refund_receipt_lines\n        on refund_receipts.refund_id = refund_receipt_lines.refund_id\n        and refund_receipts.source_relation = refund_receipt_lines.source_relation\n\n    left join items\n        on refund_receipt_lines.sales_item_item_id = items.item_id\n        and refund_receipt_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__refund_receipt_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.593747Z", "completed_at": "2024-07-20T03:24:14.597337Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.597837Z", "completed_at": "2024-07-20T03:24:14.597840Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005075931549072266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_refund_id__source_relation.60f976841d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__refund_receipt\"\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.599309Z", "completed_at": "2024-07-20T03:24:14.602000Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.602453Z", "completed_at": "2024-07-20T03:24:14.602457Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004080057144165039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id.29e8a8216e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__refund_receipt\"\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.603904Z", "completed_at": "2024-07-20T03:24:14.606925Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.607364Z", "completed_at": "2024-07-20T03:24:14.607368Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004373073577880859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__sales_receipt_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified cash account and a credit record to the specified asset account.\n*/\n\n--To disable this model, set the using_sales_receipt variable within your dbt_project.yml file to False.\n\n\nwith sales_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__sales_receipt\"\n),\n\nsales_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nsales_receipt_join as (\n\n    select\n        sales_receipts.sales_receipt_id as transaction_id,\n        sales_receipts.source_relation,\n        sales_receipt_lines.index,\n        sales_receipts.transaction_date,\n        case \n            when sales_receipt_lines.discount_account_id is not null \n            then sales_receipt_lines.amount * (-1)\n            else sales_receipt_lines.amount\n        end as amount,\n        case \n            when sales_receipt_lines.discount_account_id is not null \n            then (sales_receipt_lines.amount * coalesce(-sales_receipts.exchange_rate, -1))\n            else (sales_receipt_lines.amount * coalesce(sales_receipts.exchange_rate, 1))\n        end as converted_amount,\n        sales_receipts.deposit_to_account_id as debit_to_account_id,\n        coalesce(sales_receipt_lines.discount_account_id, sales_receipt_lines.sales_item_account_id, items.parent_income_account_id, items.income_account_id) as credit_to_account_id,\n        sales_receipts.customer_id,\n        coalesce(sales_receipt_lines.sales_item_class_id, sales_receipt_lines.discount_class_id, sales_receipts.class_id) as class_id,\n        sales_receipts.department_id\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts.sales_receipt_id = sales_receipt_lines.sales_receipt_id\n        and sales_receipts.source_relation = sales_receipt_lines.source_relation\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.item_id\n        and sales_receipt_lines.source_relation = items.source_relation\n\n    where coalesce(sales_receipt_lines.discount_account_id, sales_receipt_lines.sales_item_account_id, sales_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        debit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'sales_receipt' as transaction_source\n    from sales_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        credit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'sales_receipt' as transaction_source\n    from sales_receipt_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__sales_receipt_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.608764Z", "completed_at": "2024-07-20T03:24:14.612398Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.612862Z", "completed_at": "2024-07-20T03:24:14.612866Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0050008296966552734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__sales_receipt_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_sales_receipt variable within your dbt_project.yml file to False.\n\n\nwith sales_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__sales_receipt\"\n),\n\nsales_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        sales_receipts.sales_receipt_id as transaction_id,\n        sales_receipts.source_relation,\n        sales_receipt_lines.index as transaction_line_id,\n        sales_receipts.doc_number,\n        'sales_receipt' as transaction_type,\n        sales_receipts.transaction_date,\n        sales_receipt_lines.sales_item_item_id as item_id,\n        sales_receipt_lines.sales_item_quantity as item_quantity,\n        sales_receipt_lines.sales_item_unit_price as item_unit_price,\n        coalesce(items.income_account_id, items.asset_account_id, items.expense_account_id) as account_id,\n        sales_receipts.class_id,\n        sales_receipts.department_id,\n        sales_receipts.customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        sales_receipt_lines.description,\n        sales_receipt_lines.amount,\n        sales_receipt_lines.amount * (coalesce(sales_receipts.exchange_rate, 1)) as converted_amount,\n        sales_receipts.total_amount,\n        sales_receipts.total_amount * (coalesce(sales_receipts.exchange_rate, 1)) as total_converted_amount\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts.sales_receipt_id = sales_receipt_lines.sales_receipt_id   \n        and sales_receipts.source_relation = sales_receipt_lines.source_relation\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.item_id\n        and sales_receipt_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__sales_receipt_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.614332Z", "completed_at": "2024-07-20T03:24:14.617173Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.617639Z", "completed_at": "2024-07-20T03:24:14.617643Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0042378902435302734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_sales_receipt_id__source_relation.36bdbcffde", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__sales_receipt\"\n    group by sales_receipt_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.619145Z", "completed_at": "2024-07-20T03:24:14.621940Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.622390Z", "completed_at": "2024-07-20T03:24:14.622394Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004194736480712891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id.b97c1a238a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__sales_receipt\"\nwhere sales_receipt_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:13.369908Z", "completed_at": "2024-07-20T03:24:14.510030Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.511178Z", "completed_at": "2024-07-20T03:24:14.511180Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2592880725860596, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor_credit_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as vendor_credit_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        exchange_rate,\n        created_at,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        cast(department_id as TEXT) as department_id,\n        private_note,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(vendor_id as TEXT) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor_credit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:13.321440Z", "completed_at": "2024-07-20T03:24:14.509540Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.510305Z", "completed_at": "2024-07-20T03:24:14.510309Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3082389831542969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(vendor_credit_id as TEXT) as vendor_credit_id,\n        index,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_quantity,\n        item_expense_unit_price,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        item_expense_billable_status,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.623865Z", "completed_at": "2024-07-20T03:24:14.628252Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.630168Z", "completed_at": "2024-07-20T03:24:14.630172Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007929086685180664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__transfer_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the receiveing account and a credit record to the sending account.\n*/\n\n--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith transfers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__transfer\"\n),\n\ntransfer_body as (\n\n    select\n        transfer_id as transaction_id,\n        source_relation,\n        row_number() over(partition by transfer_id, source_relation \n            order by source_relation, transaction_date) - 1 as index,\n        transaction_date,\n        amount,\n        amount as converted_amount,\n        from_account_id as credit_to_account_id,\n        to_account_id as debit_to_account_id\n    from transfers\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        credit_to_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'credit' as transaction_type,\n        'transfer' as transaction_source\n    from transfer_body\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        debit_to_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'debit' as transaction_type,\n        'transfer' as transaction_source\n    from transfer_body\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__transfer_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.632193Z", "completed_at": "2024-07-20T03:24:14.641815Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.642984Z", "completed_at": "2024-07-20T03:24:14.642990Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01337289810180664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__transfer_transfer_id__source_relation.bfa4c7345e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__transfer\"\n    group by transfer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.635256Z", "completed_at": "2024-07-20T03:24:14.642046Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.643427Z", "completed_at": "2024-07-20T03:24:14.643430Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013733148574829102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id.c1c80a253c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transfer_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__transfer\"\nwhere transfer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.639304Z", "completed_at": "2024-07-20T03:24:14.642529Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.644128Z", "completed_at": "2024-07-20T03:24:14.644130Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006590366363525391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id.1275a5ab5a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_credit_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor_credit\"\nwhere vendor_credit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.647385Z", "completed_at": "2024-07-20T03:24:14.655447Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.656592Z", "completed_at": "2024-07-20T03:24:14.656598Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011696815490722656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__vendor_credit_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to payable account and a credit record to the expense account.\n*/\n\n--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith vendor_credits as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor_credit\"\n),\n\nvendor_credit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nvendor_credit_join as (\n\n    select\n        vendor_credits.vendor_credit_id as transaction_id,\n        vendor_credits.source_relation,\n        vendor_credit_lines.index,\n        vendor_credits.transaction_date,\n        vendor_credit_lines.amount,\n        (vendor_credit_lines.amount * coalesce(vendor_credits.exchange_rate, 1)) as converted_amount,\n        vendor_credits.payable_account_id as debit_to_account_id,\n        coalesce(vendor_credit_lines.account_expense_account_id, items.parent_income_account_id, items.income_account_id, items.expense_account_id) as credit_account_id,\n        coalesce(account_expense_customer_id, item_expense_customer_id) as customer_id,\n        coalesce(item_expense_class_id, account_expense_class_id) as class_id,\n        vendor_credits.vendor_id,\n        vendor_credits.department_id\n    from vendor_credits\n\n    inner join vendor_credit_lines\n        on vendor_credits.vendor_credit_id = vendor_credit_lines.vendor_credit_id\n        and vendor_credits.source_relation = vendor_credit_lines.source_relation\n\n    left join items\n        on vendor_credit_lines.item_expense_item_id = items.item_id\n        and vendor_credit_lines.source_relation = items.source_relation\n),\n\nfinal as (\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        credit_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'vendor_credit' as transaction_source\n    from vendor_credit_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        debit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'vendor_credit' as transaction_source\n    from vendor_credit_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__vendor_credit_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.650174Z", "completed_at": "2024-07-20T03:24:14.655690Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.657027Z", "completed_at": "2024-07-20T03:24:14.657030Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011821985244750977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__vendor_credit_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith vendor_credits as (\n    \n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor_credit\"\n),\n\nvendor_credit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        vendor_credits.vendor_credit_id as transaction_id,\n        vendor_credits.source_relation,\n        vendor_credit_lines.index as transaction_line_id,\n        vendor_credits.doc_number,\n        'vendor_credit' as transaction_type,\n        vendor_credits.transaction_date,\n        case when vendor_credit_lines.account_expense_account_id is null\n            then items.expense_account_id\n            else vendor_credit_lines.account_expense_account_id\n                end as account_id,\n        coalesce(vendor_credit_lines.account_expense_class_id, vendor_credit_lines.item_expense_class_id) as class_id,\n        vendor_credits.department_id,\n        coalesce(vendor_credit_lines.account_expense_customer_id, vendor_credit_lines.item_expense_customer_id) as customer_id,\n        vendor_credits.vendor_id,\n        coalesce(vendor_credit_lines.account_expense_billable_status, vendor_credit_lines.item_expense_billable_status) as billable_status,\n        vendor_credit_lines.description,\n        vendor_credit_lines.amount * -1 as amount,\n        vendor_credit_lines.amount * coalesce(-vendor_credits.exchange_rate, -1) as converted_amount,\n        vendor_credits.total_amount * -1 as total_amount,\n        vendor_credits.total_amount * coalesce(-vendor_credits.exchange_rate, -1) as total_converted_amount\n    from vendor_credits\n\n    inner join vendor_credit_lines\n        on vendor_credits.vendor_credit_id = vendor_credit_lines.vendor_credit_id\n        and vendor_credits.source_relation = vendor_credit_lines.source_relation\n\n    left join items\n        on vendor_credit_lines.item_expense_item_id = items.item_id\n        and vendor_credit_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__vendor_credit_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.652433Z", "completed_at": "2024-07-20T03:24:14.656170Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.657726Z", "completed_at": "2024-07-20T03:24:14.657729Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012053966522216797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_credit_line_vendor_credit_id__index__source_relation.094b35ac4d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_credit_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line\"\n    group by vendor_credit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:13.418947Z", "completed_at": "2024-07-20T03:24:14.596453Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.596915Z", "completed_at": "2024-07-20T03:24:14.596920Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3057992458343506, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone\n    \n as \n    \n    alternate_phone\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_phone\n    \n as \n    \n    mobile_phone\n    \n, \n    \n    \n    other_contacts\n    \n as \n    \n    other_contacts\n    \n, \n    \n    \n    primary_phone\n    \n as \n    \n    primary_phone\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_identifier\n    \n as \n    \n    tax_identifier\n    \n, \n    \n    \n    term_id\n    \n as \n    \n    term_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_1099\n    \n as \n    \n    vendor_1099\n    \n, \n    \n    \n    web_url\n    \n as \n    \n    web_url\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as vendor_id,\n        account_number,\n        active as is_active,\n        balance,\n        cast(billing_address_id as TEXT) as billing_address_id,\n        company_name,\n        created_at,\n        currency_id,\n        display_name,\n        web_url,\n        vendor_1099 as is_vendor_1099,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.724689Z", "completed_at": "2024-07-20T03:24:14.732189Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.739145Z", "completed_at": "2024-07-20T03:24:14.739151Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015733003616333008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_vendor_id__source_relation.4960d9d21a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor\"\n    group by vendor_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.729635Z", "completed_at": "2024-07-20T03:24:14.740150Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.741727Z", "completed_at": "2024-07-20T03:24:14.741731Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020544052124023438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id.f509a77195", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor\"\nwhere vendor_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.732451Z", "completed_at": "2024-07-20T03:24:14.740523Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.741961Z", "completed_at": "2024-07-20T03:24:14.741964Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020682096481323242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__expenses_union", "compiled": true, "compiled_code": "with expense_union as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__purchase_transactions\"\n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__bill_transactions\"\n     \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__journal_entry_transactions\"\n     \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__deposit_transactions\"\n     \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__vendor_credit_transactions\"\n    \n),\n\ncustomers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__customer\"\n),\n\n\ndepartments as ( \n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__department\"\n),\n\n\nvendors as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor\"\n),\n\nexpense_accounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__account_classifications\"\n    where account_type = 'Expense'\n),\n\nfinal as (\n\n    select \n        'expense' as transaction_source,\n        expense_union.transaction_id,\n        expense_union.source_relation,\n        expense_union.transaction_line_id,\n        expense_union.doc_number,\n        expense_union.transaction_type,\n        expense_union.transaction_date,\n        cast(null as TEXT) as item_id,\n        cast(null as numeric(28,6)) as item_quantity,\n        cast(null as numeric(28,6)) as item_unit_price,\n        expense_union.account_id,\n        expense_accounts.name as account_name,\n        expense_accounts.account_sub_type as account_sub_type,\n        expense_union.class_id,\n        expense_union.department_id,\n        \n        departments.fully_qualified_name as department_name,\n        \n        expense_union.customer_id,\n        customers.fully_qualified_name as customer_name,\n        customers.website as customer_website,\n        expense_union.vendor_id,\n        vendors.display_name as vendor_name,\n        expense_union.billable_status,\n        expense_union.description,\n        expense_union.amount,\n        expense_union.converted_amount,\n        expense_union.total_amount,\n        expense_union.total_converted_amount\n\n    from expense_union\n\n    inner join expense_accounts\n        on expense_union.account_id = expense_accounts.account_id\n        and expense_union.source_relation = expense_accounts.source_relation\n\n    left join customers\n        on customers.customer_id = expense_union.customer_id\n        and customers.source_relation = expense_union.source_relation\n\n    left join vendors\n        on vendors.vendor_id = expense_union.vendor_id\n        and vendors.source_relation = expense_union.source_relation\n\n    \n    left join departments\n        on departments.department_id = expense_union.department_id\n        and departments.source_relation = expense_union.source_relation\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__expenses_union\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.742199Z", "completed_at": "2024-07-20T03:24:14.750312Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.751382Z", "completed_at": "2024-07-20T03:24:14.751387Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02353501319885254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__sales_union", "compiled": true, "compiled_code": "\n\nwith sales_union as (\n\n    \n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__sales_receipt_transactions\"\n    \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__invoice_transactions\"\n\n    \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__refund_receipt_transactions\"\n    \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__credit_memo_transactions\"\n    \n),\n\ncustomers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__customer\"\n),\n\n\ndepartments as ( \n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__department\"\n),\n\n\nvendors as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor\"\n),\n\nincome_accounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__account_classifications\"\n    where account_type = 'Income'\n),\n\nfinal as (\n\n    select \n        'sales' as transaction_source,\n        sales_union.transaction_id,\n        sales_union.source_relation,\n        sales_union.transaction_line_id,\n        sales_union.doc_number,\n        sales_union.transaction_type,\n        sales_union.transaction_date,\n        sales_union.item_id,\n        sales_union.item_quantity,\n        sales_union.item_unit_price,\n        sales_union.account_id,\n        income_accounts.name as account_name,\n        income_accounts.account_sub_type as account_sub_type,\n        sales_union.class_id,\n        sales_union.department_id,\n        \n        departments.fully_qualified_name as department_name,\n        \n        sales_union.customer_id,\n        customers.fully_qualified_name as customer_name,\n        customers.website as customer_website,\n        sales_union.vendor_id,\n        vendors.display_name as vendor_name,\n        sales_union.billable_status,\n        sales_union.description,\n        sales_union.amount,\n        sales_union.converted_amount,\n        sales_union.total_amount,\n        sales_union.total_converted_amount\n    from sales_union\n\n    inner join income_accounts\n        on sales_union.account_id = income_accounts.account_id\n        and sales_union.source_relation = income_accounts.source_relation\n\n    left join customers\n        on customers.customer_id = sales_union.customer_id\n        and customers.source_relation = sales_union.source_relation\n\n    left join vendors\n        on vendors.vendor_id = sales_union.vendor_id\n        and vendors.source_relation = sales_union.source_relation\n\n    \n    left join departments\n        on departments.department_id = sales_union.department_id\n        and departments.source_relation = sales_union.source_relation\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__sales_union\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.751617Z", "completed_at": "2024-07-20T03:24:14.765405Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.768794Z", "completed_at": "2024-07-20T03:24:14.768800Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018733978271484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__ap_ar_enhanced", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_invoice variable within your dbt_project.yml file to False.\n\n\nwith bill_join as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__bill_join\"\n),\n\n\ninvoice_join as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__invoice_join\"\n),\n\n\n\ndepartments as ( \n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__department\"\n),\n\n\n\naddresses as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__address\"\n),\n\n\ncustomers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__customer\"\n),\n\nvendors as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"stg_quickbooks__vendor\"\n),\n\nfinal as (\n\n    select\n        bill_join.transaction_type,\n        bill_join.transaction_id,\n        bill_join.source_relation,\n        doc_number,\n        cast(null as TEXT) as estimate_id, \n\n        \n        departments.fully_qualified_name as department_name,\n        \n\n        'vendor' as transaction_with,\n        vendors.display_name as customer_vendor_name,\n        vendors.balance as customer_vendor_balance,\n\n        \n        billing_address.city as customer_vendor_address_city,\n        billing_address.country as customer_vendor_address_country,\n        concat(billing_address.address_1, billing_address.address_2) as customer_vendor_address_line,\n        \n        \n        vendors.web_url as customer_vendor_website,\n        cast(null as TEXT) as delivery_type,\n        cast(null as TEXT) as estimate_status,\n        bill_join.total_amount,\n        bill_join.total_converted_amount,\n        cast(null as numeric(28,6)) as estimate_total_amount,\n        cast(null as numeric(28,6)) as estimate_total_converted_amount,\n        bill_join.current_balance,\n        bill_join.due_date,\n        case when bill_join.current_balance != 0 and \n        ((bill_join.due_date)::date - (bill_join.recent_payment_date)::date)\n     < 0\n            then true\n            else false\n                end as is_overdue,\n        case when bill_join.current_balance != 0 and \n        ((bill_join.due_date)::date - (bill_join.recent_payment_date)::date)\n     < 0\n            then \n        ((bill_join.due_date)::date - (bill_join.recent_payment_date)::date)\n     * -1\n            else 0\n                end as days_overdue,\n        bill_join.initial_payment_date,\n        bill_join.recent_payment_date,\n        bill_join.total_current_payment,\n        bill_join.total_current_converted_payment\n    from bill_join\n\n    \n    left join departments  \n        on bill_join.department_id = departments.department_id\n        and bill_join.source_relation = departments.source_relation\n    \n\n    left join vendors\n        on bill_join.vendor_id = vendors.vendor_id\n        and bill_join.source_relation = vendors.source_relation\n    \n    \n    left join addresses as billing_address\n        on vendors.billing_address_id = billing_address.address_id\n        and vendors.source_relation = billing_address.source_relation\n    \n    \n    \n    union all\n\n    select \n        invoice_join.transaction_type,\n        invoice_join.transaction_id,\n        invoice_join.source_relation,\n        doc_number,\n        invoice_join.estimate_id,\n\n        \n        departments.fully_qualified_name as department_name,\n        \n\n        'customer' as transaction_with,\n        customers.fully_qualified_name as customer_vendor_name,\n        customers.balance as customer_vendor_current_balance,\n\n        \n        billing_address.city as customer_vendor_address_city,\n        billing_address.country as customer_vendor_address_country,\n        concat(billing_address.address_1, billing_address.address_2) as customer_vendor_address_line,\n        \n\n        customers.website as customer_vendor_website,\n        invoice_join.delivery_type,\n        invoice_join.estimate_status,\n        invoice_join.total_amount as total_amount,\n        invoice_join.total_converted_amount,\n        invoice_join.estimate_total_amount as estimate_total_amount,\n        invoice_join.estimate_total_converted_amount as estimate_total_converted_amount,\n        invoice_join.current_balance as current_balance,\n        invoice_join.due_date,\n        case when invoice_join.current_balance != 0 and \n        ((invoice_join.due_date)::date - (invoice_join.recent_payment_date)::date)\n     < 0\n            then true\n            else false\n                end as is_overdue,\n        case when invoice_join.current_balance != 0 and \n        ((invoice_join.due_date)::date - (invoice_join.recent_payment_date)::date)\n     < 0\n            then \n        ((invoice_join.due_date)::date - (invoice_join.recent_payment_date)::date)\n     * -1\n            else 0\n                end as days_overdue,\n        invoice_join.initial_payment_date,\n        invoice_join.recent_payment_date,\n        invoice_join.total_current_payment as total_current_payment,\n        invoice_join.total_current_converted_payment\n\n    from invoice_join\n\n    \n    left join departments  \n        on invoice_join.department_id = departments.department_id\n        and invoice_join.source_relation = departments.source_relation\n    \n\n    \n    left join addresses as billing_address\n        on invoice_join.billing_address_id = billing_address.address_id\n        and invoice_join.source_relation = billing_address.source_relation\n    \n\n    left join customers\n        on invoice_join.customer_id = customers.customer_id\n        and invoice_join.source_relation = customers.source_relation\n\n    \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__ap_ar_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.766058Z", "completed_at": "2024-07-20T03:24:14.770498Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.774106Z", "completed_at": "2024-07-20T03:24:14.774111Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009469985961914062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__expenses_sales_enhanced", "compiled": true, "compiled_code": "with expenses as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__expenses_union\"\n),\n\n\nsales as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__sales_union\"\n),\n\n\nfinal as (\n    \n    select *\n    from expenses\n\n    \n    union all\n\n    select *\n    from sales\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__expenses_sales_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.770761Z", "completed_at": "2024-07-20T03:24:14.777041Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.780941Z", "completed_at": "2024-07-20T03:24:14.780947Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011548995971679688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__ap_ar_enhanced_transaction_id__source_relation__estimate_id.804c1f0bcf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation, estimate_id\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__ap_ar_enhanced\"\n    group by transaction_id, source_relation, estimate_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.777976Z", "completed_at": "2024-07-20T03:24:14.782101Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:14.782679Z", "completed_at": "2024-07-20T03:24:14.782683Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007873058319091797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__expenses_sales_enhanced_transaction_id__source_relation__transaction_line_id__item_id.b57775bacb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation, transaction_line_id, item_id\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__expenses_sales_enhanced\"\n    group by transaction_id, source_relation, transaction_line_id, item_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:14.659807Z", "completed_at": "2024-07-20T03:24:17.453032Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:17.453508Z", "completed_at": "2024-07-20T03:24:17.453513Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.906144142150879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__general_ledger", "compiled": true, "compiled_code": "with unioned_models as (\n\n    \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__purchase_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__purchase_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__bill_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__bill_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__credit_memo_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__credit_memo_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__deposit_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__deposit_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__invoice_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__invoice_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__journal_entry_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__journal_entry_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__payment_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__payment_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__refund_receipt_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__refund_receipt_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__sales_receipt_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__sales_receipt_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__transfer_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__transfer_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__vendor_credit_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__vendor_credit_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__bill_payment_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__bill_payment_double_entry\"\n\n            \n        )\n\n        \n),\n\ngl_union as (\n\n    select transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        account_id,\n        class_id,\n        department_id,\n        transaction_type,\n        transaction_source \n    from unioned_models\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__account_classifications\"\n),\n\n\nadjusted_gl as (\n    \n    select\n        md5(cast(coalesce(cast(gl_union.transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.index as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast( gl_union.transaction_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.transaction_source as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) \n            as unique_id,\n        gl_union.transaction_id,\n        gl_union.source_relation,\n        gl_union.index as transaction_index,\n        gl_union.transaction_date,\n        gl_union.customer_id,\n        gl_union.vendor_id,\n        gl_union.amount,\n        gl_union.account_id,\n        gl_union.class_id,\n        gl_union.department_id,\n        accounts.account_number,\n        accounts.name as account_name,\n        accounts.is_sub_account,\n        accounts.parent_account_number,\n        accounts.parent_account_name,\n        accounts.account_type,\n        accounts.account_sub_type,\n        accounts.financial_statement_helper,\n        accounts.balance as account_current_balance,\n        accounts.classification as account_class,\n        gl_union.transaction_type,\n        gl_union.transaction_source,\n        accounts.transaction_type as account_transaction_type,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then gl_union.amount\n            else gl_union.amount * -1\n        end as adjusted_amount,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then gl_union.converted_amount\n            else gl_union.converted_amount * -1\n        end as adjusted_converted_amount\n    from gl_union\n\n    left join accounts\n        on gl_union.account_id = accounts.account_id\n        and gl_union.source_relation = accounts.source_relation\n),\n\nfinal as (\n\n    select\n        *,\n        sum(adjusted_amount) over (partition by account_id, class_id, source_relation\n            order by source_relation, transaction_date, account_id, class_id rows unbounded preceding) as running_balance,\n        sum(adjusted_converted_amount) over (partition by account_id, class_id, source_relation\n            order by source_relation, transaction_date, account_id, class_id rows unbounded preceding) as running_converted_balance\n    from adjusted_gl\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__general_ledger\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:17.592962Z", "completed_at": "2024-07-20T03:24:17.599971Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:17.600443Z", "completed_at": "2024-07-20T03:24:17.600449Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009421110153198242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.not_null_quickbooks__general_ledger_unique_id.06732be667", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__general_ledger\"\nwhere unique_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:17.595487Z", "completed_at": "2024-07-20T03:24:17.601210Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:17.601662Z", "completed_at": "2024-07-20T03:24:17.601666Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010248899459838867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.unique_quickbooks__general_ledger_unique_id.df148e7545", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unique_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__general_ledger\"\nwhere unique_id is not null\ngroup by unique_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:17.581486Z", "completed_at": "2024-07-20T03:24:19.131181Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:19.131660Z", "completed_at": "2024-07-20T03:24:19.131666Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.6730270385742188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__general_ledger_date_spine", "compiled": true, "compiled_code": "-- depends_on: \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__general_ledger\"\n\nwith spine as (\n\n    \n    \n    \n    \n        \n            \n\n        \n\n    \n\n    \n    \n\n    \n\n     \n    \n        \n    \n        \n\n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 67.0\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2019-01-02' as date) + ((interval '1 month') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_month\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_month <= \n\n    cast('2024-07-20' as date) + ((interval '1 month') * (1))\n\n\n\n)\n\nselect * from filtered\n\n\n),\n\ngeneral_ledger as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__general_ledger\"\n),\n\ndate_spine as (\n    select\n        cast(date_trunc('year', date_month) as date) as date_year,\n        cast(date_trunc('month', date_month) as date) as period_first_day,\n        cast(\n        \n\n    \n\n    date_trunc('month', date_month) + ((interval '1 month') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date) as period_last_day,\n        row_number() over (order by cast(date_trunc('month', date_month) as date)) as period_index\n    from spine\n),\n\nfinal as (\n    select distinct\n        general_ledger.account_id,\n        general_ledger.source_relation,\n        general_ledger.account_number,\n        general_ledger.account_name,\n        general_ledger.is_sub_account,\n        general_ledger.parent_account_number,\n        general_ledger.parent_account_name,\n        general_ledger.account_type,\n        general_ledger.account_sub_type,\n        general_ledger.account_class,\n        general_ledger.financial_statement_helper,\n        general_ledger.class_id,\n        date_spine.date_year,\n        date_spine.period_first_day,\n        date_spine.period_last_day,\n        date_spine.period_index\n    from general_ledger\n\n    cross join date_spine\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__general_ledger_date_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:19.264341Z", "completed_at": "2024-07-20T03:24:19.273735Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:19.274235Z", "completed_at": "2024-07-20T03:24:19.274243Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014921903610229492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__general_ledger_balances", "compiled": true, "compiled_code": "with general_ledger as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__general_ledger\"\n),\n\ngl_accounting_periods as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__general_ledger_date_spine\"\n),\n\ngl_period_balance as (\n\n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        class_id,\n        cast(date_trunc('year', transaction_date) as date) as date_year,\n        cast(date_trunc('month', transaction_date) as date) as date_month,\n        sum(adjusted_amount) as period_balance,\n        sum(adjusted_converted_amount) as period_converted_balance\n    from general_ledger\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14\n),\n\ngl_cumulative_balance as (\n\n    select\n        *,\n        case when financial_statement_helper = 'balance_sheet'\n            then sum(period_balance) over (partition by account_id, class_id, source_relation \n            order by source_relation, date_month, account_id, class_id rows unbounded preceding) \n            else 0\n                end as cumulative_balance,\n        case when financial_statement_helper = 'balance_sheet'\n            then sum(period_converted_balance) over (partition by account_id, class_id, source_relation \n            order by source_relation, date_month, account_id, class_id rows unbounded preceding) \n            else 0\n                end as cumulative_converted_balance\n    from gl_period_balance\n),\n\ngl_beginning_balance as (\n\n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        class_id,\n        date_year,\n        date_month, \n        period_balance as period_net_change,\n        case when financial_statement_helper = 'balance_sheet'\n            then (cumulative_balance - period_balance) \n            else 0\n                end as period_beginning_balance,\n        cumulative_balance as period_ending_balance,\n        period_converted_balance as period_net_converted_change,\n        case when financial_statement_helper = 'balance_sheet'\n            then (cumulative_converted_balance - period_converted_balance) \n            else 0\n                end as period_beginning_converted_balance,\n        cumulative_converted_balance as period_ending_converted_balance\n    from gl_cumulative_balance\n),\n\ngl_patch as (\n\n    select \n        coalesce(gl_beginning_balance.account_id, gl_accounting_periods.account_id) as account_id,\n        coalesce(gl_beginning_balance.source_relation, gl_accounting_periods.source_relation) as source_relation,\n        coalesce(gl_beginning_balance.account_number, gl_accounting_periods.account_number) as account_number,\n        coalesce(gl_beginning_balance.account_name, gl_accounting_periods.account_name) as account_name,\n        coalesce(gl_beginning_balance.is_sub_account, gl_accounting_periods.is_sub_account) as is_sub_account,\n        coalesce(gl_beginning_balance.parent_account_number, gl_accounting_periods.parent_account_number) as parent_account_number,\n        coalesce(gl_beginning_balance.parent_account_name, gl_accounting_periods.parent_account_name) as parent_account_name,\n        coalesce(gl_beginning_balance.account_type, gl_accounting_periods.account_type) as account_type,\n        coalesce(gl_beginning_balance.account_sub_type, gl_accounting_periods.account_sub_type) as account_sub_type,\n        coalesce(gl_beginning_balance.account_class, gl_accounting_periods.account_class) as account_class,\n        coalesce(gl_beginning_balance.class_id, gl_accounting_periods.class_id) as class_id,\n        coalesce(gl_beginning_balance.financial_statement_helper, gl_accounting_periods.financial_statement_helper) as financial_statement_helper,\n        coalesce(gl_beginning_balance.date_year, gl_accounting_periods.date_year) as date_year,\n        gl_accounting_periods.period_first_day,\n        gl_accounting_periods.period_last_day,\n        gl_accounting_periods.period_index,\n        gl_beginning_balance.period_net_change,\n        gl_beginning_balance.period_beginning_balance,\n        gl_beginning_balance.period_ending_balance,\n        case when gl_beginning_balance.period_beginning_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_beginning_balance\n                end as period_beginning_balance_starter,\n        case when gl_beginning_balance.period_ending_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_ending_balance\n                end as period_ending_balance_starter,\n        gl_beginning_balance.period_net_converted_change,\n        gl_beginning_balance.period_beginning_converted_balance,\n        gl_beginning_balance.period_ending_converted_balance,\n        case when gl_beginning_balance.period_beginning_converted_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_beginning_converted_balance\n                end as period_beginning_converted_balance_starter,\n        case when gl_beginning_balance.period_ending_converted_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_ending_converted_balance\n                end as period_ending_converted_balance_starter\n    from gl_accounting_periods\n\n    left join gl_beginning_balance\n        on gl_beginning_balance.account_id = gl_accounting_periods.account_id\n            and gl_beginning_balance.source_relation = gl_accounting_periods.source_relation\n            and gl_beginning_balance.date_month = gl_accounting_periods.period_first_day\n            and gl_beginning_balance.date_year = gl_accounting_periods.date_year\n            and coalesce(gl_beginning_balance.class_id, '0') = coalesce(gl_accounting_periods.class_id, '0')\n),\n\ngl_value_partition as (\n\n    select\n        *,\n        sum(case when period_ending_balance_starter is null \n            then 0 \n            else 1 \n                end) over (order by source_relation, account_id, class_id, period_last_day rows unbounded preceding) as gl_partition,\n        sum(case when period_ending_converted_balance_starter is null \n            then 0 \n            else 1 \n                end) over (order by source_relation, account_id, class_id, period_last_day rows unbounded preceding) as gl_converted_partition\n    from gl_patch\n),\n\nfinal as (\n    \n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        class_id,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        coalesce(period_net_change, 0) as period_net_change,\n        coalesce(period_beginning_balance_starter,\n            first_value(period_ending_balance_starter) over (partition by gl_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_beginning_balance,\n        coalesce(period_ending_balance_starter,\n            first_value(period_ending_balance_starter) over (partition by gl_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_ending_balance,\n        coalesce(period_net_converted_change, 0) as period_net_converted_change,\n        coalesce(period_beginning_converted_balance_starter,\n            first_value(period_ending_converted_balance_starter) over (partition by gl_converted_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_beginning_converted_balance,\n        coalesce(period_ending_converted_balance_starter,\n            first_value(period_ending_converted_balance_starter) over (partition by gl_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_ending_converted_balance\n\n    from gl_value_partition\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__general_ledger_balances\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:19.275994Z", "completed_at": "2024-07-20T03:24:19.281627Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:19.282131Z", "completed_at": "2024-07-20T03:24:19.282135Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007070779800415039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__retained_earnings", "compiled": true, "compiled_code": "with general_ledger_balances as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__general_ledger_balances\"\n),\n\nrevenue_starter as (\n\n    select\n        period_first_day,\n        source_relation,\n        sum(period_net_change) as revenue_net_change,\n        sum(period_net_converted_change) as revenue_net_converted_change\n    from general_ledger_balances\n    \n    where account_class = 'Revenue'\n\n    group by 1,2 \n),\n\nexpense_starter as (\n\n    select \n        period_first_day,\n        source_relation,\n        sum(period_net_change) as expense_net_change,\n        sum(period_net_converted_change) as expense_net_converted_change\n    from general_ledger_balances\n    \n    where account_class = 'Expense'\n\n    group by 1,2 \n),\n\nnet_income_loss as (\n\n    select *\n    from revenue_starter\n\n    join expense_starter \n        using (period_first_day, source_relation)\n),\n\nretained_earnings_starter as (\n\n    select\n        cast('9999' as TEXT) as account_id,\n        source_relation,\n        cast('9999-00' as TEXT) as account_number,\n        cast('Net Income Adjustment' as TEXT) as account_name,\n        false as is_sub_account,\n        cast(null as TEXT) as parent_account_number,\n        cast(null as TEXT) as parent_account_name,\n        cast('Equity' as TEXT) as account_type,\n        cast('RetainedEarnings' as TEXT) as account_sub_type,\n        cast('Equity' as TEXT) as account_class,\n        cast(null as TEXT) as class_id,\n        cast('balance_sheet' as TEXT) as financial_statement_helper,\n        cast(date_trunc('year', period_first_day) as date) as date_year,\n        cast(period_first_day as date) as period_first_day,\n        cast(\n        \n\n    \n\n    date_trunc('month', period_first_day) + ((interval '1 month') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date) as period_last_day,\n        (revenue_net_change - expense_net_change) as period_net_change,\n        (revenue_net_converted_change - expense_net_converted_change) as period_net_converted_change\n    from net_income_loss\n),\n\n\nretained_earnings_beginning as (\n\n    select\n        *,\n        sum(coalesce(period_net_change, 0)) over (order by source_relation, period_first_day, period_first_day rows unbounded preceding) as period_ending_balance,\n        sum(coalesce(period_net_converted_change, 0)) over (order by source_relation, period_first_day, period_first_day rows unbounded preceding) as period_ending_converted_balance\n    from retained_earnings_starter\n),\n\nfinal as (\n    \n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        class_id,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        period_net_change,\n        lag(coalesce(period_ending_balance,0)) over (order by source_relation, period_first_day) as period_beginning_balance,\n        period_ending_balance,\n        period_net_converted_change,\n        lag(coalesce(period_ending_balance,0)) over (order by source_relation, period_first_day) as period_beginning_converted_balance,\n        period_ending_converted_balance\n    from retained_earnings_beginning\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__retained_earnings\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:19.283792Z", "completed_at": "2024-07-20T03:24:19.286945Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:19.287393Z", "completed_at": "2024-07-20T03:24:19.287398Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004570960998535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__general_ledger_by_period", "compiled": true, "compiled_code": "with general_ledger_balances as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__general_ledger_balances\"\n),\n\nretained_earnings as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__retained_earnings\"\n),\n\n\n\nbalances_earnings_unioned as (\n\n    select *\n    from general_ledger_balances\n\n    union all \n\n    select *\n    from retained_earnings\n), \n\nfinal as (\n\n    select \n        balances_earnings_unioned.*,\n    \n        case \n            when account_class = 'Asset' then 1\n            when account_class = 'Liability' then 2\n            when account_class = 'Equity' then 3\n            when account_class = 'Revenue' then 1\n            when account_class = 'Expense' then 2\n        end as account_ordinal \n    \n    from balances_earnings_unioned\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__general_ledger_by_period\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:19.294553Z", "completed_at": "2024-07-20T03:24:19.299974Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:19.301538Z", "completed_at": "2024-07-20T03:24:19.301545Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013081789016723633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.quickbooks.quickbooks__income_statement", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n),\n\nrevenue as (\n    select \n        account_id, \n        sum(period_net_change) as ending_balance,\n        sum(period_net_converted_change) as ending_converted_balance\n    from general_ledger_by_period\n\n    where account_class = 'Revenue'\n        and period_first_day between 'YYYY-MM-DD' and 'YYYY-MM-DD' --Update 'YYYY-MM-DD' to be your desired date period.\n\n    group by 1\n),\n\nexpense as (\n    select \n        account_id, \n        sum(period_net_change) as ending_balance,\n        sum(period_net_converted_change) as ending_converted_balance\n    from general_ledger_by_period\n\n    where account_class = 'Expense'\n        and period_first_day between 'YYYY-MM-DD' and 'YYYY-MM-DD' --Update 'YYYY-MM-DD' to be your desired date period.\n\n    group by 1\n),\n\nrevenue_total as (\n    select \n        'revenue' as income_statement_type, \n        sum(ending_balance) as ending_balance,\n        sum(ending_converted_balance) as ending_converted_balance\n    from revenue\n),\n\nexpense_total as (\n    select \n        'expense' as income_statement_type, \n        sum(ending_balance) as ending_balance,\n        sum(ending_converted_balance) as ending_converted_balance\n    from expense\n)\n\nselect * \nfrom revenue_total\n\nunion all \n\nselect * \nfrom expense_total", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:19.291313Z", "completed_at": "2024-07-20T03:24:19.300990Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:19.303154Z", "completed_at": "2024-07-20T03:24:19.303157Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015195131301879883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.quickbooks.quickbooks__balance_sheet", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n    where period_first_day <= 'YYYY-MM-DD' --Update to be your desired ending date.\n),\n\nliability_date as (\n    select \n        account_id, \n        source_relation,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period\n\n    where account_class = 'Liability'\n\n    group by 1,2\n),\n\nasset_date as (\n    select \n        account_id, \n        source_relation,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period\n\n    where account_class = 'Asset'\n\n    group by 1,2\n),\n\nequity_date as (\n    select \n        account_id,\n        source_relation,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period \n\n    where account_class = 'Equity'\n\n    group by 1,2\n),\n\nliability as (\n    select \n        ld.account_id, \n        l.period_ending_balance,\n        l.period_ending_converted_balance\n    from liability_date ld\n\n    left join (select account_id, source_relation, period_first_day, period_ending_balance, period_ending_converted_balance from general_ledger_by_period where account_class = 'Liability') l\n        on l.account_id = ld.account_id\n            and l.period_first_day = ld.period_first_day\n            and l.source_relation = ld.source_relation\n),\n\nasset as (\n    select \n        ad.account_id, \n        a.period_ending_balance,\n        a.period_ending_converted_balance\n    from asset_date ad\n        left join (select account_id, source_relation, period_first_day, period_ending_balance, period_ending_converted_balance from general_ledger_by_period where account_class = 'Asset') a\n            on a.account_id = ad.account_id\n                and a.period_first_day = ad.period_first_day \n                and a.source_relation = ad.source_relation\n),\n\nequity as (\n    select\n        ed.account_id, \n        e.period_ending_balance,\n        e.period_ending_converted_balance\n    from equity_date ed\n        left join (select account_id, source_relation, period_first_day, period_ending_balance, period_ending_converted_balance from general_ledger_by_period where account_class = 'Equity') e\n            on e.account_id = ed.account_id\n                and e.period_first_day = ed.period_first_day \n                and e.source_relation = ed.source_relation\n)\n\nselect \n    'liability' as balance_sheet_type, \n    sum(period_ending_balance) as balance,\n    sum(period_ending_converted_balance) as converted_balance\nfrom liability\ngroup by 1\n\nunion all\n\nselect \n    'asset' as balance_sheet_type, \n    sum(period_ending_balance) as balance,\n    sum(period_ending_converted_balance) as converted_balance\nfrom asset\ngroup by 1\n\nunion all \n\nselect \n    'equity' as balance_sheet_type, \n    sum(period_ending_balance) as balance,\n    sum(period_ending_converted_balance) as converted_balance\nfrom equity\ngroup by 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:19.296300Z", "completed_at": "2024-07-20T03:24:19.301284Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:19.303391Z", "completed_at": "2024-07-20T03:24:19.303395Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014960050582885742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__balance_sheet", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n    where financial_statement_helper = 'balance_sheet'\n),  \n\nfinal as (\n    select\n        period_first_day as calendar_date, --  Slated to be deprecated; we recommend using `period_first_day` or `period_last_day`\n        period_first_day,\n        period_last_day,\n        source_relation,\n        account_class,\n        class_id,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        period_ending_balance as amount,\n        period_ending_converted_balance as converted_amount,\n        account_ordinal\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__balance_sheet\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:19.297918Z", "completed_at": "2024-07-20T03:24:19.301767Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:19.303999Z", "completed_at": "2024-07-20T03:24:19.304002Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015403032302856445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__profit_and_loss", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n    where financial_statement_helper = 'income_statement'\n),  \n\nfinal as (\n    select\n        period_first_day as calendar_date, --  Slated to be deprecated; we recommend using `period_first_day` or `period_last_day`\n        period_first_day,\n        period_last_day,\n        source_relation,\n        account_class,\n        class_id,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        period_net_change as amount,\n        period_net_converted_change as converted_amount,\n        account_ordinal\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__profit_and_loss\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:19.307587Z", "completed_at": "2024-07-20T03:24:19.322702Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:19.323944Z", "completed_at": "2024-07-20T03:24:19.323950Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019922256469726562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__general_ledger_by_period_account_id__class_id__source_relation__period_first_day.d928e63a45", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, class_id, source_relation, period_first_day\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n    group by account_id, class_id, source_relation, period_first_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:19.317361Z", "completed_at": "2024-07-20T03:24:19.323446Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:19.325346Z", "completed_at": "2024-07-20T03:24:19.325349Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01897907257080078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__balance_sheet_account_id__source_relation__calendar_date__class_id.07368a5056", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation, calendar_date, class_id\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__balance_sheet\"\n    group by account_id, source_relation, calendar_date, class_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:19.311826Z", "completed_at": "2024-07-20T03:24:19.323696Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:19.325796Z", "completed_at": "2024-07-20T03:24:19.325799Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020012617111206055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__cash_flow_classifications", "compiled": true, "compiled_code": "with cash_flow_key as (\n\n    select calendar_date as cash_flow_period,\n        source_relation,\n        account_class,\n        class_id,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        amount as cash_ending_period,\n        converted_amount as cash_converted_ending_period,\n        md5(cast(coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(calendar_date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(class_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as account_unique_id\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__balance_sheet\"\n),\n\n\n\ncash_flow_types_and_ordinals as (\n\n    select cash_flow_key.*,\n    \n        case when account_type = 'Bank' then 'Cash or Cash Equivalents'\n            when account_type = 'Accounts Receivable' then 'Operating'\n            when account_type = 'Credit Card' then 'Operating'\n            when account_type = 'Other Current Asset' then 'Operating'\n            when account_type = 'Accounts Payable' then 'Operating'\n            when account_type = 'Other Current Liability' then 'Operating'\n            when account_name = 'Net Income Adjustment' then 'Operating'\n            when account_type = 'Fixed Asset' then 'Investing'\n            when account_type = 'Other Asset' then 'Investing'\n            when account_type = 'Long Term Liability' then 'Financing'\n            when account_class = 'Equity' then 'Financing'\n        end as cash_flow_type,\n        case when account_type = 'Bank' then 1\n            when account_type = 'Accounts Receivable' then 2\n            when account_type = 'Credit Card' then 2\n            when account_type = 'Other Current Asset' then 2\n            when account_type = 'Accounts Payable' then 2\n            when account_type = 'Other Current Liability' then 2\n            when account_name = 'Net Income Adjustment' then 2\n            when account_type = 'Fixed Asset' then 3\n            when account_type = 'Other Asset' then 3\n            when account_type = 'Long Term Liability' then 4\n            when account_class = 'Equity' then 4\n        end as cash_flow_ordinal\n        \n    from cash_flow_key\n\n\n)\n\nselect *\nfrom cash_flow_types_and_ordinals", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__cash_flow_classifications\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:19.320229Z", "completed_at": "2024-07-20T03:24:19.324398Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:19.326544Z", "completed_at": "2024-07-20T03:24:19.326547Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016696691513061523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__profit_and_loss_account_id__class_id__source_relation__calendar_date.77ccb375e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, class_id, source_relation, calendar_date\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__profit_and_loss\"\n    group by account_id, class_id, source_relation, calendar_date\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:19.328676Z", "completed_at": "2024-07-20T03:24:19.330883Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:19.331319Z", "completed_at": "2024-07-20T03:24:19.331323Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.003537893295288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__cash_flow_statement", "compiled": true, "compiled_code": "with cash_flow_classifications as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"int_quickbooks__cash_flow_classifications\"\n), \n\nfinal as (\n    \n    select cash_flow_classifications.*,\n        coalesce(lag(cash_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_beginning_period,\n        cash_ending_period - coalesce(lag(cash_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_net_period,\n        coalesce(lag(cash_converted_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_converted_beginning_period, \n        cash_converted_ending_period - coalesce(lag(cash_converted_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_converted_net_period\n    from cash_flow_classifications\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__cash_flow_statement\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:19.333679Z", "completed_at": "2024-07-20T03:24:19.339588Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:19.340469Z", "completed_at": "2024-07-20T03:24:19.340472Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008466720581054688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.not_null_quickbooks__cash_flow_statement_account_unique_id.748fb9ef0a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_unique_id\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__cash_flow_statement\"\nwhere account_unique_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-20T03:24:19.336155Z", "completed_at": "2024-07-20T03:24:19.339823Z"}, {"name": "execute", "started_at": "2024-07-20T03:24:19.340695Z", "completed_at": "2024-07-20T03:24:19.340699Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008554935455322266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.unique_quickbooks__cash_flow_statement_account_unique_id.c6ce55cc0d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_unique_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"quickbooks_integration_tests_10_quickbooks_dev\".\"quickbooks__cash_flow_statement\"\nwhere account_unique_id is not null\ngroup by account_unique_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 21.903584003448486, "args": {"enable_legacy_logger": false, "partial_parse": true, "strict_mode": false, "static": false, "log_format_file": "debug", "macro_debugging": false, "require_explicit_package_overrides_for_builtin_materializations": false, "log_level": "info", "target": "postgres", "cache_selected_only": false, "indirect_selection": "eager", "static_parser": true, "log_format": "default", "introspect": true, "use_colors": true, "project_dir": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks/integration_tests", "log_file_max_bytes": 10485760, "compile": true, "log_level_file": "debug", "quiet": false, "populate_cache": true, "version_check": true, "favor_state": false, "partial_parse_file_diff": true, "vars": {}, "profiles_dir": "/Users/avinash.kunnath/.dbt", "send_anonymous_usage_stats": true, "log_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks/integration_tests/logs", "exclude": [], "show_resource_report": false, "print": true, "printer_width": 80, "which": "generate", "invocation_command": "dbt docs generate -t postgres", "empty_catalog": false, "select": [], "write_json": true, "defer": false, "warn_error_options": {"include": [], "exclude": []}, "use_colors_file": true}}