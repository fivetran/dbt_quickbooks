{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.16", "generated_at": "2024-07-09T10:51:08.443203Z", "invocation_id": "5674b4f2-347c-4c49-a134-af3c65b0de53", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.276353Z", "completed_at": "2024-07-09T10:50:53.310233Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.312253Z", "completed_at": "2024-07-09T10:50:53.312266Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.041309356689453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__account_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"account_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.299735Z", "completed_at": "2024-07-09T10:50:53.310650Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.312498Z", "completed_at": "2024-07-09T10:50:53.312502Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03955411911010742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__address_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"address_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.303011Z", "completed_at": "2024-07-09T10:50:53.311023Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.312954Z", "completed_at": "2024-07-09T10:50:53.312957Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03975105285644531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"bill_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.306730Z", "completed_at": "2024-07-09T10:50:53.311772Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.314167Z", "completed_at": "2024-07-09T10:50:53.314170Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04041004180908203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"bill_linked_txn_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.321980Z", "completed_at": "2024-07-09T10:50:53.332859Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.334644Z", "completed_at": "2024-07-09T10:50:53.334651Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018954038619995117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"bill_payment_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.318849Z", "completed_at": "2024-07-09T10:50:53.333140Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.335131Z", "completed_at": "2024-07-09T10:50:53.335134Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020229816436767578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"bill_payment_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.325110Z", "completed_at": "2024-07-09T10:50:53.333825Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.336321Z", "completed_at": "2024-07-09T10:50:53.336326Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02038288116455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"bill_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.328408Z", "completed_at": "2024-07-09T10:50:53.334393Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.337122Z", "completed_at": "2024-07-09T10:50:53.337126Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020419836044311523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"bundle_item_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.341501Z", "completed_at": "2024-07-09T10:50:53.351430Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.355071Z", "completed_at": "2024-07-09T10:50:53.355078Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017246246337890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"bundle_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.345163Z", "completed_at": "2024-07-09T10:50:53.354737Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.356786Z", "completed_at": "2024-07-09T10:50:53.356790Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01833796501159668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"credit_memo_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.348370Z", "completed_at": "2024-07-09T10:50:53.355349Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.357598Z", "completed_at": "2024-07-09T10:50:53.357601Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018439769744873047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"credit_memo_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.351761Z", "completed_at": "2024-07-09T10:50:53.355824Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.358295Z", "completed_at": "2024-07-09T10:50:53.358298Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01859903335571289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"customer_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__customer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.361169Z", "completed_at": "2024-07-09T10:50:53.368976Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.374979Z", "completed_at": "2024-07-09T10:50:53.374985Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01737189292907715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__department_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"department_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__department_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.366075Z", "completed_at": "2024-07-09T10:50:53.374716Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.376627Z", "completed_at": "2024-07-09T10:50:53.376631Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01728200912475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"deposit_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.369224Z", "completed_at": "2024-07-09T10:50:53.375223Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.377170Z", "completed_at": "2024-07-09T10:50:53.377173Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013865947723388672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"deposit_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.371832Z", "completed_at": "2024-07-09T10:50:53.376390Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.378884Z", "completed_at": "2024-07-09T10:50:53.378888Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014667987823486328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"estimate_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.380634Z", "completed_at": "2024-07-09T10:50:53.388216Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.394484Z", "completed_at": "2024-07-09T10:50:53.394489Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017300844192504883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"estimate_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.384826Z", "completed_at": "2024-07-09T10:50:53.394189Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.396154Z", "completed_at": "2024-07-09T10:50:53.396157Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017017126083374023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"invoice_line_bundle_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.388448Z", "completed_at": "2024-07-09T10:50:53.394778Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.396703Z", "completed_at": "2024-07-09T10:50:53.396706Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014692068099975586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"invoice_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.391620Z", "completed_at": "2024-07-09T10:50:53.395881Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.398343Z", "completed_at": "2024-07-09T10:50:53.398346Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014960050582885742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"invoice_linked_txn_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.400054Z", "completed_at": "2024-07-09T10:50:53.409318Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.413896Z", "completed_at": "2024-07-09T10:50:53.413901Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017175674438476562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"invoice_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.404246Z", "completed_at": "2024-07-09T10:50:53.413431Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.415074Z", "completed_at": "2024-07-09T10:50:53.415077Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016531944274902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__item_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"item_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.406814Z", "completed_at": "2024-07-09T10:50:53.413661Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.415542Z", "completed_at": "2024-07-09T10:50:53.415544Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014077901840209961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"journal_entry_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.410102Z", "completed_at": "2024-07-09T10:50:53.415284Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.417779Z", "completed_at": "2024-07-09T10:50:53.417783Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015058755874633789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"journal_entry_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.419541Z", "completed_at": "2024-07-09T10:50:53.428559Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.432339Z", "completed_at": "2024-07-09T10:50:53.432345Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016104936599731445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"payment_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.423193Z", "completed_at": "2024-07-09T10:50:53.429081Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.432862Z", "completed_at": "2024-07-09T10:50:53.432866Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01573491096496582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"payment_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.426166Z", "completed_at": "2024-07-09T10:50:53.431866Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.433795Z", "completed_at": "2024-07-09T10:50:53.433798Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01593804359436035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"purchase_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.429544Z", "completed_at": "2024-07-09T10:50:53.433567Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.436068Z", "completed_at": "2024-07-09T10:50:53.436071Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011468887329101562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"purchase_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.438140Z", "completed_at": "2024-07-09T10:50:53.448104Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.451961Z", "completed_at": "2024-07-09T10:50:53.451970Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017602205276489258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"refund_receipt_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.442151Z", "completed_at": "2024-07-09T10:50:53.448413Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.452865Z", "completed_at": "2024-07-09T10:50:53.452868Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017978191375732422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"refund_receipt_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.445251Z", "completed_at": "2024-07-09T10:50:53.451427Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.453689Z", "completed_at": "2024-07-09T10:50:53.453699Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017848968505859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"sales_receipt_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.448671Z", "completed_at": "2024-07-09T10:50:53.452577Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.455787Z", "completed_at": "2024-07-09T10:50:53.455792Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012553930282592773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"sales_receipt_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.459352Z", "completed_at": "2024-07-09T10:50:53.470284Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.473903Z", "completed_at": "2024-07-09T10:50:53.473910Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018572092056274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__transfer_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"transfer_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__transfer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.463237Z", "completed_at": "2024-07-09T10:50:53.472952Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.474585Z", "completed_at": "2024-07-09T10:50:53.474589Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018157005310058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"vendor_credit_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.467026Z", "completed_at": "2024-07-09T10:50:53.473379Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.475360Z", "completed_at": "2024-07-09T10:50:53.475363Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018301963806152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"vendor_credit_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.470586Z", "completed_at": "2024-07-09T10:50:53.474338Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.477070Z", "completed_at": "2024-07-09T10:50:53.477073Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015584945678710938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_07\".\"vendor_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.480032Z", "completed_at": "2024-07-09T10:50:53.481115Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.484854Z", "completed_at": "2024-07-09T10:50:53.484858Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009996175765991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.account_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.481917Z", "completed_at": "2024-07-09T10:50:53.482891Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.487184Z", "completed_at": "2024-07-09T10:50:53.487188Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009811878204345703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.483337Z", "completed_at": "2024-07-09T10:50:53.484217Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.487890Z", "completed_at": "2024-07-09T10:50:53.487893Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03927302360534668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.485287Z", "completed_at": "2024-07-09T10:50:53.486938Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.518838Z", "completed_at": "2024-07-09T10:50:53.518842Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.038429975509643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.521484Z", "completed_at": "2024-07-09T10:50:53.522497Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.526010Z", "completed_at": "2024-07-09T10:50:53.526014Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008826971054077148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.523244Z", "completed_at": "2024-07-09T10:50:53.524134Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.527729Z", "completed_at": "2024-07-09T10:50:53.527734Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008676290512084961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.524576Z", "completed_at": "2024-07-09T10:50:53.525409Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.528405Z", "completed_at": "2024-07-09T10:50:53.528408Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008799076080322266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_payment_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.526565Z", "completed_at": "2024-07-09T10:50:53.527486Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.529909Z", "completed_at": "2024-07-09T10:50:53.529912Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008092164993286133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bundle_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.532591Z", "completed_at": "2024-07-09T10:50:53.533440Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.538395Z", "completed_at": "2024-07-09T10:50:53.538402Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010224103927612305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bundle_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.534163Z", "completed_at": "2024-07-09T10:50:53.535972Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.540097Z", "completed_at": "2024-07-09T10:50:53.540101Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010344266891479492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.credit_card_payment_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.536550Z", "completed_at": "2024-07-09T10:50:53.537608Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.540925Z", "completed_at": "2024-07-09T10:50:53.540932Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010617971420288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.credit_memo_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.538903Z", "completed_at": "2024-07-09T10:50:53.539841Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.542688Z", "completed_at": "2024-07-09T10:50:53.542691Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010154962539672852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.credit_memo_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.545694Z", "completed_at": "2024-07-09T10:50:53.546793Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.550841Z", "completed_at": "2024-07-09T10:50:53.550846Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010341882705688477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.547646Z", "completed_at": "2024-07-09T10:50:53.548642Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.553111Z", "completed_at": "2024-07-09T10:50:53.553114Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009983062744140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.department_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.549256Z", "completed_at": "2024-07-09T10:50:53.550191Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.553802Z", "completed_at": "2024-07-09T10:50:53.553805Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010031700134277344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.deposit_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.551243Z", "completed_at": "2024-07-09T10:50:53.552856Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.555226Z", "completed_at": "2024-07-09T10:50:53.555229Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009032011032104492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.deposit_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.558060Z", "completed_at": "2024-07-09T10:50:53.559116Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.563097Z", "completed_at": "2024-07-09T10:50:53.563103Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009410619735717773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.estimate_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.560003Z", "completed_at": "2024-07-09T10:50:53.561001Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.564650Z", "completed_at": "2024-07-09T10:50:53.564654Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00928497314453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.estimate_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.561526Z", "completed_at": "2024-07-09T10:50:53.562429Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.565368Z", "completed_at": "2024-07-09T10:50:53.565372Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009280920028686523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.563533Z", "completed_at": "2024-07-09T10:50:53.564410Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.566863Z", "completed_at": "2024-07-09T10:50:53.566866Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008420228958129883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_line_bundle_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.569515Z", "completed_at": "2024-07-09T10:50:53.571307Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.574872Z", "completed_at": "2024-07-09T10:50:53.574876Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009418010711669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.572112Z", "completed_at": "2024-07-09T10:50:53.573022Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.576355Z", "completed_at": "2024-07-09T10:50:53.576358Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009281158447265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.573446Z", "completed_at": "2024-07-09T10:50:53.574277Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.577003Z", "completed_at": "2024-07-09T10:50:53.577006Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009392023086547852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.575286Z", "completed_at": "2024-07-09T10:50:53.576125Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.578466Z", "completed_at": "2024-07-09T10:50:53.578469Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007787942886352539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.journal_entry_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.581092Z", "completed_at": "2024-07-09T10:50:53.582050Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.586391Z", "completed_at": "2024-07-09T10:50:53.586396Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009527921676635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.journal_entry_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.582816Z", "completed_at": "2024-07-09T10:50:53.583721Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.588025Z", "completed_at": "2024-07-09T10:50:53.588029Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009408950805664062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.584148Z", "completed_at": "2024-07-09T10:50:53.585756Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.588708Z", "completed_at": "2024-07-09T10:50:53.588711Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009557962417602539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.payment_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.586902Z", "completed_at": "2024-07-09T10:50:53.587788Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.590225Z", "completed_at": "2024-07-09T10:50:53.590229Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008916139602661133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.592922Z", "completed_at": "2024-07-09T10:50:53.593864Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.597370Z", "completed_at": "2024-07-09T10:50:53.597375Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008520841598510742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.594608Z", "completed_at": "2024-07-09T10:50:53.595497Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.598845Z", "completed_at": "2024-07-09T10:50:53.598848Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008331060409545898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_order_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.595914Z", "completed_at": "2024-07-09T10:50:53.596740Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.599493Z", "completed_at": "2024-07-09T10:50:53.599496Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008459091186523438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_order_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.597777Z", "completed_at": "2024-07-09T10:50:53.598613Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.600944Z", "completed_at": "2024-07-09T10:50:53.600947Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007799863815307617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_order_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.603593Z", "completed_at": "2024-07-09T10:50:53.605317Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.608855Z", "completed_at": "2024-07-09T10:50:53.608859Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009267091751098633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.refund_receipt_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.606068Z", "completed_at": "2024-07-09T10:50:53.606947Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.610310Z", "completed_at": "2024-07-09T10:50:53.610313Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009112119674682617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.refund_receipt_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.607373Z", "completed_at": "2024-07-09T10:50:53.608208Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.610953Z", "completed_at": "2024-07-09T10:50:53.610956Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00922393798828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.sales_receipt_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.609260Z", "completed_at": "2024-07-09T10:50:53.610087Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.612402Z", "completed_at": "2024-07-09T10:50:53.612405Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007777690887451172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.sales_receipt_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.615034Z", "completed_at": "2024-07-09T10:50:53.615969Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.620236Z", "completed_at": "2024-07-09T10:50:53.620240Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009234905242919922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.transfer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.616720Z", "completed_at": "2024-07-09T10:50:53.618337Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.621698Z", "completed_at": "2024-07-09T10:50:53.621702Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00909280776977539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.vendor_credit_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.618783Z", "completed_at": "2024-07-09T10:50:53.619624Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.622339Z", "completed_at": "2024-07-09T10:50:53.622342Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009212970733642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.vendor_credit_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.620646Z", "completed_at": "2024-07-09T10:50:53.621471Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:53.623811Z", "completed_at": "2024-07-09T10:50:53.623814Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008512020111083984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.vendor_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.637519Z", "completed_at": "2024-07-09T10:50:54.839523Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:54.841550Z", "completed_at": "2024-07-09T10:50:54.841554Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3169820308685303, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as TEXT) as bill_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        item_expense_billable_status,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.632907Z", "completed_at": "2024-07-09T10:50:54.837900Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:54.839841Z", "completed_at": "2024-07-09T10:50:54.839851Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3179931640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__address", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__address_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_sub_division_code\n    \n as \n    \n    country_sub_division_code\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    line_1\n    \n as \n    \n    line_1\n    \n, \n    \n    \n    line_2\n    \n as \n    \n    line_2\n    \n, \n    \n    \n    line_3\n    \n as \n    \n    line_3\n    \n, \n    \n    \n    line_4\n    \n as \n    \n    line_4\n    \n, \n    \n    \n    line_5\n    \n as \n    \n    line_5\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    postal_code\n    \n as \n    \n    postal_code\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as address_id,\n        city,\n        country,\n        line_1 as address_1,\n        line_2 as address_2,\n        postal_code,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.642526Z", "completed_at": "2024-07-09T10:50:54.838563Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:54.840419Z", "completed_at": "2024-07-09T10:50:54.840422Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3112828731536865, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as TEXT) as bill_id,\n        index,\n        cast(bill_payment_id as TEXT) as bill_payment_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:53.626381Z", "completed_at": "2024-07-09T10:50:54.838252Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:54.840153Z", "completed_at": "2024-07-09T10:50:54.840157Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3372020721435547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__account", "compiled": true, "compiled_code": "with base as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account_tmp\"\n\n),\n\naccount as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    account_sub_type\n    \n as \n    \n    account_sub_type\n    \n, \n    \n    \n    account_type\n    \n as \n    \n    account_type\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_sub_accounts\n    \n as \n    \n    balance_with_sub_accounts\n    \n, \n    \n    \n    classification\n    \n as \n    \n    classification\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    sub_account\n    \n as \n    \n    sub_account\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as account_id,\n        cast(account_number as TEXT) as account_number,\n        sub_account as is_sub_account,\n        cast(parent_account_id as TEXT) as parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        classification,\n        balance,\n        balance_with_sub_accounts,\n        active as is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n    from account\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:54.946274Z", "completed_at": "2024-07-09T10:50:55.914838Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:55.915409Z", "completed_at": "2024-07-09T10:50:55.915417Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0886340141296387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    check_bank_account_id\n    \n as \n    \n    check_bank_account_id\n    \n, \n    \n    \n    check_print_status\n    \n as \n    \n    check_print_status\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_account_id\n    \n as \n    \n    credit_card_account_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    pay_type\n    \n as \n    \n    pay_type\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_bill_payment\n    \n as \n    \n    process_bill_payment\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as bill_payment_id,\n        cast(check_bank_account_id as TEXT) as check_bank_account_id,\n        check_print_status,\n        cast(credit_card_account_id as TEXT) as credit_card_account_id,\n        exchange_rate,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        pay_type,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(vendor_id as TEXT) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:54.952012Z", "completed_at": "2024-07-09T10:50:56.032425Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:56.034917Z", "completed_at": "2024-07-09T10:50:56.034923Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1845738887786865, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_credit_card_id\n    \n as \n    \n    bill_payment_credit_card_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    linked_bill_payment_id\n    \n as \n    \n    linked_bill_payment_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n  \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_payment_id as TEXT) as bill_payment_id,\n        index,\n        amount,\n        cast(bill_id as TEXT) as bill_id,\n        deposit_id,\n        expense_id,\n        journal_entry_id,\n        linked_bill_payment_id,\n        vendor_credit_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:54.956431Z", "completed_at": "2024-07-09T10:50:56.034097Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:56.036595Z", "completed_at": "2024-07-09T10:50:56.036599Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1914827823638916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n \nfinal as (\n    \n    select \n        cast(id as TEXT) as bill_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        cast( date_trunc('day', due_date) as date) as due_date_at, \n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        exchange_rate,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        total_amount,\n        cast(vendor_id as TEXT) as vendor_id,\n        private_note,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:54.963621Z", "completed_at": "2024-07-09T10:50:56.034400Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:56.036843Z", "completed_at": "2024-07-09T10:50:56.036848Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.17470121383667, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle_item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    item_quantity\n    \n as \n    \n    item_quantity\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n  \n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bundle_id as TEXT) as bundle_id,\n        cast(item_id as TEXT) as item_id,\n        item_quantity,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:56.037178Z", "completed_at": "2024-07-09T10:50:57.003841Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:57.004529Z", "completed_at": "2024-07-09T10:50:57.004536Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0861599445343018, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    print_grouped_items\n    \n as \n    \n    print_grouped_items\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as bundle_id,\n        created_at,\n        active as is_active,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n\n    from fields\n)\n\nselect * from final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:56.176961Z", "completed_at": "2024-07-09T10:50:57.133164Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:57.134370Z", "completed_at": "2024-07-09T10:50:57.134376Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0940401554107666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__customer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone_number\n    \n as \n    \n    alternate_phone_number\n    \n, \n    \n    \n    ar_account_id\n    \n as \n    \n    ar_account_id\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_jobs\n    \n as \n    \n    balance_with_jobs\n    \n, \n    \n    \n    bill_address_id\n    \n as \n    \n    bill_address_id\n    \n, \n    \n    \n    bill_with_parent\n    \n as \n    \n    bill_with_parent\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    default_tax_code_id\n    \n as \n    \n    default_tax_code_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    job\n    \n as \n    \n    job\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_number\n    \n as \n    \n    mobile_number\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    open_balance_date\n    \n as \n    \n    open_balance_date\n    \n, \n    \n    \n    parent_customer_id\n    \n as \n    \n    parent_customer_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    preferred_delivery_method\n    \n as \n    \n    preferred_delivery_method\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    resale_number\n    \n as \n    \n    resale_number\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_exemption_reason_id\n    \n as \n    \n    tax_exemption_reason_id\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    website\n    \n as \n    \n    website\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as customer_id,\n        active as is_active,\n        balance,\n        balance_with_jobs,\n        bill_with_parent,\n        company_name,\n        fully_qualified_name,\n        currency_id,\n        display_name,\n        website,\n        taxable,\n        source_relation\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:56.131131Z", "completed_at": "2024-07-09T10:50:57.133594Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:57.134618Z", "completed_at": "2024-07-09T10:50:57.134621Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1135759353637695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(credit_memo_id as TEXT) as credit_memo_id,\n        index,\n        amount,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:56.139950Z", "completed_at": "2024-07-09T10:50:57.205912Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:57.206436Z", "completed_at": "2024-07-09T10:50:57.206443Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1595427989959717, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remaining_credit\n    \n as \n    \n    remaining_credit\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as credit_memo_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        cast(class_id as TEXT) as class_id,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:57.128869Z", "completed_at": "2024-07-09T10:50:58.108327Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:58.108799Z", "completed_at": "2024-07-09T10:50:58.108806Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0759022235870361, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__department", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__department_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_department_id\n    \n as \n    \n    parent_department_id\n    \n, \n    \n    \n    sub_department\n    \n as \n    \n    sub_department\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as department_id,\n        active as is_active,\n        created_at,\n        updated_at,\n        fully_qualified_name,\n        name,\n        sub_department as is_sub_department,\n        parent_department_id,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__department\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:57.299562Z", "completed_at": "2024-07-09T10:50:58.227306Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:58.227776Z", "completed_at": "2024-07-09T10:50:58.227783Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.028113842010498, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(estimate_id as TEXT) as estimate_id,\n        index,\n        description,\n        discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        sales_item_item_id,\n        sales_item_quantity,\n        item_id,\n        quantity,\n        account_id,\n        amount,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:57.245268Z", "completed_at": "2024-07-09T10:50:58.294942Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:58.295935Z", "completed_at": "2024-07-09T10:50:58.295943Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1581358909606934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    cash_back_account_id\n    \n as \n    \n    cash_back_account_id\n    \n, \n    \n    \n    cash_back_amount\n    \n as \n    \n    cash_back_amount\n    \n, \n    \n    \n    cash_back_memo\n    \n as \n    \n    cash_back_memo\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as deposit_id,\n        cast(account_id as TEXT) as account_id,\n        created_at,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        total_amount,\n        home_total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:57.234431Z", "completed_at": "2024-07-09T10:50:58.295196Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:58.296167Z", "completed_at": "2024-07-09T10:50:58.296170Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1765320301055908, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    deposit_account_id\n    \n as \n    \n    deposit_account_id\n    \n, \n    \n    \n    deposit_check_number\n    \n as \n    \n    deposit_check_number\n    \n, \n    \n    \n    deposit_class_id\n    \n as \n    \n    deposit_class_id\n    \n, \n    \n    \n    deposit_customer_id\n    \n as \n    \n    deposit_customer_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    deposit_payment_method_id\n    \n as \n    \n    deposit_payment_method_id\n    \n, \n    \n    \n    deposit_tax_applicable_on\n    \n as \n    \n    deposit_tax_applicable_on\n    \n, \n    \n    \n    deposit_tax_code_id\n    \n as \n    \n    deposit_tax_code_id\n    \n, \n    \n    \n    deposit_transaction_type\n    \n as \n    \n    deposit_transaction_type\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n, \n    \n    \n    refund_receipt_id\n    \n as \n    \n    refund_receipt_id\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(deposit_id as TEXT) as deposit_id,\n        index,\n        amount,\n        description,\n        cast(deposit_account_id as TEXT) as deposit_account_id,\n        cast(deposit_class_id as TEXT) as deposit_class_id,\n        cast(deposit_customer_id as TEXT) as deposit_customer_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:58.205729Z", "completed_at": "2024-07-09T10:50:59.146376Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:59.146926Z", "completed_at": "2024-07-09T10:50:59.146933Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0328090190887451, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate_tmp\"\n\n),\n \nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accepted_by\n    \n as \n    \n    accepted_by\n    \n, \n    \n    \n    accepted_date\n    \n as \n    \n    accepted_date\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    expiration_date\n    \n as \n    \n    expiration_date\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as estimate_id,\n        cast(class_id as TEXT) as class_id,\n        created_at,\n        currency_id,\n        customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        exchange_rate,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:58.328313Z", "completed_at": "2024-07-09T10:50:59.347148Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:59.347833Z", "completed_at": "2024-07-09T10:50:59.347842Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1164519786834717, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discount_amount\n    \n as \n    \n    discount_amount\n    \n, \n    \n    \n    discount_rate\n    \n as \n    \n    discount_rate\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_line_index\n    \n as \n    \n    invoice_line_index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    line_num\n    \n as \n    \n    line_num\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    service_date\n    \n as \n    \n    service_date\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        index,\n        cast(class_id as TEXT) as class_id,\n        description,\n        amount,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        cast(item_id as TEXT) as item_id,\n        quantity,\n        sales_item_quantity,\n        cast(account_id as TEXT) as account_id,\n        unit_price,\n        invoice_line_index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:58.403870Z", "completed_at": "2024-07-09T10:50:59.502507Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:59.503554Z", "completed_at": "2024-07-09T10:50:59.503558Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2072570323944092, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line_tmp\"\n\n),\n\nfields as ( \n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        index,\n        amount,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        detail_type,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        description,\n        quantity,\n        bundle_quantity,\n        cast(bundle_id as TEXT) as bundle_id,\n        cast(account_id as TEXT) as account_id,\n        cast(item_id as TEXT) as item_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:58.411415Z", "completed_at": "2024-07-09T10:50:59.501446Z"}, {"name": "execute", "started_at": "2024-07-09T10:50:59.502209Z", "completed_at": "2024-07-09T10:50:59.502218Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2002270221710205, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    charge_credit_id\n    \n as \n    \n    charge_credit_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    reimburse_charge_id\n    \n as \n    \n    reimburse_charge_id\n    \n, \n    \n    \n    statement_charge_id\n    \n as \n    \n    statement_charge_id\n    \n, \n    \n    \n    time_activity_id\n    \n as \n    \n    time_activity_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        cast(payment_id as TEXT) as payment_id,\n        cast(estimate_id as TEXT) as estimate_id,\n        index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:59.238865Z", "completed_at": "2024-07-09T10:51:00.298235Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:00.298830Z", "completed_at": "2024-07-09T10:51:00.298840Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1664040088653564, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allow_ipnpayment\n    \n as \n    \n    allow_ipnpayment\n    \n, \n    \n    \n    allow_online_achpayment\n    \n as \n    \n    allow_online_achpayment\n    \n, \n    \n    \n    allow_online_credit_card_payment\n    \n as \n    \n    allow_online_credit_card_payment\n    \n, \n    \n    \n    allow_online_payment\n    \n as \n    \n    allow_online_payment\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    billing_bcc_email\n    \n as \n    \n    billing_bcc_email\n    \n, \n    \n    \n    billing_cc_email\n    \n as \n    \n    billing_cc_email\n    \n, \n    \n    \n    billing_email\n    \n as \n    \n    billing_email\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    custom_sales_rep\n    \n as \n    \n    custom_sales_rep\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit\n    \n as \n    \n    deposit\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as invoice_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(customer_id as TEXT) as customer_id,\n        cast(billing_address_id as TEXT) as billing_address_id,\n        shipping_address_id,\n        delivery_type,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        cast(class_id as TEXT) as class_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:59.445614Z", "completed_at": "2024-07-09T10:51:00.467201Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:00.467729Z", "completed_at": "2024-07-09T10:51:00.467736Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.123267650604248, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__item", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    asset_account_id\n    \n as \n    \n    asset_account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    expense_account_id\n    \n as \n    \n    expense_account_id\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    income_account_id\n    \n as \n    \n    income_account_id\n    \n, \n    \n    \n    inventory_start_date\n    \n as \n    \n    inventory_start_date\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_item_id\n    \n as \n    \n    parent_item_id\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    purchase_description\n    \n as \n    \n    purchase_description\n    \n, \n    \n    \n    purchase_tax_code_id\n    \n as \n    \n    purchase_tax_code_id\n    \n, \n    \n    \n    purchase_tax_included\n    \n as \n    \n    purchase_tax_included\n    \n, \n    \n    \n    quantity_on_hand\n    \n as \n    \n    quantity_on_hand\n    \n, \n    \n    \n    sales_tax_code_id\n    \n as \n    \n    sales_tax_code_id\n    \n, \n    \n    \n    sales_tax_included\n    \n as \n    \n    sales_tax_included\n    \n, \n    \n    \n    stock_keeping_unit\n    \n as \n    \n    stock_keeping_unit\n    \n, \n    \n    \n    sub_item\n    \n as \n    \n    sub_item\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    track_quantity_on_hand\n    \n as \n    \n    track_quantity_on_hand\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as item_id,\n        active as is_active,\n        created_at,\n        cast(income_account_id as TEXT) as income_account_id,\n        cast(asset_account_id as TEXT) as asset_account_id,\n        cast(expense_account_id as TEXT) as expense_account_id,\n        name,\n        purchase_cost,\n        taxable,\n        type,\n        unit_price,\n        inventory_start_date,\n        cast(parent_item_id as TEXT) as parent_item_id,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:59.613249Z", "completed_at": "2024-07-09T10:51:00.688404Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:00.688897Z", "completed_at": "2024-07-09T10:51:00.688906Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1900248527526855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    billable_status\n    \n as \n    \n    billable_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    posting_type\n    \n as \n    \n    posting_type\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_applicable_on\n    \n as \n    \n    tax_applicable_on\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(journal_entry_id as TEXT) as journal_entry_id,\n        index,\n        cast(account_id as TEXT) as account_id,\n        amount,\n        cast(customer_id as TEXT) as customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast(class_id as TEXT) as class_id,\n        description,\n        billable_status,\n        posting_type,\n        cast(vendor_id as TEXT) as vendor_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:50:59.618027Z", "completed_at": "2024-07-09T10:51:00.702103Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:00.702578Z", "completed_at": "2024-07-09T10:51:00.702588Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1979010105133057, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    adjustment\n    \n as \n    \n    adjustment\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as journal_entry_id,\n        adjustment as is_adjustment,\n        created_at,\n        currency_id,\n        cast(doc_number as TEXT) as doc_number,\n        exchange_rate,\n        private_note,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:00.569797Z", "completed_at": "2024-07-09T10:51:01.545855Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:01.550693Z", "completed_at": "2024-07-09T10:51:01.550705Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0918006896972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_payment\n    \n as \n    \n    process_payment\n    \n, \n    \n    \n    receivable_account_id\n    \n as \n    \n    receivable_account_id\n    \n, \n    \n    \n    reference_number\n    \n as \n    \n    reference_number\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    unapplied_amount\n    \n as \n    \n    unapplied_amount\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as payment_id,\n        unapplied_amount,\n        total_amount,\n        currency_id,\n        cast(receivable_account_id as TEXT) as receivable_account_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(customer_id as TEXT) as customer_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:00.406760Z", "completed_at": "2024-07-09T10:51:01.546264Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:01.551058Z", "completed_at": "2024-07-09T10:51:01.551064Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2605819702148438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(payment_id as TEXT) as payment_id,\n        index,\n        amount,\n        journal_entry_id,\n        deposit_id,\n        cast(invoice_id as TEXT) as invoice_id,\n        credit_memo_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:00.811548Z", "completed_at": "2024-07-09T10:51:01.849172Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:01.849662Z", "completed_at": "2024-07-09T10:51:01.849670Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1320581436157227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit\n    \n as \n    \n    credit\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remit_to_address_id\n    \n as \n    \n    remit_to_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n     \n    select \n        cast(id as TEXT) as purchase_id,\n        cast(account_id as TEXT) as account_id,\n        created_at,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        exchange_rate,\n        credit,\n        total_amount,\n        payment_type,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        cast(vendor_id as TEXT) as vendor_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:00.803912Z", "completed_at": "2024-07-09T10:51:01.867443Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:01.867895Z", "completed_at": "2024-07-09T10:51:01.867900Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1709649562835693, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_id as TEXT) as purchase_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id, \n        account_expense_billable_status,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_billable_status,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:01.661870Z", "completed_at": "2024-07-09T10:51:02.691639Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:02.700542Z", "completed_at": "2024-07-09T10:51:02.700551Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1592891216278076, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(refund_id as TEXT) as refund_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id, \n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        sales_item_tax_code_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:01.668532Z", "completed_at": "2024-07-09T10:51:02.701355Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:02.701826Z", "completed_at": "2024-07-09T10:51:02.701831Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1622321605682373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    check_payment_account_number\n    \n as \n    \n    check_payment_account_number\n    \n, \n    \n    \n    check_payment_bank_name\n    \n as \n    \n    check_payment_bank_name\n    \n, \n    \n    \n    check_payment_check_number\n    \n as \n    \n    check_payment_check_number\n    \n, \n    \n    \n    check_payment_name_on_account\n    \n as \n    \n    check_payment_name_on_account\n    \n, \n    \n    \n    check_payment_status\n    \n as \n    \n    check_payment_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as refund_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        cast(class_id as TEXT) as class_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        created_at,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        currency_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:01.944252Z", "completed_at": "2024-07-09T10:51:02.918097Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:02.919207Z", "completed_at": "2024-07-09T10:51:02.919216Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0760061740875244, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(sales_receipt_id as TEXT) as sales_receipt_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_tax_code_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:01.975284Z", "completed_at": "2024-07-09T10:51:02.997152Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:02.997761Z", "completed_at": "2024-07-09T10:51:02.997769Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1270830631256104, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as sales_receipt_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        created_at,\n        cast(customer_id as TEXT) as customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast(class_id as TEXT) as class_id,\n        currency_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:02.831707Z", "completed_at": "2024-07-09T10:51:03.747311Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.747832Z", "completed_at": "2024-07-09T10:51:03.747840Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0316321849822998, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(vendor_credit_id as TEXT) as vendor_credit_id,\n        index,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_quantity,\n        item_expense_unit_price,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        item_expense_billable_status,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.864627Z", "completed_at": "2024-07-09T10:51:03.880625Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.881090Z", "completed_at": "2024-07-09T10:51:03.881093Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017461061477661133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_line_bill_id__index__source_relation.73722b1062", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_line\"\n    group by bill_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.882635Z", "completed_at": "2024-07-09T10:51:03.887862Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.888329Z", "completed_at": "2024-07-09T10:51:03.888334Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006640911102294922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id.25c5ea7348", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_line\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.889788Z", "completed_at": "2024-07-09T10:51:03.892847Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.893306Z", "completed_at": "2024-07-09T10:51:03.893310Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004453897476196289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__address_address_id__source_relation.5bc813a014", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__address\"\n    group by address_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.894742Z", "completed_at": "2024-07-09T10:51:03.897373Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.897808Z", "completed_at": "2024-07-09T10:51:03.897813Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003963947296142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__address_address_id.4f100ae50c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__address\"\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.899549Z", "completed_at": "2024-07-09T10:51:03.904651Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.905181Z", "completed_at": "2024-07-09T10:51:03.905188Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006947994232177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id.35f96199bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.907180Z", "completed_at": "2024-07-09T10:51:03.910179Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.910782Z", "completed_at": "2024-07-09T10:51:03.910788Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004744052886962891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__account_classifications", "compiled": true, "compiled_code": "with accounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\nclassification_fix as (\n\n    select \n        account_id,\n        source_relation,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n\n    select \n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.account_id = adjusted_balances.parent_account_id\n        and parent_accounts.source_relation = adjusted_balances.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__account_classifications\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.912350Z", "completed_at": "2024-07-09T10:51:03.918905Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.919407Z", "completed_at": "2024-07-09T10:51:03.919412Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008045196533203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue.127506f73f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        classification as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\n    group by classification\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Asset','Equity','Expense','Liability','Revenue'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.920979Z", "completed_at": "2024-07-09T10:51:03.925402Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.925918Z", "completed_at": "2024-07-09T10:51:03.925924Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0059261322021484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__account_account_id__source_relation.864a4b056a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\n    group by account_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.927488Z", "completed_at": "2024-07-09T10:51:03.931059Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.931513Z", "completed_at": "2024-07-09T10:51:03.931519Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004976034164428711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__account_account_id.9944488b9d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.933022Z", "completed_at": "2024-07-09T10:51:03.937482Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.937966Z", "completed_at": "2024-07-09T10:51:03.937972Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005940914154052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_bill_payment_id__source_relation.4b7aafd630", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment\"\n    group by bill_payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.939545Z", "completed_at": "2024-07-09T10:51:03.942346Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.942799Z", "completed_at": "2024-07-09T10:51:03.942805Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004189968109130859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id.908899ccfb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment\"\nwhere bill_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.944348Z", "completed_at": "2024-07-09T10:51:03.948152Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.948595Z", "completed_at": "2024-07-09T10:51:03.948600Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005220890045166016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_payment_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to accounts payable and a credit record to the specified cash account.\n*/\n\n--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith bill_payments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment\"\n),\n\nbill_payment_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\nap_accounts as (\n\n    select\n        account_id,\n        currency_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Payable'\n        and is_active\n        and not is_sub_account\n),\n\nbill_payment_join as (\n\n    select\n        bill_payments.bill_payment_id as transaction_id,\n        bill_payments.source_relation,\n        row_number() over(partition by bill_payments.bill_payment_id, bill_payments.source_relation \n            order by bill_payments.source_relation, bill_payments.transaction_date) - 1 as index,\n        bill_payments.transaction_date,\n        bill_payments.total_amount as amount,\n        (bill_payments.total_amount * coalesce(bill_payments.exchange_rate, 1)) as converted_amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id,\n        bill_payments.vendor_id,\n        bill_payments.department_id\n    from bill_payments\n\n    left join ap_accounts\n        on ap_accounts.currency_id = bill_payments.currency_id\n        and ap_accounts.source_relation = bill_payments.source_relation\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payment_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        department_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        account_id,\n        cast(null as TEXT) as class_id,\n        department_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source\n    from bill_payment_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_payment_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.950122Z", "completed_at": "2024-07-09T10:51:03.953771Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.954484Z", "completed_at": "2024-07-09T10:51:03.954492Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005375862121582031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_line_bill_payment_id__index__source_relation.0a7e17967c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\"\n    group by bill_payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.956139Z", "completed_at": "2024-07-09T10:51:03.959182Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.959746Z", "completed_at": "2024-07-09T10:51:03.959754Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0048749446868896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id.1dbb366150", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\"\nwhere bill_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.963486Z", "completed_at": "2024-07-09T10:51:03.976628Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.977421Z", "completed_at": "2024-07-09T10:51:03.977430Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016869068145751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_join", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill\"\n),\n\nbill_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_line\"\n),\n\nbills_linked as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn\"\n),\n\nbill_payments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment\"\n),\n\nbill_payment_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\"\n\n    where bill_id is not null\n),\n\nbill_pay as (\n\n    select\n        bills.bill_id,\n        bills.source_relation,\n        bills_linked.bill_payment_id\n    from bills\n\n    left join bills_linked\n        on bills.bill_id = bills_linked.bill_id\n        and bills.source_relation = bills_linked.source_relation\n\n    where bills_linked.bill_payment_id is not null\n),\n\nbill_link as (\n\n    select\n        bills.*,\n        bill_pay.bill_payment_id\n    from bills\n\n    left join bill_pay\n        on bills.bill_id = bill_pay.bill_id\n        and bills.source_relation = bill_pay.source_relation\n),\n\nfinal as (\n\n    select\n        cast('bill' as TEXT)  as transaction_type,\n        bill_link.bill_id as transaction_id,\n        bill_link.source_relation,\n        bill_link.doc_number,\n        bill_link.department_id,\n        bill_link.vendor_id as vendor_id,\n        bill_link.payable_account_id,\n        bill_link.total_amount as total_amount,\n        (bill_link.total_amount * coalesce(bill_link.exchange_rate, 1)) as total_converted_amount,\n        bill_link.balance as current_balance,\n        bill_link.due_date_at as due_date,\n        (bill_payments.total_amount * coalesce(bill_payments.exchange_rate, 1)) as total_current_converted_payment,\n        min(bill_payments.transaction_date) as initial_payment_date,\n        max(bill_payments.transaction_date) as recent_payment_date,\n        sum(coalesce(bill_payment_lines.amount, 0)) as total_current_payment\n\n    from bill_link\n\n    left join bill_payments\n        on bill_link.bill_payment_id = bill_payments.bill_payment_id\n        and bill_link.source_relation = bill_payments.source_relation\n\n    left join bill_payment_lines\n        on bill_payments.bill_payment_id = bill_payment_lines.bill_payment_id\n        and bill_payments.source_relation = bill_payment_lines.source_relation\n        and bill_link.bill_id = bill_payment_lines.bill_id\n        and bill_link.source_relation = bill_payment_lines.source_relation\n    \n    group by 1,2,3,4,5,6,7,8,9,10,11,12 \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_join\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.979333Z", "completed_at": "2024-07-09T10:51:03.983035Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.983535Z", "completed_at": "2024-07-09T10:51:03.983542Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005240201950073242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_bill_id__source_relation.8c08249abf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill\"\n    group by bill_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:02.824086Z", "completed_at": "2024-07-09T10:51:03.879693Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.880175Z", "completed_at": "2024-07-09T10:51:03.880182Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1630229949951172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__transfer", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__transfer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    from_account_id\n    \n as \n    \n    from_account_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    to_account_id\n    \n as \n    \n    to_account_id\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as transfer_id,\n        amount,\n        cast(from_account_id as TEXT) as from_account_id,\n        cast(to_account_id as TEXT) as to_account_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__transfer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.986170Z", "completed_at": "2024-07-09T10:51:03.993087Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.993725Z", "completed_at": "2024-07-09T10:51:03.993731Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009249210357666016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id.ca717958c8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.990444Z", "completed_at": "2024-07-09T10:51:03.994447Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:03.995673Z", "completed_at": "2024-07-09T10:51:03.995677Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006903171539306641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id.6d547b8c07", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle_item\"\nwhere bundle_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.996839Z", "completed_at": "2024-07-09T10:51:04.004651Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.007017Z", "completed_at": "2024-07-09T10:51:04.007029Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012489795684814453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bundle_bundle_id__source_relation.e241a21ebc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bundle_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle\"\n    group by bundle_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.000978Z", "completed_at": "2024-07-09T10:51:04.006700Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.008159Z", "completed_at": "2024-07-09T10:51:04.008165Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008698225021362305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id.382e1dad60", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle\"\nwhere bundle_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.010676Z", "completed_at": "2024-07-09T10:51:04.020231Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.021320Z", "completed_at": "2024-07-09T10:51:04.021332Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012782812118530273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__customer_customer_id__source_relation.61cc22a568", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__customer\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.017038Z", "completed_at": "2024-07-09T10:51:04.020600Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.021741Z", "completed_at": "2024-07-09T10:51:04.021745Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012424945831298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id.98232a9723", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__customer\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.024910Z", "completed_at": "2024-07-09T10:51:04.031113Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.032019Z", "completed_at": "2024-07-09T10:51:04.032027Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009095907211303711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_line_credit_memo_id__index__source_relation.7a43f0e186", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\"\n    group by credit_memo_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.028381Z", "completed_at": "2024-07-09T10:51:04.031739Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.033011Z", "completed_at": "2024-07-09T10:51:04.033015Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009869813919067383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id.58953be02b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\"\nwhere credit_memo_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.050748Z", "completed_at": "2024-07-09T10:51:04.066942Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.068370Z", "completed_at": "2024-07-09T10:51:04.068375Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.035301923751831055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_credit_memo_id__source_relation.917f24c5ca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo\"\n    group by credit_memo_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.054787Z", "completed_at": "2024-07-09T10:51:04.068869Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.070853Z", "completed_at": "2024-07-09T10:51:04.070856Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.021643877029418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id.d921d2b152", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo\"\nwhere credit_memo_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.072655Z", "completed_at": "2024-07-09T10:51:04.081103Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.081604Z", "completed_at": "2024-07-09T10:51:04.081609Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01114511489868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_line_estimate_id__index__source_relation.cc61ab0953", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate_line\"\n    group by estimate_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.077695Z", "completed_at": "2024-07-09T10:51:04.081837Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.083034Z", "completed_at": "2024-07-09T10:51:04.083038Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007799863815307617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id.c060f99b4c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate_line\"\nwhere estimate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.084530Z", "completed_at": "2024-07-09T10:51:04.090768Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.091460Z", "completed_at": "2024-07-09T10:51:04.091466Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008806943893432617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_deposit_id__source_relation.5574d8e908", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit\"\n    group by deposit_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.088210Z", "completed_at": "2024-07-09T10:51:04.091242Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.092383Z", "completed_at": "2024-07-09T10:51:04.092386Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005452156066894531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id.880b8c37b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit\"\nwhere deposit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.094454Z", "completed_at": "2024-07-09T10:51:04.100826Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.101324Z", "completed_at": "2024-07-09T10:51:04.101329Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00861811637878418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__deposit_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified cash account and a credit record to either undeposited funds or a\nspecific other account indicated in the deposit line.\n*/\n\n--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith deposits as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit\"\n),\n\ndeposit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_line\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\nuf_accounts as (\n\n    select\n        account_id,\n        source_relation\n    from accounts\n\n    where account_sub_type = 'UndepositedFunds'\n        and is_active\n        and not is_sub_account\n),\n\ndeposit_join as (\n\n    select\n        deposits.deposit_id as transaction_id,\n        deposits.source_relation,\n        deposit_lines.index,\n        deposits.transaction_date,\n        deposit_lines.amount,\n        deposit_lines.amount * (coalesce(deposits.home_total_amount/deposits.total_amount, 1)) as converted_amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.deposit_account_id, uf_accounts.account_id) as deposit_from_acct_id,\n        deposit_customer_id as customer_id,\n        deposit_lines.deposit_class_id as class_id,\n        deposits.department_id\n\n    from deposits\n\n    inner join deposit_lines\n        on deposits.deposit_id = deposit_lines.deposit_id\n        and deposits.source_relation = deposit_lines.source_relation\n\n    left join uf_accounts\n        on uf_accounts.source_relation = deposits.source_relation\n\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        deposit_to_acct_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        deposit_from_acct_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source\n    from deposit_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__deposit_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.097688Z", "completed_at": "2024-07-09T10:51:04.101546Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.102970Z", "completed_at": "2024-07-09T10:51:04.102975Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009671926498413086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__deposit_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith deposits as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit\"\n), \n\ndeposit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_line\"\n),\n\nfinal as (\n\n    select\n        deposits.deposit_id as transaction_id,\n        deposits.source_relation,\n        deposit_lines.index as transaction_line_id,\n        cast(null as TEXT) as doc_number,\n        'deposit' as transaction_type,\n        deposits.transaction_date,\n        deposit_lines.deposit_account_id as account_id,\n        deposit_lines.deposit_class_id as class_id,\n        deposits.department_id,\n        deposit_lines.deposit_customer_id as customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        deposit_lines.description,\n        deposit_lines.amount,\n        deposit_lines.amount * (coalesce(deposits.home_total_amount/deposits.total_amount, 1)) as converted_amount,\n        deposits.total_amount,\n        deposits.total_amount * (coalesce(deposits.home_total_amount/deposits.total_amount, 1)) as total_converted_amount\n    from deposits\n    \n    inner join deposit_lines \n        on deposits.deposit_id = deposit_lines.deposit_id\n        and deposits.source_relation = deposit_lines.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__deposit_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.104623Z", "completed_at": "2024-07-09T10:51:04.111546Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.112045Z", "completed_at": "2024-07-09T10:51:04.112051Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009452104568481445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_line_deposit_id__index__source_relation.443de63985", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_line\"\n    group by deposit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.108993Z", "completed_at": "2024-07-09T10:51:04.112271Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.113472Z", "completed_at": "2024-07-09T10:51:04.113476Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00585484504699707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id.d615f463e1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__deposit_line\"\nwhere deposit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.114986Z", "completed_at": "2024-07-09T10:51:04.121106Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.121835Z", "completed_at": "2024-07-09T10:51:04.121841Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008772850036621094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_estimate_id__source_relation.412260b882", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate\"\n    group by estimate_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.118352Z", "completed_at": "2024-07-09T10:51:04.121613Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.122774Z", "completed_at": "2024-07-09T10:51:04.122777Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005715131759643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id.0331d3c310", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate\"\nwhere estimate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.124886Z", "completed_at": "2024-07-09T10:51:04.131809Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.132297Z", "completed_at": "2024-07-09T10:51:04.132303Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009238004684448242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_bundle_invoice_id__index__invoice_line_index__source_relation.5370e9fcd0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, invoice_line_index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle\"\n    group by invoice_id, index, invoice_line_index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.128385Z", "completed_at": "2024-07-09T10:51:04.132549Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.133737Z", "completed_at": "2024-07-09T10:51:04.133740Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009943008422851562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id.cfd59b83a9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.135209Z", "completed_at": "2024-07-09T10:51:04.141167Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.141674Z", "completed_at": "2024-07-09T10:51:04.141680Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008340835571289062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_invoice_id__index__source_relation.99b74bc327", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line\"\n    group by invoice_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.138663Z", "completed_at": "2024-07-09T10:51:04.141903Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.143091Z", "completed_at": "2024-07-09T10:51:04.143095Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005834102630615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id.0424087a8f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.144605Z", "completed_at": "2024-07-09T10:51:04.150426Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.150884Z", "completed_at": "2024-07-09T10:51:04.150889Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00816488265991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id.c9b9c8f8f4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.147795Z", "completed_at": "2024-07-09T10:51:04.151098Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.152323Z", "completed_at": "2024-07-09T10:51:04.152326Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0058820247650146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_invoice_id__source_relation.ef51800044", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice\"\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.020780Z", "completed_at": "2024-07-09T10:51:04.068627Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.070598Z", "completed_at": "2024-07-09T10:51:04.070602Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1780850887298584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as vendor_credit_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        exchange_rate,\n        created_at,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        cast(department_id as TEXT) as department_id,\n        private_note,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(vendor_id as TEXT) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:03.102960Z", "completed_at": "2024-07-09T10:51:04.054374Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.068069Z", "completed_at": "2024-07-09T10:51:04.068077Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0970420837402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone\n    \n as \n    \n    alternate_phone\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_phone\n    \n as \n    \n    mobile_phone\n    \n, \n    \n    \n    other_contacts\n    \n as \n    \n    other_contacts\n    \n, \n    \n    \n    primary_phone\n    \n as \n    \n    primary_phone\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_identifier\n    \n as \n    \n    tax_identifier\n    \n, \n    \n    \n    term_id\n    \n as \n    \n    term_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_1099\n    \n as \n    \n    vendor_1099\n    \n, \n    \n    \n    web_url\n    \n as \n    \n    web_url\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as vendor_id,\n        account_number,\n        active as is_active,\n        balance,\n        cast(billing_address_id as TEXT) as billing_address_id,\n        company_name,\n        created_at,\n        currency_id,\n        display_name,\n        web_url,\n        vendor_1099 as is_vendor_1099,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.153769Z", "completed_at": "2024-07-09T10:51:04.197684Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.200129Z", "completed_at": "2024-07-09T10:51:04.200133Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04893994331359863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id.b6d8e1ad7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.157845Z", "completed_at": "2024-07-09T10:51:04.199044Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.201815Z", "completed_at": "2024-07-09T10:51:04.201819Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.045742034912109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified expense account and credit record to accounts payable for each bill transaction.\n*/\n\n--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill\"\n),\n\nbill_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.expense_account_id as parent_expense_account_id,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nbill_join as (\n    select\n        bills.bill_id as transaction_id,\n        bills.source_relation,\n        bill_lines.index,\n        bills.transaction_date,\n        bill_lines.amount,\n        (bill_lines.amount * coalesce(bills.exchange_rate, 1)) as converted_amount,\n        coalesce(bill_lines.account_expense_account_id,items.asset_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        coalesce(bill_lines.item_expense_class_id, bill_lines.account_expense_class_id) as class_id,\n        bills.vendor_id,\n        bills.department_id\n    from bills\n\n    inner join bill_lines\n        on bills.bill_id = bill_lines.bill_id\n        and bills.source_relation = bill_lines.source_relation\n\n    left join items\n        on bill_lines.item_expense_item_id = items.item_id\n        and bill_lines.source_relation = items.source_relation\n),\n\nfinal as (\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payed_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payable_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source\n    from bill_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.203446Z", "completed_at": "2024-07-09T10:51:04.212694Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.218508Z", "completed_at": "2024-07-09T10:51:04.218515Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018597126007080078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill\" \n),\n\nbill_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bill_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        bills.bill_id as transaction_id,\n        bills.source_relation,\n        bill_lines.index as transaction_line_id,\n        bills.doc_number,\n        'bill' as transaction_type,\n        bills.transaction_date,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id) as account_id,\n        bill_lines.account_expense_class_id as class_id,\n        bills.department_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        bills.vendor_id,\n        coalesce(bill_lines.account_expense_billable_status, bill_lines.item_expense_billable_status) as billable_status,\n        coalesce(bill_lines.description, items.name) as description,\n        bill_lines.amount,\n        bill_lines.amount * (coalesce(bills.exchange_rate, 1)) as converted_amount,\n        bills.total_amount,\n        bills.total_amount * (coalesce(bills.exchange_rate, 1)) as total_converted_amount\n    from bills\n\n    inner join bill_lines \n        on bills.bill_id = bill_lines.bill_id\n        and bills.source_relation = bill_lines.source_relation\n\n    left join items\n        on bill_lines.item_expense_item_id = items.item_id\n        and bill_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.206342Z", "completed_at": "2024-07-09T10:51:04.213437Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.219833Z", "completed_at": "2024-07-09T10:51:04.219836Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018953800201416016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__credit_memo_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to Discounts Refunds Given and a credit record to the specified income account.\n*/\n\n--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith credit_memos as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo\"\n),\n\ncredit_memo_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\ndf_accounts as (\n\n    select\n        account_id as account_id,\n        currency_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n        and not is_sub_account\n),\n\ncredit_memo_join as (\n\n    select\n        credit_memos.credit_memo_id as transaction_id,\n        credit_memos.source_relation,\n        credit_memo_lines.index,\n        credit_memos.transaction_date,\n        credit_memo_lines.amount,\n        (credit_memo_lines.amount * coalesce(credit_memos.exchange_rate, 1)) as converted_amount,\n        coalesce(credit_memo_lines.sales_item_account_id, items.income_account_id, items.expense_account_id) as account_id,\n        credit_memos.customer_id,\n        coalesce(credit_memo_lines.sales_item_class_id, credit_memo_lines.discount_class_id, credit_memos.class_id) as class_id,\n        credit_memos.department_id,\n        credit_memos.currency_id\n\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos.credit_memo_id = credit_memo_lines.credit_memo_id\n        and credit_memos.source_relation = credit_memo_lines.source_relation\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.item_id\n        and credit_memo_lines.source_relation = items.source_relation\n\n    where coalesce(credit_memo_lines.discount_account_id, credit_memo_lines.sales_item_account_id, credit_memo_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        credit_memo_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount * -1 as amount,\n        converted_amount * -1 as converted_amount,\n        account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'credit_memo' as transaction_source\n    from credit_memo_join\n\n    union all\n\n    select\n        transaction_id,\n        credit_memo_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount * -1 as amount,\n        converted_amount * -1 as converted_amount,\n        df_accounts.account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'credit_memo' as transaction_source\n    from credit_memo_join\n\n    left join df_accounts\n        on df_accounts.currency_id = credit_memo_join.currency_id\n        and df_accounts.source_relation = credit_memo_join.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__credit_memo_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.210039Z", "completed_at": "2024-07-09T10:51:04.218241Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.220304Z", "completed_at": "2024-07-09T10:51:04.220309Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016062021255493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__credit_memo_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith credit_memos as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo\"\n),\n\ncredit_memo_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        credit_memos.credit_memo_id as transaction_id,\n        credit_memos.source_relation,\n        credit_memo_lines.index as transaction_line_id,\n        credit_memos.doc_number,\n        'credit_memo' as transaction_type,\n        credit_memos.transaction_date,\n        credit_memo_lines.sales_item_item_id as item_id,\n        credit_memo_lines.sales_item_quantity as item_quantity,\n        credit_memo_lines.sales_item_unit_price as item_unit_price,\n        case when credit_memo_lines.sales_item_account_id is null\n            then coalesce(items.income_account_id, items.asset_account_id, items.expense_account_id) \n            else credit_memo_lines.sales_item_account_id\n                end as account_id,\n        credit_memos.class_id,\n        credit_memos.department_id,\n        credit_memos.customer_id, \n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        credit_memo_lines.description,\n        credit_memo_lines.amount * -1 as amount,\n        credit_memo_lines.amount * coalesce(-credit_memos.exchange_rate, -1) as converted_amount,\n        credit_memos.total_amount * -1 as total_amount,\n        credit_memos.total_amount * coalesce(-credit_memos.exchange_rate, -1) as total_converted_amount\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos.credit_memo_id = credit_memo_lines.credit_memo_id\n        and credit_memos.source_relation = credit_memo_lines.source_relation\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.item_id\n        and credit_memo_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__credit_memo_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.213690Z", "completed_at": "2024-07-09T10:51:04.220069Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.222999Z", "completed_at": "2024-07-09T10:51:04.223005Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014626741409301758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__invoice_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to accounts receivable and a credit record to a specified revenue account indicated on the invoice line.\n*/\n\n--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice\"\n),\n\ninvoice_lines as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line\"\n),\n\nitems as (\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\naccounts as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\n\n\n\ninvoice_bundles as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle\"\n),\n\nbundles as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle\"\n),\n\nbundle_items as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__bundle_item\"\n),\n\nincome_accounts as (\n\n    select *\n    from accounts\n\n    where account_sub_type = 'SalesOfProductIncome'\n),\n\nbundle_income_accounts as (\n\n    select distinct\n        coalesce(parent.income_account_id, income_accounts.account_id) as account_id,\n        coalesce(parent.source_relation, income_accounts.source_relation) as source_relation,\n        bundle_items.bundle_id\n\n    from items\n\n    left join items as parent\n        on items.parent_item_id = parent.item_id\n        and items.source_relation = parent.source_relation\n\n    inner join income_accounts\n        on income_accounts.account_id = items.income_account_id\n        and income_accounts.source_relation = items.source_relation\n\n    inner join bundle_items\n        on bundle_items.item_id = items.item_id\n        and bundle_items.source_relation = items.source_relation\n),\n\n\nar_accounts as (\n\n    select \n        account_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n),\n\ninvoice_join as (\n\n    select\n        invoices.invoice_id as transaction_id,\n        invoices.source_relation,\n        invoice_lines.index,\n        invoices.transaction_date as transaction_date,\n\n        \n        case when invoice_lines.bundle_id is not null and invoices.total_amount = 0 then invoices.total_amount\n            else invoice_lines.amount\n        end as amount,\n        case when invoice_lines.bundle_id is not null and invoices.total_amount = 0 \n            then (invoices.total_amount * coalesce(invoices.exchange_rate, 1))\n            else (invoice_lines.amount * coalesce(invoices.exchange_rate, 1))\n        end as converted_amount,\n        case when invoice_lines.detail_type is not null then invoice_lines.detail_type\n            when coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.sales_item_account_id) is not null then 'SalesItemLineDetail'\n            when invoice_lines.discount_account_id is not null then 'DiscountLineDetail'\n            when coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.discount_account_id, invoice_lines.sales_item_account_id) is null then 'NoAccountMapping'\n        end as invoice_line_transaction_type,\n        coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.discount_account_id, invoice_lines.sales_item_account_id) as account_id,\n\n        \n\n        coalesce(invoice_lines.sales_item_class_id, invoice_lines.discount_class_id, invoices.class_id) as class_id,\n\n        invoices.customer_id,\n        invoices.department_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices.invoice_id = invoice_lines.invoice_id\n        and invoices.source_relation = invoice_lines.source_relation\n\n    left join items\n        on coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) = items.item_id\n        and invoice_lines.source_relation = items.source_relation\n\n    \n    left join bundle_income_accounts\n        on bundle_income_accounts.bundle_id = invoice_lines.bundle_id\n        and bundle_income_accounts.source_relation = invoice_lines.source_relation\n\n    \n),\n\ninvoice_filter as (\n\n    select *\n    from invoice_join\n    where invoice_line_transaction_type not in ('SubTotalLineDetail','NoAccountMapping')\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        invoice_filter.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        account_id,\n        class_id,\n        department_id,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'debit'\n            else 'credit' \n        end as transaction_type,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'invoice discount'\n            else 'invoice'\n        end as transaction_source\n    from invoice_filter\n\n    union all\n\n    select\n        transaction_id,\n        invoice_filter.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        ar_accounts.account_id,\n        class_id,\n        department_id,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'credit'\n            else 'debit' \n        end as transaction_type,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'invoice discount'\n            else 'invoice'\n        end as transaction_source\n    from invoice_filter\n\n    left join ar_accounts\n        on ar_accounts.source_relation = invoice_filter.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__invoice_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.224911Z", "completed_at": "2024-07-09T10:51:04.235884Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.240216Z", "completed_at": "2024-07-09T10:51:04.240222Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019058942794799805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__invoice_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice\"\n),\n\ninvoice_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        invoices.invoice_id as transaction_id,\n        invoices.source_relation,\n        invoice_lines.index as transaction_line_id,\n        invoices.doc_number,\n        'invoice' as transaction_type,\n        invoices.transaction_date,\n        coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) as item_id,\n        coalesce(invoice_lines.quantity, invoice_lines.sales_item_quantity) as item_quantity,\n        invoice_lines.sales_item_unit_price as item_unit_price,\n        case when invoice_lines.account_id is null\n            then coalesce(items.income_account_id, items.expense_account_id, items.asset_account_id)\n            else invoice_lines.account_id\n                end as account_id,\n        coalesce(invoice_lines.discount_class_id, invoice_lines.sales_item_class_id) as class_id,\n        invoices.department_id,\n        invoices.customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        invoice_lines.description,\n        invoice_lines.amount,\n        invoice_lines.amount * coalesce(invoices.exchange_rate, 1) as converted_amount,\n        invoices.total_amount,\n        invoices.total_amount * coalesce(invoices.exchange_rate, 1) as total_converted_amount\n    from invoices\n\n    inner join invoice_lines\n        on invoices.invoice_id = invoice_lines.invoice_id\n        and invoices.source_relation = invoice_lines.source_relation\n\n    left join items\n        on coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) = items.item_id\n        and invoice_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__invoice_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.229806Z", "completed_at": "2024-07-09T10:51:04.239239Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.240871Z", "completed_at": "2024-07-09T10:51:04.240875Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018435001373291016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__item_item_id__source_relation.169465a2a6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        item_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n    group by item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.233185Z", "completed_at": "2024-07-09T10:51:04.239752Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.241787Z", "completed_at": "2024-07-09T10:51:04.241791Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01882791519165039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__item_item_id.da906d8fb9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\nwhere item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.236224Z", "completed_at": "2024-07-09T10:51:04.240459Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.242942Z", "completed_at": "2024-07-09T10:51:04.242950Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011651039123535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit.ab661907c3", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        posting_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\n    group by posting_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Credit','Debit'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.246285Z", "completed_at": "2024-07-09T10:51:04.258812Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.260150Z", "completed_at": "2024-07-09T10:51:04.260157Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017294883728027344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__journal_entry_line_journal_entry_id__index__source_relation.0cd1d9f232", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        journal_entry_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\n    group by journal_entry_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.250279Z", "completed_at": "2024-07-09T10:51:04.259155Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.260607Z", "completed_at": "2024-07-09T10:51:04.260610Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016932010650634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id.bd89a6f784", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\nwhere journal_entry_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.256265Z", "completed_at": "2024-07-09T10:51:04.259911Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.262221Z", "completed_at": "2024-07-09T10:51:04.262224Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013729095458984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__journal_entry_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith journal_entries as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry\"\n),\n\njournal_entry_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\n),\n\nfinal as (\n\n    select\n        journal_entries.journal_entry_id as transaction_id,\n        journal_entries.source_relation,\n        journal_entry_lines.index as transaction_line_id,\n        journal_entries.doc_number,\n        'journal_entry' as transaction_type,\n        journal_entries.transaction_date,\n        journal_entry_lines.account_id,\n        journal_entry_lines.class_id,\n        journal_entry_lines.department_id,\n        journal_entry_lines.customer_id,\n        journal_entry_lines.vendor_id,\n        cast(billable_status as TEXT) as billable_status,\n        journal_entry_lines.description,\n        case when lower(journal_entry_lines.posting_type) = 'credit'\n            then journal_entry_lines.amount * -1 \n            else journal_entry_lines.amount \n        end as amount,\n        case when lower(journal_entry_lines.posting_type) = 'credit'\n            then journal_entry_lines.amount * coalesce(-journal_entries.exchange_rate, -1)\n            else journal_entry_lines.amount * coalesce(journal_entries.exchange_rate, 1)\n        end as converted_amount,\n        journal_entries.total_amount,\n        journal_entries.total_amount * coalesce(journal_entries.exchange_rate, 1) as total_converted_amount\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries.journal_entry_id = journal_entry_lines.journal_entry_id\n        and journal_entries.source_relation = journal_entry_lines.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__journal_entry_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.254124Z", "completed_at": "2024-07-09T10:51:04.260378Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.262732Z", "completed_at": "2024-07-09T10:51:04.262735Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01841425895690918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__journal_entry_double_entry", "compiled": true, "compiled_code": "/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\n\n--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith journal_entries as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry\"\n),\n\njournal_entry_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\n),\n\nfinal as (\n\n    select\n        journal_entries.journal_entry_id as transaction_id,\n        journal_entries.source_relation,\n        journal_entry_lines.index,\n        journal_entries.transaction_date,\n        journal_entry_lines.customer_id,\n        journal_entry_lines.vendor_id,\n        journal_entry_lines.amount,\n        (journal_entry_lines.amount * coalesce(journal_entries.exchange_rate, 1)) as converted_amount,\n        journal_entry_lines.account_id,\n        class_id,\n        journal_entry_lines.department_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries.journal_entry_id = journal_entry_lines.journal_entry_id\n        and journal_entries.source_relation = journal_entry_lines.source_relation\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__journal_entry_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.266125Z", "completed_at": "2024-07-09T10:51:04.275903Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.281223Z", "completed_at": "2024-07-09T10:51:04.281230Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01860809326171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id.39198c4ff2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__journal_entry\"\nwhere journal_entry_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.269278Z", "completed_at": "2024-07-09T10:51:04.280254Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.281876Z", "completed_at": "2024-07-09T10:51:04.281880Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01870894432067871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_payment_id__source_relation.1998a8282e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment\"\n    group by payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.272637Z", "completed_at": "2024-07-09T10:51:04.280776Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.282802Z", "completed_at": "2024-07-09T10:51:04.282805Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0183413028717041, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id.ca2c1ef54f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment\"\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.276184Z", "completed_at": "2024-07-09T10:51:04.281449Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.283733Z", "completed_at": "2024-07-09T10:51:04.283736Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016260147094726562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__invoice_join", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice\"\n),\n\ninvoice_linked as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn\"\n),\n\n\nestimates as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__estimate\"\n),\n\n\npayments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment\"\n),\n\npayment_lines_payment as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_line\"\n\n    where invoice_id is not null\n),\n\ninvoice_est as (\n\n    select\n        invoices.invoice_id,\n        invoice_linked.estimate_id,\n        invoices.source_relation\n    from invoices\n\n    left join invoice_linked\n        on invoices.invoice_id = invoice_linked.invoice_id\n        and invoices.source_relation = invoice_linked.source_relation\n\n    where invoice_linked.estimate_id is not null\n),\n\ninvoice_pay as (\n\n    select\n        invoices.invoice_id,\n        invoice_linked.payment_id,\n        invoices.source_relation\n    from invoices\n\n    left join invoice_linked\n        on invoices.invoice_id = invoice_linked.invoice_id\n        and invoices.source_relation = invoice_linked.source_relation\n\n    where invoice_linked.payment_id is not null\n),\n\ninvoice_link as (\n\n    select\n        invoices.*,\n        invoice_est.estimate_id,\n        invoice_pay.payment_id\n    from invoices\n\n    left join invoice_est\n        on invoices.invoice_id = invoice_est.invoice_id\n        and invoices.source_relation = invoice_est.source_relation\n\n    left join invoice_pay\n        on invoices.invoice_id = invoice_pay.invoice_id\n        and invoices.source_relation = invoice_pay.source_relation\n),\n\nfinal as (\n\n    select\n        cast('invoice' as TEXT) as transaction_type,\n        invoice_link.invoice_id as transaction_id,\n        invoice_link.source_relation,\n        invoice_link.doc_number,\n        invoice_link.estimate_id,\n        invoice_link.department_id,\n        invoice_link.customer_id as customer_id,\n        invoice_link.billing_address_id,\n        invoice_link.shipping_address_id,\n        invoice_link.delivery_type,\n        invoice_link.total_amount as total_amount,\n        (invoice_link.total_amount * coalesce(invoice_link.exchange_rate, 1)) as total_converted_amount,\n        invoice_link.balance as current_balance,\n\n        \n        coalesce(estimates.total_amount, 0) as estimate_total_amount,\n        coalesce(estimates.total_amount, 0) * coalesce(estimates.exchange_rate, 1) as estimate_total_converted_amount,\n        estimates.transaction_status as estimate_status,\n\n        \n\n        invoice_link.due_date as due_date,\n        (payments.total_amount * coalesce(payments.exchange_rate, 1)) as total_current_converted_payment,\n        min(payments.transaction_date) as initial_payment_date,\n        max(payments.transaction_date) as recent_payment_date,\n        sum(coalesce(payment_lines_payment.amount, 0)) as total_current_payment\n\n    from invoice_link\n\n    \n    left join estimates\n        on invoice_link.estimate_id = estimates.estimate_id\n        and invoice_link.source_relation = estimates.source_relation\n    \n    left join payments\n        on invoice_link.payment_id = payments.payment_id\n        and invoice_link.source_relation = payments.source_relation\n\n    left join payment_lines_payment\n        on payments.payment_id = payment_lines_payment.payment_id\n        and payments.source_relation = payment_lines_payment.source_relation\n        and invoice_link.invoice_id = payment_lines_payment.invoice_id\n        and invoice_link.source_relation = payment_lines_payment.source_relation\n\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__invoice_join\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.287060Z", "completed_at": "2024-07-09T10:51:04.301256Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.302738Z", "completed_at": "2024-07-09T10:51:04.302744Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.019173860549926758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__payment_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to either undeposited funds or a specified cash account and a credit record to accounts receivable.\n*/\n\n--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith payments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment\"\n),\n\npayment_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_line\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\nar_accounts as (\n\n    select\n        account_id,\n        currency_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n        and not is_sub_account\n),\n\npayment_join as (\n\n    select\n        payments.payment_id as transaction_id,\n        payments.source_relation,\n        row_number() over(partition by payments.payment_id, payments.source_relation \n            order by payments.source_relation, payments.transaction_date) - 1 as index,\n        payments.transaction_date,\n        payments.total_amount as amount,\n        (payments.total_amount * coalesce(payments.exchange_rate, 1)) as converted_amount,\n        payments.deposit_to_account_id,\n        payments.receivable_account_id,\n        payments.customer_id,\n        payments.currency_id\n    from payments\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        payment_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        deposit_to_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source\n    from payment_join\n\n    union all\n\n    select\n        transaction_id,\n        payment_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        coalesce(receivable_account_id, ar_accounts.account_id) as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source\n    from payment_join\n\n    left join ar_accounts\n        on ar_accounts.currency_id = payment_join.currency_id\n        and ar_accounts.source_relation = payment_join.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__payment_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.291369Z", "completed_at": "2024-07-09T10:51:04.301592Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.303428Z", "completed_at": "2024-07-09T10:51:04.303431Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019024133682250977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_line_payment_id__index__source_relation.25be3cf2e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_line\"\n    group by payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.294344Z", "completed_at": "2024-07-09T10:51:04.302265Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.304349Z", "completed_at": "2024-07-09T10:51:04.304352Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019176959991455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id.6351e3fe26", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__payment_line\"\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.296923Z", "completed_at": "2024-07-09T10:51:04.302981Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.305245Z", "completed_at": "2024-07-09T10:51:04.305247Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016005992889404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard.7de7edf458", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        payment_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase\"\n    group by payment_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Cash','Check','CreditCard'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.308791Z", "completed_at": "2024-07-09T10:51:04.320553Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.322702Z", "completed_at": "2024-07-09T10:51:04.322711Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017632722854614258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_purchase_id__source_relation.172340b49e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase\"\n    group by purchase_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.312851Z", "completed_at": "2024-07-09T10:51:04.321159Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.323432Z", "completed_at": "2024-07-09T10:51:04.323435Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017557859420776367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id.fc2090959b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase\"\nwhere purchase_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.316215Z", "completed_at": "2024-07-09T10:51:04.321890Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.324270Z", "completed_at": "2024-07-09T10:51:04.324275Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01753687858581543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__purchase_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to a specified expense account and a credit record to the payment account.\n*/\nwith purchases as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase\"\n),\n\npurchase_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.expense_account_id as parent_expense_account_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\npurchase_join as (\n\n    select\n        purchases.purchase_id as transaction_id,\n        purchases.source_relation,\n        purchase_lines.index,\n        purchases.transaction_date,\n        purchase_lines.amount,\n        (purchase_lines.amount * coalesce(purchases.exchange_rate, 1)) as converted_amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, false) = true then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, false) = true then 'credit' else 'debit' end as payed_to_transaction_type,\n        purchases.customer_id,\n        coalesce(purchase_lines.item_expense_class_id, purchase_lines.account_expense_class_id) as class_id,\n        purchases.vendor_id,\n        purchases.department_id\n    from purchases\n\n    inner join purchase_lines\n        on purchases.purchase_id = purchase_lines.purchase_id\n        and purchases.source_relation = purchase_lines.source_relation\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.item_id\n        and purchase_lines.source_relation = items.source_relation\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payed_from_account_id as account_id,\n        class_id,\n        department_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payed_to_account_id as account_id,\n        class_id,\n        department_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source\n    from purchase_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__purchase_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.318537Z", "completed_at": "2024-07-09T10:51:04.322167Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.324522Z", "completed_at": "2024-07-09T10:51:04.324529Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014198064804077148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__purchase_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_purchase variable within your dbt_project.yml file to False.\n\n\nwith purchases as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase\"\n),\n\nitems as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\npurchase_lines as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_line\"\n),\n\nfinal as (\n    select\n        purchases.purchase_id as transaction_id,\n        purchases.source_relation,\n        purchase_lines.index as transaction_line_id,\n        purchases.doc_number,\n        'purchase' as transaction_type,\n        purchases.transaction_date,\n        coalesce(purchase_lines.account_expense_account_id, items.expense_account_id) as account_id,\n        purchase_lines.account_expense_class_id as class_id,\n        purchases.department_id,\n        coalesce(purchases.customer_id, account_expense_customer_id, item_expense_customer_id) as customer_id,\n        purchases.vendor_id,\n        coalesce(purchase_lines.account_expense_billable_status, purchase_lines.item_expense_billable_status) as billable_status,\n        purchase_lines.description,\n        case when coalesce(purchases.credit, false)\n            then -1 * purchase_lines.amount\n            else purchase_lines.amount\n        end as amount,\n        case when coalesce(purchases.credit, false)\n            then purchase_lines.amount * coalesce(-purchases.exchange_rate, -1)\n            else purchase_lines.amount * coalesce(purchases.exchange_rate, 1)\n        end as converted_amount,\n        case when coalesce(purchases.credit, false) \n            then -1 * purchases.total_amount\n            else purchases.total_amount\n        end as total_amount,\n        case when coalesce(purchases.credit, false) \n            then purchases.total_amount * coalesce(-purchases.exchange_rate, -1)\n            else purchases.total_amount * coalesce(purchases.exchange_rate, 1)\n        end as total_converted_amount\n    from purchases\n\n    inner join purchase_lines \n        on purchases.purchase_id = purchase_lines.purchase_id\n        and purchases.source_relation = purchase_lines.source_relation\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.item_id\n        and purchase_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__purchase_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.329317Z", "completed_at": "2024-07-09T10:51:04.342395Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.343449Z", "completed_at": "2024-07-09T10:51:04.343456Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01776909828186035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_line_purchase_id__index__source_relation.a23c661eb5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_line\"\n    group by purchase_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.333820Z", "completed_at": "2024-07-09T10:51:04.343163Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.345406Z", "completed_at": "2024-07-09T10:51:04.345410Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018707752227783203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id.5406fca79c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__purchase_line\"\nwhere purchase_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.336564Z", "completed_at": "2024-07-09T10:51:04.343715Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.345938Z", "completed_at": "2024-07-09T10:51:04.345942Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018886089324951172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_line_refund_id__index__source_relation.614411eb40", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\"\n    group by refund_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.339567Z", "completed_at": "2024-07-09T10:51:04.343994Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.346180Z", "completed_at": "2024-07-09T10:51:04.346183Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018982887268066406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id.57df809b80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\"\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.349359Z", "completed_at": "2024-07-09T10:51:04.360522Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.364125Z", "completed_at": "2024-07-09T10:51:04.364131Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01831984519958496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__refund_receipt_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified asset account and a credit record the specified cash account.\n*/\n\n--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith refund_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt\"\n),\n\nrefund_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nrefund_receipt_join as (\n\n    select\n        refund_receipts.refund_id as transaction_id,\n        refund_receipts.source_relation,\n        refund_receipt_lines.index,\n        refund_receipts.transaction_date,\n        refund_receipt_lines.amount,\n        (refund_receipt_lines.amount * coalesce(refund_receipts.exchange_rate, 1)) as converted_amount,\n        refund_receipts.deposit_to_account_id as credit_to_account_id,\n        coalesce(refund_receipt_lines.discount_account_id, refund_receipt_lines.sales_item_account_id, items.parent_income_account_id, items.income_account_id) as debit_account_id,\n        refund_receipts.customer_id,\n        coalesce(refund_receipt_lines.sales_item_class_id, refund_receipt_lines.discount_class_id, refund_receipts.class_id) as class_id,\n        refund_receipts.department_id\n    from refund_receipts\n\n    inner join refund_receipt_lines\n        on refund_receipts.refund_id = refund_receipt_lines.refund_id\n        and refund_receipts.source_relation = refund_receipt_lines.source_relation\n\n    left join items\n        on refund_receipt_lines.sales_item_item_id = items.item_id\n        and refund_receipt_lines.source_relation = items.source_relation\n\n    where coalesce(refund_receipt_lines.discount_account_id, refund_receipt_lines.sales_item_account_id, refund_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        credit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'refund_receipt' as transaction_source\n    from refund_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        debit_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'refund_receipt' as transaction_source\n    from refund_receipt_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__refund_receipt_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.353933Z", "completed_at": "2024-07-09T10:51:04.363624Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.365484Z", "completed_at": "2024-07-09T10:51:04.365487Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01757502555847168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__refund_receipt_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith refund_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt\"\n),\n\nrefund_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        refund_receipts.refund_id as transaction_id,\n        refund_receipts.source_relation,\n        refund_receipt_lines.index as transaction_line_id,\n        refund_receipts.doc_number,\n        'refund_receipt' as transaction_type,\n        refund_receipts.transaction_date,\n        refund_receipt_lines.sales_item_item_id as item_id,\n        refund_receipt_lines.sales_item_quantity as item_quantity,\n        refund_receipt_lines.sales_item_unit_price as item_unit_price,\n        case when refund_receipt_lines.sales_item_account_id is null\n            then coalesce(items.asset_account_id, items.income_account_id, items.expense_account_id) \n            else refund_receipt_lines.sales_item_account_id\n                end as account_id,\n        refund_receipts.class_id,\n        refund_receipts.department_id,\n        refund_receipts.customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        refund_receipt_lines.description,\n        refund_receipt_lines.amount * -1 as amount,\n        refund_receipt_lines.amount * coalesce(-refund_receipts.exchange_rate, -1) as converted_amount,\n        refund_receipts.total_amount * -1 as total_amount,\n        refund_receipts.total_amount * coalesce(-refund_receipts.exchange_rate, -1) as total_converted_amount\n    from refund_receipts\n\n    inner join refund_receipt_lines\n        on refund_receipts.refund_id = refund_receipt_lines.refund_id\n        and refund_receipts.source_relation = refund_receipt_lines.source_relation\n\n    left join items\n        on refund_receipt_lines.sales_item_item_id = items.item_id\n        and refund_receipt_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__refund_receipt_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.356807Z", "completed_at": "2024-07-09T10:51:04.363877Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.365929Z", "completed_at": "2024-07-09T10:51:04.365932Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014729976654052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_refund_id__source_relation.60f976841d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt\"\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.360798Z", "completed_at": "2024-07-09T10:51:04.364549Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.366868Z", "completed_at": "2024-07-09T10:51:04.366871Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01539468765258789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id.29e8a8216e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__refund_receipt\"\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.369944Z", "completed_at": "2024-07-09T10:51:04.383261Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.384808Z", "completed_at": "2024-07-09T10:51:04.384815Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018349885940551758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_line_sales_receipt_id__index__source_relation.20e80dcbd5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\"\n    group by sales_receipt_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.373850Z", "completed_at": "2024-07-09T10:51:04.383604Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.385063Z", "completed_at": "2024-07-09T10:51:04.385067Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017390727996826172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.9be0667fc3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\"\nwhere sales_receipt_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.379687Z", "completed_at": "2024-07-09T10:51:04.384339Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.386686Z", "completed_at": "2024-07-09T10:51:04.386689Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014601945877075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__sales_receipt_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_sales_receipt variable within your dbt_project.yml file to False.\n\n\nwith sales_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt\"\n),\n\nsales_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        sales_receipts.sales_receipt_id as transaction_id,\n        sales_receipts.source_relation,\n        sales_receipt_lines.index as transaction_line_id,\n        sales_receipts.doc_number,\n        'sales_receipt' as transaction_type,\n        sales_receipts.transaction_date,\n        sales_receipt_lines.sales_item_item_id as item_id,\n        sales_receipt_lines.sales_item_quantity as item_quantity,\n        sales_receipt_lines.sales_item_unit_price as item_unit_price,\n        coalesce(items.income_account_id, items.asset_account_id, items.expense_account_id) as account_id,\n        sales_receipts.class_id,\n        sales_receipts.department_id,\n        sales_receipts.customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        sales_receipt_lines.description,\n        sales_receipt_lines.amount,\n        sales_receipt_lines.amount * (coalesce(sales_receipts.exchange_rate, 1)) as converted_amount,\n        sales_receipts.total_amount,\n        sales_receipts.total_amount * (coalesce(sales_receipts.exchange_rate, 1)) as total_converted_amount\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts.sales_receipt_id = sales_receipt_lines.sales_receipt_id   \n        and sales_receipts.source_relation = sales_receipt_lines.source_relation\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.item_id\n        and sales_receipt_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__sales_receipt_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.376713Z", "completed_at": "2024-07-09T10:51:04.384560Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.386926Z", "completed_at": "2024-07-09T10:51:04.386930Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018703937530517578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__sales_receipt_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified cash account and a credit record to the specified asset account.\n*/\n\n--To disable this model, set the using_sales_receipt variable within your dbt_project.yml file to False.\n\n\nwith sales_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt\"\n),\n\nsales_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nsales_receipt_join as (\n\n    select\n        sales_receipts.sales_receipt_id as transaction_id,\n        sales_receipts.source_relation,\n        sales_receipt_lines.index,\n        sales_receipts.transaction_date,\n        case \n            when sales_receipt_lines.discount_account_id is not null \n                then sales_receipt_lines.amount * (-1)\n            else sales_receipt_lines.amount\n        end as amount,\n        case when sales_receipt_lines.discount_account_id is not null \n                then (sales_receipt_lines.amount * coalesce(-sales_receipts.exchange_rate, -1))\n            else (sales_receipt_lines.amount * coalesce(sales_receipts.exchange_rate, 1))\n        end as converted_amount,\n        sales_receipts.deposit_to_account_id as debit_to_account_id,\n        coalesce(sales_receipt_lines.discount_account_id, sales_receipt_lines.sales_item_account_id, items.parent_income_account_id, items.income_account_id) as credit_to_account_id,\n        sales_receipts.customer_id,\n        coalesce(sales_receipt_lines.sales_item_class_id, sales_receipt_lines.discount_class_id, sales_receipts.class_id) as class_id,\n        sales_receipts.department_id\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts.sales_receipt_id = sales_receipt_lines.sales_receipt_id\n        and sales_receipts.source_relation = sales_receipt_lines.source_relation\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.item_id\n        and sales_receipt_lines.source_relation = items.source_relation\n\n    where coalesce(sales_receipt_lines.discount_account_id, sales_receipt_lines.sales_item_account_id, sales_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        debit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'sales_receipt' as transaction_source\n    from sales_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        credit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'sales_receipt' as transaction_source\n    from sales_receipt_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__sales_receipt_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.390767Z", "completed_at": "2024-07-09T10:51:04.399493Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.404901Z", "completed_at": "2024-07-09T10:51:04.404908Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01744985580444336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_sales_receipt_id__source_relation.36bdbcffde", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt\"\n    group by sales_receipt_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.393539Z", "completed_at": "2024-07-09T10:51:04.403780Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.405587Z", "completed_at": "2024-07-09T10:51:04.405591Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018029212951660156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id.b97c1a238a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__sales_receipt\"\nwhere sales_receipt_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.396524Z", "completed_at": "2024-07-09T10:51:04.404416Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.406545Z", "completed_at": "2024-07-09T10:51:04.406548Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01777505874633789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_credit_line_vendor_credit_id__index__source_relation.094b35ac4d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_credit_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line\"\n    group by vendor_credit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.399792Z", "completed_at": "2024-07-09T10:51:04.405135Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.407495Z", "completed_at": "2024-07-09T10:51:04.407499Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01854395866394043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__transfer_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the receiveing account and a credit record to the sending account.\n*/\n\n--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith transfers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__transfer\"\n),\n\ntransfer_body as (\n\n    select\n        transfer_id as transaction_id,\n        source_relation,\n        row_number() over(partition by transfer_id, source_relation \n            order by source_relation, transaction_date) - 1 as index,\n        transaction_date,\n        amount,\n        amount as converted_amount,\n        from_account_id as credit_to_account_id,\n        to_account_id as debit_to_account_id\n    from transfers\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        credit_to_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'credit' as transaction_type,\n        'transfer' as transaction_source\n    from transfer_body\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        debit_to_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'debit' as transaction_type,\n        'transfer' as transaction_source\n    from transfer_body\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__transfer_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.410853Z", "completed_at": "2024-07-09T10:51:04.420659Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.424124Z", "completed_at": "2024-07-09T10:51:04.424131Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016691923141479492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__transfer_transfer_id__source_relation.bfa4c7345e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__transfer\"\n    group by transfer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.415416Z", "completed_at": "2024-07-09T10:51:04.423764Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.426108Z", "completed_at": "2024-07-09T10:51:04.426113Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01783919334411621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id.c1c80a253c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transfer_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__transfer\"\nwhere transfer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.418149Z", "completed_at": "2024-07-09T10:51:04.424362Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.426873Z", "completed_at": "2024-07-09T10:51:04.426877Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018290042877197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__vendor_credit_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to payable account and a credit record to the expense account.\n*/\n\n--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith vendor_credits as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit\"\n),\n\nvendor_credit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nvendor_credit_join as (\n\n    select\n        vendor_credits.vendor_credit_id as transaction_id,\n        vendor_credits.source_relation,\n        vendor_credit_lines.index,\n        vendor_credits.transaction_date,\n        vendor_credit_lines.amount,\n        (vendor_credit_lines.amount * coalesce(vendor_credits.exchange_rate, 1)) as converted_amount,\n        vendor_credits.payable_account_id as debit_to_account_id,\n        coalesce(vendor_credit_lines.account_expense_account_id, items.parent_income_account_id, items.income_account_id, items.expense_account_id) as credit_account_id,\n        coalesce(account_expense_customer_id, item_expense_customer_id) as customer_id,\n        coalesce(item_expense_class_id, account_expense_class_id) as class_id,\n        vendor_credits.vendor_id,\n        vendor_credits.department_id\n    from vendor_credits\n\n    inner join vendor_credit_lines\n        on vendor_credits.vendor_credit_id = vendor_credit_lines.vendor_credit_id\n        and vendor_credits.source_relation = vendor_credit_lines.source_relation\n\n    left join items\n        on vendor_credit_lines.item_expense_item_id = items.item_id\n        and vendor_credit_lines.source_relation = items.source_relation\n),\n\nfinal as (\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        credit_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'vendor_credit' as transaction_source\n    from vendor_credit_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        debit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'vendor_credit' as transaction_source\n    from vendor_credit_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__vendor_credit_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.420916Z", "completed_at": "2024-07-09T10:51:04.425567Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.428114Z", "completed_at": "2024-07-09T10:51:04.428122Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014845132827758789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__vendor_credit_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith vendor_credits as (\n    \n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit\"\n),\n\nvendor_credit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        vendor_credits.vendor_credit_id as transaction_id,\n        vendor_credits.source_relation,\n        vendor_credit_lines.index as transaction_line_id,\n        vendor_credits.doc_number,\n        'vendor_credit' as transaction_type,\n        vendor_credits.transaction_date,\n        case when vendor_credit_lines.account_expense_account_id is null\n            then items.expense_account_id\n            else vendor_credit_lines.account_expense_account_id\n                end as account_id,\n        coalesce(vendor_credit_lines.account_expense_class_id, vendor_credit_lines.item_expense_class_id) as class_id,\n        vendor_credits.department_id,\n        coalesce(vendor_credit_lines.account_expense_customer_id, vendor_credit_lines.item_expense_customer_id) as customer_id,\n        vendor_credits.vendor_id,\n        coalesce(vendor_credit_lines.account_expense_billable_status, vendor_credit_lines.item_expense_billable_status) as billable_status,\n        vendor_credit_lines.description,\n        vendor_credit_lines.amount * -1 as amount,\n        vendor_credit_lines.amount * coalesce(-vendor_credits.exchange_rate, -1) as converted_amount,\n        vendor_credits.total_amount * -1 as total_amount,\n        vendor_credits.total_amount * coalesce(-vendor_credits.exchange_rate, -1) as total_converted_amount\n    from vendor_credits\n\n    inner join vendor_credit_lines\n        on vendor_credits.vendor_credit_id = vendor_credit_lines.vendor_credit_id\n        and vendor_credits.source_relation = vendor_credit_lines.source_relation\n\n    left join items\n        on vendor_credit_lines.item_expense_item_id = items.item_id\n        and vendor_credit_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__vendor_credit_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.430930Z", "completed_at": "2024-07-09T10:51:04.439026Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.456838Z", "completed_at": "2024-07-09T10:51:04.456848Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.030263900756835938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id.1275a5ab5a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_credit_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor_credit\"\nwhere vendor_credit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.435268Z", "completed_at": "2024-07-09T10:51:04.456375Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.458389Z", "completed_at": "2024-07-09T10:51:04.458393Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.029116153717041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_vendor_id__source_relation.4960d9d21a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor\"\n    group by vendor_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.439532Z", "completed_at": "2024-07-09T10:51:04.457472Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.460103Z", "completed_at": "2024-07-09T10:51:04.460106Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.027302265167236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id.f509a77195", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor\"\nwhere vendor_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.442730Z", "completed_at": "2024-07-09T10:51:04.458646Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.460965Z", "completed_at": "2024-07-09T10:51:04.460969Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02766895294189453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__ap_ar_enhanced", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_invoice variable within your dbt_project.yml file to False.\n\n\nwith bill_join as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_join\"\n),\n\n\ninvoice_join as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__invoice_join\"\n),\n\n\n\ndepartments as ( \n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__department\"\n),\n\n\n\naddresses as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__address\"\n),\n\n\ncustomers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__customer\"\n),\n\nvendors as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor\"\n),\n\nfinal as (\n\n    select\n        bill_join.transaction_type,\n        bill_join.transaction_id,\n        bill_join.source_relation,\n        doc_number,\n        cast(null as TEXT) as estimate_id, \n\n        \n        departments.fully_qualified_name as department_name,\n        \n\n        'vendor' as transaction_with,\n        vendors.display_name as customer_vendor_name,\n        vendors.balance as customer_vendor_balance,\n\n        \n        billing_address.city as customer_vendor_address_city,\n        billing_address.country as customer_vendor_address_country,\n        concat(billing_address.address_1, billing_address.address_2) as customer_vendor_address_line,\n        \n        \n        vendors.web_url as customer_vendor_website,\n        cast(null as TEXT) as delivery_type,\n        cast(null as TEXT) as estimate_status,\n        bill_join.total_amount,\n        bill_join.total_converted_amount,\n        cast(null as numeric(28,6)) as estimate_total_amount,\n        cast(null as numeric(28,6)) as estimate_total_converted_amount,\n        bill_join.current_balance,\n        bill_join.due_date,\n        case when bill_join.current_balance != 0 and \n        ((bill_join.due_date)::date - (bill_join.recent_payment_date)::date)\n     < 0\n            then true\n            else false\n                end as is_overdue,\n        case when bill_join.current_balance != 0 and \n        ((bill_join.due_date)::date - (bill_join.recent_payment_date)::date)\n     < 0\n            then \n        ((bill_join.due_date)::date - (bill_join.recent_payment_date)::date)\n     * -1\n            else 0\n                end as days_overdue,\n        bill_join.initial_payment_date,\n        bill_join.recent_payment_date,\n        bill_join.total_current_payment,\n        bill_join.total_current_converted_payment\n    from bill_join\n\n    \n    left join departments  \n        on bill_join.department_id = departments.department_id\n        and bill_join.source_relation = departments.source_relation\n    \n\n    left join vendors\n        on bill_join.vendor_id = vendors.vendor_id\n        and bill_join.source_relation = vendors.source_relation\n    \n    \n    left join addresses as billing_address\n        on vendors.billing_address_id = billing_address.address_id\n        and vendors.source_relation = billing_address.source_relation\n    \n    \n    \n    union all\n\n    select \n        invoice_join.transaction_type,\n        invoice_join.transaction_id,\n        invoice_join.source_relation,\n        doc_number,\n        invoice_join.estimate_id,\n\n        \n        departments.fully_qualified_name as department_name,\n        \n\n        'customer' as transaction_with,\n        customers.fully_qualified_name as customer_vendor_name,\n        customers.balance as customer_vendor_current_balance,\n\n        \n        billing_address.city as customer_vendor_address_city,\n        billing_address.country as customer_vendor_address_country,\n        concat(billing_address.address_1, billing_address.address_2) as customer_vendor_address_line,\n        \n\n        customers.website as customer_vendor_website,\n        invoice_join.delivery_type,\n        invoice_join.estimate_status,\n        invoice_join.total_amount as total_amount,\n        invoice_join.total_converted_amount,\n        invoice_join.estimate_total_amount as estimate_total_amount,\n        invoice_join.estimate_total_converted_amount as estimate_total_converted_amount,\n        invoice_join.current_balance as current_balance,\n        invoice_join.due_date,\n        case when invoice_join.current_balance != 0 and \n        ((invoice_join.due_date)::date - (invoice_join.recent_payment_date)::date)\n     < 0\n            then true\n            else false\n                end as is_overdue,\n        case when invoice_join.current_balance != 0 and \n        ((invoice_join.due_date)::date - (invoice_join.recent_payment_date)::date)\n     < 0\n            then \n        ((invoice_join.due_date)::date - (invoice_join.recent_payment_date)::date)\n     * -1\n            else 0\n                end as days_overdue,\n        invoice_join.initial_payment_date,\n        invoice_join.recent_payment_date,\n        invoice_join.total_current_payment as total_current_payment,\n        invoice_join.total_current_converted_payment\n\n    from invoice_join\n\n    \n    left join departments  \n        on invoice_join.department_id = departments.department_id\n        and invoice_join.source_relation = departments.source_relation\n    \n\n    \n    left join addresses as billing_address\n        on invoice_join.billing_address_id = billing_address.address_id\n        and invoice_join.source_relation = billing_address.source_relation\n    \n\n    left join customers\n        on invoice_join.customer_id = customers.customer_id\n        and invoice_join.source_relation = customers.source_relation\n\n    \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__ap_ar_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.462904Z", "completed_at": "2024-07-09T10:51:04.492399Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.501062Z", "completed_at": "2024-07-09T10:51:04.501072Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04125690460205078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__sales_union", "compiled": true, "compiled_code": "\n\nwith sales_union as (\n\n    \n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__sales_receipt_transactions\"\n    \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__invoice_transactions\"\n\n    \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__refund_receipt_transactions\"\n    \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__credit_memo_transactions\"\n    \n),\n\ncustomers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__customer\"\n),\n\n\ndepartments as ( \n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__department\"\n),\n\n\nvendors as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor\"\n),\n\nincome_accounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__account_classifications\"\n    where account_type = 'Income'\n),\n\nfinal as (\n\n    select \n        'sales' as transaction_source,\n        sales_union.transaction_id,\n        sales_union.source_relation,\n        sales_union.transaction_line_id,\n        sales_union.doc_number,\n        sales_union.transaction_type,\n        sales_union.transaction_date,\n        sales_union.item_id,\n        sales_union.item_quantity,\n        sales_union.item_unit_price,\n        sales_union.account_id,\n        income_accounts.name as account_name,\n        income_accounts.account_sub_type as account_sub_type,\n        sales_union.class_id,\n        sales_union.department_id,\n        \n        departments.fully_qualified_name as department_name,\n        \n        sales_union.customer_id,\n        customers.fully_qualified_name as customer_name,\n        customers.website as customer_website,\n        sales_union.vendor_id,\n        vendors.display_name as vendor_name,\n        sales_union.billable_status,\n        sales_union.description,\n        sales_union.amount,\n        sales_union.converted_amount,\n        sales_union.total_amount,\n        sales_union.total_converted_amount\n    from sales_union\n\n    inner join income_accounts\n        on sales_union.account_id = income_accounts.account_id\n        and sales_union.source_relation = income_accounts.source_relation\n\n    left join customers\n        on customers.customer_id = sales_union.customer_id\n        and customers.source_relation = sales_union.source_relation\n\n    left join vendors\n        on vendors.vendor_id = sales_union.vendor_id\n        and vendors.source_relation = sales_union.source_relation\n\n    \n    left join departments\n        on departments.department_id = sales_union.department_id\n        and departments.source_relation = sales_union.source_relation\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__sales_union\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.492846Z", "completed_at": "2024-07-09T10:51:04.501914Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.502876Z", "completed_at": "2024-07-09T10:51:04.502880Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.033231258392333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__expenses_union", "compiled": true, "compiled_code": "with expense_union as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__purchase_transactions\"\n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_transactions\"\n     \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__journal_entry_transactions\"\n     \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__deposit_transactions\"\n     \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__vendor_credit_transactions\"\n    \n),\n\ncustomers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__customer\"\n),\n\n\ndepartments as ( \n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__department\"\n),\n\n\nvendors as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"stg_quickbooks__vendor\"\n),\n\nexpense_accounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__account_classifications\"\n    where account_type = 'Expense'\n),\n\nfinal as (\n\n    select \n        'expense' as transaction_source,\n        expense_union.transaction_id,\n        expense_union.source_relation,\n        expense_union.transaction_line_id,\n        expense_union.doc_number,\n        expense_union.transaction_type,\n        expense_union.transaction_date,\n        cast(null as TEXT) as item_id,\n        cast(null as numeric(28,6)) as item_quantity,\n        cast(null as numeric(28,6)) as item_unit_price,\n        expense_union.account_id,\n        expense_accounts.name as account_name,\n        expense_accounts.account_sub_type as account_sub_type,\n        expense_union.class_id,\n        expense_union.department_id,\n        \n        departments.fully_qualified_name as department_name,\n        \n        expense_union.customer_id,\n        customers.fully_qualified_name as customer_name,\n        customers.website as customer_website,\n        expense_union.vendor_id,\n        vendors.display_name as vendor_name,\n        expense_union.billable_status,\n        expense_union.description,\n        expense_union.amount,\n        expense_union.converted_amount,\n        expense_union.total_amount,\n        expense_union.total_converted_amount\n\n    from expense_union\n\n    inner join expense_accounts\n        on expense_union.account_id = expense_accounts.account_id\n        and expense_union.source_relation = expense_accounts.source_relation\n\n    left join customers\n        on customers.customer_id = expense_union.customer_id\n        and customers.source_relation = expense_union.source_relation\n\n    left join vendors\n        on vendors.vendor_id = expense_union.vendor_id\n        and vendors.source_relation = expense_union.source_relation\n\n    \n    left join departments\n        on departments.department_id = expense_union.department_id\n        and departments.source_relation = expense_union.source_relation\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__expenses_union\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.497876Z", "completed_at": "2024-07-09T10:51:04.502608Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.503864Z", "completed_at": "2024-07-09T10:51:04.503868Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013073921203613281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__ap_ar_enhanced_transaction_id__source_relation__estimate_id.804c1f0bcf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation, estimate_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__ap_ar_enhanced\"\n    group by transaction_id, source_relation, estimate_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.505531Z", "completed_at": "2024-07-09T10:51:04.508276Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.508724Z", "completed_at": "2024-07-09T10:51:04.508729Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0042018890380859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__expenses_sales_enhanced", "compiled": true, "compiled_code": "with expenses as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__expenses_union\"\n),\n\n\nsales as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__sales_union\"\n),\n\n\nfinal as (\n    \n    select *\n    from expenses\n\n    \n    union all\n\n    select *\n    from sales\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__expenses_sales_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.510258Z", "completed_at": "2024-07-09T10:51:04.514211Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:04.514693Z", "completed_at": "2024-07-09T10:51:04.514698Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0053539276123046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__expenses_sales_enhanced_transaction_id__source_relation__transaction_line_id__item_id.b57775bacb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation, transaction_line_id, item_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__expenses_sales_enhanced\"\n    group by transaction_id, source_relation, transaction_line_id, item_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:04.470737Z", "completed_at": "2024-07-09T10:51:06.667418Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:06.667973Z", "completed_at": "2024-07-09T10:51:06.667983Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.2978830337524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__general_ledger", "compiled": true, "compiled_code": "with unioned_models as (\n\n    \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__purchase_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__purchase_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__credit_memo_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__credit_memo_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__deposit_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__deposit_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__invoice_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__invoice_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__journal_entry_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__journal_entry_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__payment_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__payment_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__refund_receipt_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__refund_receipt_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__sales_receipt_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__sales_receipt_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__transfer_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__transfer_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__vendor_credit_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__vendor_credit_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_payment_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__bill_payment_double_entry\"\n\n            \n        )\n\n        \n),\n\ngl_union as (\n\n    select transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        account_id,\n        class_id,\n        department_id,\n        transaction_type,\n        transaction_source \n    from unioned_models\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__account_classifications\"\n),\n\n\nadjusted_gl as (\n    \n    select\n        md5(cast(coalesce(cast(gl_union.transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.index as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast( gl_union.transaction_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.transaction_source as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) \n            as unique_id,\n        gl_union.transaction_id,\n        gl_union.source_relation,\n        gl_union.index as transaction_index,\n        gl_union.transaction_date,\n        gl_union.customer_id,\n        gl_union.vendor_id,\n        gl_union.amount,\n        gl_union.account_id,\n        gl_union.class_id,\n        gl_union.department_id,\n        accounts.account_number,\n        accounts.name as account_name,\n        accounts.is_sub_account,\n        accounts.parent_account_number,\n        accounts.parent_account_name,\n        accounts.account_type,\n        accounts.account_sub_type,\n        accounts.financial_statement_helper,\n        accounts.balance as account_current_balance,\n        accounts.classification as account_class,\n        gl_union.transaction_type,\n        gl_union.transaction_source,\n        accounts.transaction_type as account_transaction_type,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then gl_union.amount\n            else gl_union.amount * -1\n        end as adjusted_amount,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then gl_union.converted_amount\n            else gl_union.converted_amount * -1\n        end as adjusted_converted_amount\n    from gl_union\n\n    left join accounts\n        on gl_union.account_id = accounts.account_id\n        and gl_union.source_relation = accounts.source_relation\n),\n\nfinal as (\n\n    select\n        *,\n        sum(adjusted_amount) over (partition by account_id, class_id, source_relation\n            order by source_relation, transaction_date, account_id, class_id rows unbounded preceding) as running_balance,\n        sum(adjusted_amount) over (partition by account_id, class_id, source_relation\n            order by source_relation, transaction_date, account_id, class_id rows unbounded preceding) as running_converted_balance\n    from adjusted_gl\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:06.777250Z", "completed_at": "2024-07-09T10:51:06.781714Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:06.782325Z", "completed_at": "2024-07-09T10:51:06.782332Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018535852432250977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.unique_quickbooks__general_ledger_unique_id.df148e7545", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unique_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger\"\nwhere unique_id is not null\ngroup by unique_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:06.774784Z", "completed_at": "2024-07-09T10:51:06.783119Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:06.783901Z", "completed_at": "2024-07-09T10:51:06.783906Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020468950271606445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.not_null_quickbooks__general_ledger_unique_id.06732be667", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger\"\nwhere unique_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:06.765162Z", "completed_at": "2024-07-09T10:51:08.264027Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:08.264557Z", "completed_at": "2024-07-09T10:51:08.264566Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.6056129932403564, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__general_ledger_date_spine", "compiled": true, "compiled_code": "-- depends_on: \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger\"\n\nwith spine as (\n\n    \n    \n    \n    \n        \n            \n\n        \n\n    \n\n    \n    \n\n    \n\n     \n    \n        \n    \n        \n\n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 67.0\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2019-01-02' as date) + ((interval '1 month') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_month\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_month <= \n\n    cast('2024-07-09' as date) + ((interval '1 month') * (1))\n\n\n\n)\n\nselect * from filtered\n\n\n),\n\ngeneral_ledger as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger\"\n),\n\ndate_spine as (\n    select\n        cast(date_trunc('year', date_month) as date) as date_year,\n        cast(date_trunc('month', date_month) as date) as period_first_day,\n        cast(\n        \n\n    \n\n    date_trunc('month', date_month) + ((interval '1 month') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date) as period_last_day,\n        row_number() over (order by cast(date_trunc('month', date_month) as date)) as period_index\n    from spine\n),\n\nfinal as (\n    select distinct\n        general_ledger.account_id,\n        general_ledger.source_relation,\n        general_ledger.account_number,\n        general_ledger.account_name,\n        general_ledger.is_sub_account,\n        general_ledger.parent_account_number,\n        general_ledger.parent_account_name,\n        general_ledger.account_type,\n        general_ledger.account_sub_type,\n        general_ledger.account_class,\n        general_ledger.financial_statement_helper,\n        general_ledger.class_id,\n        date_spine.date_year,\n        date_spine.period_first_day,\n        date_spine.period_last_day,\n        date_spine.period_index\n    from general_ledger\n\n    cross join date_spine\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__general_ledger_date_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:08.371538Z", "completed_at": "2024-07-09T10:51:08.375934Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:08.376446Z", "completed_at": "2024-07-09T10:51:08.376455Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005982398986816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__general_ledger_balances", "compiled": true, "compiled_code": "with general_ledger as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger\"\n),\n\ngl_accounting_periods as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__general_ledger_date_spine\"\n),\n\ngl_period_balance as (\n\n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        class_id,\n        cast(date_trunc('year', transaction_date) as date) as date_year,\n        cast(date_trunc('month', transaction_date) as date) as date_month,\n        sum(adjusted_amount) as period_balance,\n        sum(adjusted_converted_amount) as period_converted_balance\n    from general_ledger\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14\n),\n\ngl_cumulative_balance as (\n\n    select\n        *,\n        case when financial_statement_helper = 'balance_sheet'\n            then sum(period_balance) over (partition by account_id, class_id, source_relation \n            order by source_relation, date_month, account_id, class_id rows unbounded preceding) \n            else 0\n                end as cumulative_balance,\n        case when financial_statement_helper = 'balance_sheet'\n            then sum(period_balance) over (partition by account_id, class_id, source_relation \n            order by source_relation, date_month, account_id, class_id rows unbounded preceding) \n            else 0\n                end as cumulative_converted_balance\n    from gl_period_balance\n),\n\ngl_beginning_balance as (\n\n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        class_id,\n        date_year,\n        date_month, \n        period_balance as period_net_change,\n        case when financial_statement_helper = 'balance_sheet'\n            then (cumulative_balance - period_balance) \n            else 0\n                end as period_beginning_balance,\n        cumulative_balance as period_ending_balance,\n        period_converted_balance as period_net_converted_change,\n        case when financial_statement_helper = 'balance_sheet'\n            then (cumulative_converted_balance - period_converted_balance) \n            else 0\n                end as period_beginning_converted_balance,\n        cumulative_converted_balance as period_ending_converted_balance\n    from gl_cumulative_balance\n),\n\ngl_patch as (\n\n    select \n        coalesce(gl_beginning_balance.account_id, gl_accounting_periods.account_id) as account_id,\n        coalesce(gl_beginning_balance.source_relation, gl_accounting_periods.source_relation) as source_relation,\n        coalesce(gl_beginning_balance.account_number, gl_accounting_periods.account_number) as account_number,\n        coalesce(gl_beginning_balance.account_name, gl_accounting_periods.account_name) as account_name,\n        coalesce(gl_beginning_balance.is_sub_account, gl_accounting_periods.is_sub_account) as is_sub_account,\n        coalesce(gl_beginning_balance.parent_account_number, gl_accounting_periods.parent_account_number) as parent_account_number,\n        coalesce(gl_beginning_balance.parent_account_name, gl_accounting_periods.parent_account_name) as parent_account_name,\n        coalesce(gl_beginning_balance.account_type, gl_accounting_periods.account_type) as account_type,\n        coalesce(gl_beginning_balance.account_sub_type, gl_accounting_periods.account_sub_type) as account_sub_type,\n        coalesce(gl_beginning_balance.account_class, gl_accounting_periods.account_class) as account_class,\n        coalesce(gl_beginning_balance.class_id, gl_accounting_periods.class_id) as class_id,\n        coalesce(gl_beginning_balance.financial_statement_helper, gl_accounting_periods.financial_statement_helper) as financial_statement_helper,\n        coalesce(gl_beginning_balance.date_year, gl_accounting_periods.date_year) as date_year,\n        gl_accounting_periods.period_first_day,\n        gl_accounting_periods.period_last_day,\n        gl_accounting_periods.period_index,\n        gl_beginning_balance.period_net_change,\n        gl_beginning_balance.period_beginning_balance,\n        gl_beginning_balance.period_ending_balance,\n        case when gl_beginning_balance.period_beginning_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_beginning_balance\n                end as period_beginning_balance_starter,\n        case when gl_beginning_balance.period_ending_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_ending_balance\n                end as period_ending_balance_starter,\n        gl_beginning_balance.period_net_converted_change,\n        gl_beginning_balance.period_beginning_converted_balance,\n        gl_beginning_balance.period_ending_converted_balance,\n        case when gl_beginning_balance.period_beginning_converted_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_beginning_converted_balance\n                end as period_beginning_converted_balance_starter,\n        case when gl_beginning_balance.period_ending_converted_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_ending_converted_balance\n                end as period_ending_converted_balance_starter\n    from gl_accounting_periods\n\n    left join gl_beginning_balance\n        on gl_beginning_balance.account_id = gl_accounting_periods.account_id\n            and gl_beginning_balance.source_relation = gl_accounting_periods.source_relation\n            and gl_beginning_balance.date_month = gl_accounting_periods.period_first_day\n            and gl_beginning_balance.date_year = gl_accounting_periods.date_year\n            and coalesce(gl_beginning_balance.class_id, '0') = coalesce(gl_accounting_periods.class_id, '0')\n),\n\ngl_value_partition as (\n\n    select\n        *,\n        sum(case when period_ending_balance_starter is null \n            then 0 \n            else 1 \n                end) over (order by source_relation, account_id, class_id, period_last_day rows unbounded preceding) as gl_partition,\n        sum(case when period_ending_converted_balance_starter is null \n            then 0 \n            else 1 \n                end) over (order by source_relation, account_id, class_id, period_last_day rows unbounded preceding) as gl_converted_partition\n    from gl_patch\n),\n \nfinal as (\n    \n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        class_id,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        coalesce(period_net_change, 0) as period_net_change,\n        coalesce(period_beginning_balance_starter,\n            first_value(period_ending_balance_starter) over (partition by gl_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_beginning_balance,\n        coalesce(period_ending_balance_starter,\n            first_value(period_ending_balance_starter) over (partition by gl_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_ending_balance,\n        coalesce(period_net_converted_change, 0) as period_net_converted_change,\n        coalesce(period_beginning_converted_balance_starter,\n            first_value(period_ending_converted_balance_starter) over (partition by gl_converted_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_beginning_converted_balance,\n        coalesce(period_ending_converted_balance_starter,\n            first_value(period_ending_converted_balance_starter) over (partition by gl_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_ending_converted_balance\n\n    from gl_value_partition\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__general_ledger_balances\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:08.378114Z", "completed_at": "2024-07-09T10:51:08.383877Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:08.384330Z", "completed_at": "2024-07-09T10:51:08.384335Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007154941558837891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__retained_earnings", "compiled": true, "compiled_code": "with general_ledger_balances as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__general_ledger_balances\"\n),\n\nrevenue_starter as (\n\n    select\n        period_first_day,\n        source_relation,\n        sum(period_net_change) as revenue_net_change,\n        sum(period_net_converted_change) as revenue_net_converted_change\n    from general_ledger_balances\n    \n    where account_class = 'Revenue'\n\n    group by 1,2 \n),\n\nexpense_starter as (\n\n    select \n        period_first_day,\n        source_relation,\n        sum(period_net_change) as expense_net_change,\n        sum(period_net_converted_change) as expense_net_converted_change\n    from general_ledger_balances\n    \n    where account_class = 'Expense'\n\n    group by 1,2 \n),\n\nnet_income_loss as (\n\n    select *\n    from revenue_starter\n\n    join expense_starter \n        using (period_first_day, source_relation)\n),\n\nretained_earnings_starter as (\n\n    select\n        cast('9999' as TEXT) as account_id,\n        source_relation,\n        cast('9999-00' as TEXT) as account_number,\n        cast('Net Income Adjustment' as TEXT) as account_name,\n        false as is_sub_account,\n        cast(null as TEXT) as parent_account_number,\n        cast(null as TEXT) as parent_account_name,\n        cast('Equity' as TEXT) as account_type,\n        cast('RetainedEarnings' as TEXT) as account_sub_type,\n        cast('Equity' as TEXT) as account_class,\n        cast(null as TEXT) as class_id,\n        cast('balance_sheet' as TEXT) as financial_statement_helper,\n        cast(date_trunc('year', period_first_day) as date) as date_year,\n        cast(period_first_day as date) as period_first_day,\n        cast(\n        \n\n    \n\n    date_trunc('month', period_first_day) + ((interval '1 month') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date) as period_last_day,\n        (revenue_net_change - expense_net_change) as period_net_change,\n        (revenue_net_converted_change - expense_net_converted_change) as period_net_converted_change\n    from net_income_loss\n),\n\n\nretained_earnings_beginning as (\n\n    select\n        *,\n        sum(coalesce(period_net_change, 0)) over (order by source_relation, period_first_day, period_first_day rows unbounded preceding) as period_ending_balance,\n        sum(coalesce(period_net_converted_change, 0)) over (order by source_relation, period_first_day, period_first_day rows unbounded preceding) as period_ending_converted_balance\n    from retained_earnings_starter\n),\n\nfinal as (\n    \n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        class_id,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        period_net_change,\n        lag(coalesce(period_ending_balance,0)) over (order by source_relation, period_first_day) as period_beginning_balance,\n        period_ending_balance,\n        period_net_converted_change,\n        lag(coalesce(period_ending_balance,0)) over (order by source_relation, period_first_day) as period_beginning_converted_balance,\n        period_ending_converted_balance\n    from retained_earnings_beginning\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__retained_earnings\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:08.385828Z", "completed_at": "2024-07-09T10:51:08.388929Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:08.389369Z", "completed_at": "2024-07-09T10:51:08.389373Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0044362545013427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__general_ledger_by_period", "compiled": true, "compiled_code": "with general_ledger_balances as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__general_ledger_balances\"\n),\n\nretained_earnings as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__retained_earnings\"\n),\n\n\n\nbalances_earnings_unioned as (\n\n    select *\n    from general_ledger_balances\n\n    union all \n\n    select *\n    from retained_earnings\n), \n\nfinal as (\n\n    select \n        balances_earnings_unioned.*,\n    \n        case \n            when account_class = 'Asset' then 1\n            when account_class = 'Liability' then 2\n            when account_class = 'Equity' then 3\n            when account_class = 'Revenue' then 1\n            when account_class = 'Expense' then 2\n        end as account_ordinal \n    \n    from balances_earnings_unioned\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger_by_period\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:08.397730Z", "completed_at": "2024-07-09T10:51:08.401336Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:08.403174Z", "completed_at": "2024-07-09T10:51:08.403182Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012604951858520508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__balance_sheet", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n    where financial_statement_helper = 'balance_sheet'\n),  \n\nfinal as (\n    select\n        period_first_day as calendar_date, --  Slated to be deprecated; we recommend using `period_first_day` or `period_last_day`\n        period_first_day,\n        period_last_day,\n        source_relation,\n        account_class,\n        class_id,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        period_ending_balance as amount,\n        period_ending_converted_balance as converted_amount,\n        account_ordinal\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__balance_sheet\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:08.395157Z", "completed_at": "2024-07-09T10:51:08.401579Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:08.403418Z", "completed_at": "2024-07-09T10:51:08.403421Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013398885726928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.quickbooks.quickbooks__income_statement", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n),\n\nrevenue as (\n    select \n        account_id, \n        sum(period_net_change) as ending_balance,\n        sum(period_net_converted_change) as ending_converted_balance\n    from general_ledger_by_period\n\n    where account_class = 'Revenue'\n        and period_first_day between 'YYYY-MM-DD' and 'YYYY-MM-DD' --Update 'YYYY-MM-DD' to be your desired date period.\n\n    group by 1\n),\n\nexpense as (\n    select \n        account_id, \n        sum(period_net_change) as ending_balance,\n        sum(period_net_converted_change) as ending_converted_balance\n    from general_ledger_by_period\n\n    where account_class = 'Expense'\n        and period_first_day between 'YYYY-MM-DD' and 'YYYY-MM-DD' --Update 'YYYY-MM-DD' to be your desired date period.\n\n    group by 1\n),\n\nrevenue_total as (\n    select \n        'revenue' as income_statement_type, \n        sum(ending_balance) as ending_balance,\n        sum(ending_converted_balance) as ending_converted_balance\n    from revenue\n),\n\nexpense_total as (\n    select \n        'expense' as income_statement_type, \n        sum(ending_balance) as ending_balance,\n        sum(ending_converted_balance) as ending_converted_balance\n    from expense\n)\n\nselect * \nfrom revenue_total\n\nunion all \n\nselect * \nfrom expense_total", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:08.393296Z", "completed_at": "2024-07-09T10:51:08.401828Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:08.403651Z", "completed_at": "2024-07-09T10:51:08.403656Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014147043228149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.quickbooks.quickbooks__balance_sheet", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n    where period_first_day <= 'YYYY-MM-DD' --Update to be your desired ending date.\n),\n\nliability_date as (\n    select \n        account_id, \n        source_relation,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period\n\n    where account_class = 'Liability'\n\n    group by 1,2\n),\n\nasset_date as (\n    select \n        account_id, \n        source_relation,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period\n\n    where account_class = 'Asset'\n\n    group by 1,2\n),\n\nequity_date as (\n    select \n        account_id,\n        source_relation,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period \n\n    where account_class = 'Equity'\n\n    group by 1,2\n),\n\nliability as (\n    select \n        ld.account_id, \n        l.period_ending_balance,\n        l.period_ending_converted_balance\n    from liability_date ld\n\n    left join (select account_id, source_relation, period_first_day, period_ending_balance, period_ending_converted_balance from general_ledger_by_period where account_class = 'Liability') l\n        on l.account_id = ld.account_id\n            and l.period_first_day = ld.period_first_day\n            and l.source_relation = ld.source_relation\n),\n\nasset as (\n    select \n        ad.account_id, \n        a.period_ending_balance,\n        a.period_ending_converted_balance\n    from asset_date ad\n        left join (select account_id, source_relation, period_first_day, period_ending_balance, period_ending_converted_balance from general_ledger_by_period where account_class = 'Asset') a\n            on a.account_id = ad.account_id\n                and a.period_first_day = ad.period_first_day \n                and a.source_relation = ad.source_relation\n),\n\nequity as (\n    select\n        ed.account_id, \n        e.period_ending_balance,\n        e.period_ending_converted_balance\n    from equity_date ed\n        left join (select account_id, source_relation, period_first_day, period_ending_balance, period_ending_converted_balance from general_ledger_by_period where account_class = 'Equity') e\n            on e.account_id = ed.account_id\n                and e.period_first_day = ed.period_first_day \n                and e.source_relation = ed.source_relation\n)\n\nselect \n    'liability' as balance_sheet_type, \n    sum(period_ending_balance) as balance,\n    sum(period_ending_converted_balance) as converted_balance\nfrom liability\ngroup by 1\n\nunion all\n\nselect \n    'asset' as balance_sheet_type, \n    sum(period_ending_balance) as balance,\n    sum(period_ending_converted_balance) as converted_balance\nfrom asset\ngroup by 1\n\nunion all \n\nselect \n    'equity' as balance_sheet_type, \n    sum(period_ending_balance) as balance,\n    sum(period_ending_converted_balance) as converted_balance\nfrom equity\ngroup by 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:08.399358Z", "completed_at": "2024-07-09T10:51:08.402074Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:08.403888Z", "completed_at": "2024-07-09T10:51:08.403891Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013426065444946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__profit_and_loss", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n    where financial_statement_helper = 'income_statement'\n),  \n\nfinal as (\n    select\n        period_first_day as calendar_date, --  Slated to be deprecated; we recommend using `period_first_day` or `period_last_day`\n        period_first_day,\n        period_last_day,\n        source_relation,\n        account_class,\n        class_id,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        period_net_change as amount,\n        period_net_converted_change as converted_amount,\n        account_ordinal\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__profit_and_loss\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:08.417359Z", "completed_at": "2024-07-09T10:51:08.423807Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:08.425425Z", "completed_at": "2024-07-09T10:51:08.425431Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018564224243164062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__balance_sheet_account_id__source_relation__calendar_date__class_id.07368a5056", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation, calendar_date, class_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__balance_sheet\"\n    group by account_id, source_relation, calendar_date, class_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:08.412821Z", "completed_at": "2024-07-09T10:51:08.424159Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:08.425863Z", "completed_at": "2024-07-09T10:51:08.425866Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019813060760498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__cash_flow_classifications", "compiled": true, "compiled_code": "with cash_flow_key as (\n\n    select calendar_date as cash_flow_period,\n        source_relation,\n        account_class,\n        class_id,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        amount as cash_ending_period,\n        converted_amount as cash_converted_ending_period,\n        md5(cast(coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(calendar_date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(class_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as account_unique_id\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__balance_sheet\"\n),\n\n\n\ncash_flow_types_and_ordinals as (\n\n    select cash_flow_key.*,\n    \n        case when account_type = 'Bank' then 'Cash or Cash Equivalents'\n            when account_type = 'Accounts Receivable' then 'Operating'\n            when account_type = 'Credit Card' then 'Operating'\n            when account_type = 'Other Current Asset' then 'Operating'\n            when account_type = 'Accounts Payable' then 'Operating'\n            when account_type = 'Other Current Liability' then 'Operating'\n            when account_name = 'Net Income Adjustment' then 'Operating'\n            when account_type = 'Fixed Asset' then 'Investing'\n            when account_type = 'Other Asset' then 'Investing'\n            when account_type = 'Long Term Liability' then 'Financing'\n            when account_class = 'Equity' then 'Financing'\n        end as cash_flow_type,\n        case when account_type = 'Bank' then 1\n            when account_type = 'Accounts Receivable' then 2\n            when account_type = 'Credit Card' then 2\n            when account_type = 'Other Current Asset' then 2\n            when account_type = 'Accounts Payable' then 2\n            when account_type = 'Other Current Liability' then 2\n            when account_name = 'Net Income Adjustment' then 2\n            when account_type = 'Fixed Asset' then 3\n            when account_type = 'Other Asset' then 3\n            when account_type = 'Long Term Liability' then 4\n            when account_class = 'Equity' then 4\n        end as cash_flow_ordinal\n        \n    from cash_flow_key\n\n\n)\n\nselect *\nfrom cash_flow_types_and_ordinals", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__cash_flow_classifications\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:08.409605Z", "completed_at": "2024-07-09T10:51:08.424664Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:08.426752Z", "completed_at": "2024-07-09T10:51:08.426755Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02090001106262207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__general_ledger_by_period_account_id__class_id__source_relation__period_first_day.d928e63a45", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, class_id, source_relation, period_first_day\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n    group by account_id, class_id, source_relation, period_first_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:08.421022Z", "completed_at": "2024-07-09T10:51:08.425184Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:08.427409Z", "completed_at": "2024-07-09T10:51:08.427412Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020366907119750977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__profit_and_loss_account_id__class_id__source_relation__calendar_date.77ccb375e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, class_id, source_relation, calendar_date\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__profit_and_loss\"\n    group by account_id, class_id, source_relation, calendar_date\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:08.429611Z", "completed_at": "2024-07-09T10:51:08.431731Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:08.432168Z", "completed_at": "2024-07-09T10:51:08.432173Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0035619735717773438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__cash_flow_statement", "compiled": true, "compiled_code": "with cash_flow_classifications as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"int_quickbooks__cash_flow_classifications\"\n), \n\nfinal as (\n    \n    select cash_flow_classifications.*,\n        coalesce(lag(cash_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_beginning_period,\n        cash_ending_period - coalesce(lag(cash_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_net_period,\n        coalesce(lag(cash_converted_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_converted_beginning_period, \n        cash_converted_ending_period - coalesce(lag(cash_converted_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_converted_net_period\n    from cash_flow_classifications\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__cash_flow_statement\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:08.434523Z", "completed_at": "2024-07-09T10:51:08.439650Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:08.440571Z", "completed_at": "2024-07-09T10:51:08.440576Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007753849029541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.not_null_quickbooks__cash_flow_statement_account_unique_id.748fb9ef0a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_unique_id\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__cash_flow_statement\"\nwhere account_unique_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-09T10:51:08.437035Z", "completed_at": "2024-07-09T10:51:08.439896Z"}, {"name": "execute", "started_at": "2024-07-09T10:51:08.440808Z", "completed_at": "2024-07-09T10:51:08.440811Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007847785949707031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.unique_quickbooks__cash_flow_statement_account_unique_id.c6ce55cc0d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_unique_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"quickbooks_integration_tests_07_quickbooks_dev\".\"quickbooks__cash_flow_statement\"\nwhere account_unique_id is not null\ngroup by account_unique_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 18.51466703414917, "args": {"defer": false, "print": true, "version_check": true, "cache_selected_only": false, "which": "generate", "static_parser": true, "log_level_file": "debug", "partial_parse_file_diff": true, "select": [], "write_json": true, "profiles_dir": "/Users/avinash.kunnath/.dbt", "target": "postgres", "require_explicit_package_overrides_for_builtin_materializations": false, "enable_legacy_logger": false, "log_file_max_bytes": 10485760, "populate_cache": true, "log_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks/integration_tests/logs", "show_resource_report": false, "exclude": [], "favor_state": false, "send_anonymous_usage_stats": true, "introspect": true, "quiet": false, "macro_debugging": false, "static": false, "partial_parse": true, "project_dir": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks/integration_tests", "warn_error_options": {"include": [], "exclude": []}, "use_colors": true, "vars": {}, "log_level": "info", "indirect_selection": "eager", "invocation_command": "dbt docs generate -t postgres", "strict_mode": false, "log_format": "default", "compile": true, "printer_width": 80, "log_format_file": "debug", "use_colors_file": true, "empty_catalog": false}}