{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.16", "generated_at": "2024-07-22T20:48:38.313168Z", "invocation_id": "0d0593f9-97a8-4914-a233-dd3d3af38552", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.178127Z", "completed_at": "2024-07-22T20:48:20.226309Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.226847Z", "completed_at": "2024-07-22T20:48:20.226861Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.052442073822021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__account_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"account_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__account_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.215273Z", "completed_at": "2024-07-22T20:48:20.227880Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.229641Z", "completed_at": "2024-07-22T20:48:20.229644Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05734729766845703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"bill_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.222474Z", "completed_at": "2024-07-22T20:48:20.228103Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.230096Z", "completed_at": "2024-07-22T20:48:20.230099Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.057478904724121094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"bill_linked_txn_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.190788Z", "completed_at": "2024-07-22T20:48:20.228964Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.233510Z", "completed_at": "2024-07-22T20:48:20.233513Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05934405326843262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__address_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"address_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__address_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.230336Z", "completed_at": "2024-07-22T20:48:20.235621Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.241804Z", "completed_at": "2024-07-22T20:48:20.241809Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01686716079711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"bill_payment_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_payment_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.238075Z", "completed_at": "2024-07-22T20:48:20.248373Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.250509Z", "completed_at": "2024-07-22T20:48:20.250513Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016275882720947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"bill_payment_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.242282Z", "completed_at": "2024-07-22T20:48:20.249079Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.251145Z", "completed_at": "2024-07-22T20:48:20.251147Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019025325775146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"bill_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.245565Z", "completed_at": "2024-07-22T20:48:20.249705Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.251851Z", "completed_at": "2024-07-22T20:48:20.251854Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018619060516357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"bundle_item_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bundle_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.252087Z", "completed_at": "2024-07-22T20:48:20.257213Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.261755Z", "completed_at": "2024-07-22T20:48:20.261759Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018085956573486328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"bundle_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bundle_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.258766Z", "completed_at": "2024-07-22T20:48:20.268506Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.270363Z", "completed_at": "2024-07-22T20:48:20.270367Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014858007431030273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"credit_memo_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__credit_memo_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.261997Z", "completed_at": "2024-07-22T20:48:20.269046Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.271036Z", "completed_at": "2024-07-22T20:48:20.271039Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017353057861328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"credit_memo_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__credit_memo_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.265421Z", "completed_at": "2024-07-22T20:48:20.269566Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.271749Z", "completed_at": "2024-07-22T20:48:20.271752Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01753997802734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"customer_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__customer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.271982Z", "completed_at": "2024-07-22T20:48:20.276736Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.281331Z", "completed_at": "2024-07-22T20:48:20.281336Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017904043197631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__department_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"department_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__department_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.278332Z", "completed_at": "2024-07-22T20:48:20.288102Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.290073Z", "completed_at": "2024-07-22T20:48:20.290078Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014893054962158203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"deposit_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__deposit_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.281576Z", "completed_at": "2024-07-22T20:48:20.288662Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.290490Z", "completed_at": "2024-07-22T20:48:20.290493Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01720595359802246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"deposit_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__deposit_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.284186Z", "completed_at": "2024-07-22T20:48:20.288879Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.290711Z", "completed_at": "2024-07-22T20:48:20.290714Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017069101333618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"estimate_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__estimate_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.291379Z", "completed_at": "2024-07-22T20:48:20.295837Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.297893Z", "completed_at": "2024-07-22T20:48:20.297896Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01679205894470215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"estimate_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__estimate_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.300786Z", "completed_at": "2024-07-22T20:48:20.307138Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.309101Z", "completed_at": "2024-07-22T20:48:20.309105Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016350984573364258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"invoice_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.303319Z", "completed_at": "2024-07-22T20:48:20.307766Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.312157Z", "completed_at": "2024-07-22T20:48:20.312160Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016537189483642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"invoice_linked_txn_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.298122Z", "completed_at": "2024-07-22T20:48:20.307995Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.312412Z", "completed_at": "2024-07-22T20:48:20.312415Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01766180992126465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"invoice_line_bundle_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.309340Z", "completed_at": "2024-07-22T20:48:20.314369Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.316589Z", "completed_at": "2024-07-22T20:48:20.316593Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013702154159545898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"invoice_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.321438Z", "completed_at": "2024-07-22T20:48:20.330755Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.332240Z", "completed_at": "2024-07-22T20:48:20.332245Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017557144165039062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"journal_entry_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__journal_entry_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.317233Z", "completed_at": "2024-07-22T20:48:20.331023Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.332676Z", "completed_at": "2024-07-22T20:48:20.332680Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018782854080200195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__item_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"item_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.324110Z", "completed_at": "2024-07-22T20:48:20.331539Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.333595Z", "completed_at": "2024-07-22T20:48:20.333598Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01889204978942871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"journal_entry_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__journal_entry_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.327937Z", "completed_at": "2024-07-22T20:48:20.332003Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.334254Z", "completed_at": "2024-07-22T20:48:20.334257Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008314132690429688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"payment_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__payment_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.338258Z", "completed_at": "2024-07-22T20:48:20.349737Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.350756Z", "completed_at": "2024-07-22T20:48:20.350762Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015892982482910156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_tmp", "compiled": true, "compiled_code": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"payment_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.341251Z", "completed_at": "2024-07-22T20:48:20.350004Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.351240Z", "completed_at": "2024-07-22T20:48:20.351244Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015946149826049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"purchase_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__purchase_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.344650Z", "completed_at": "2024-07-22T20:48:20.350990Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.353336Z", "completed_at": "2024-07-22T20:48:20.353339Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01713705062866211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"purchase_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__purchase_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.347073Z", "completed_at": "2024-07-22T20:48:20.351470Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.353839Z", "completed_at": "2024-07-22T20:48:20.353842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01736903190612793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"refund_receipt_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.356559Z", "completed_at": "2024-07-22T20:48:20.363109Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.370293Z", "completed_at": "2024-07-22T20:48:20.370298Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017333030700683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"refund_receipt_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__refund_receipt_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.359708Z", "completed_at": "2024-07-22T20:48:20.369441Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.370780Z", "completed_at": "2024-07-22T20:48:20.370783Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017248868942260742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"sales_receipt_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.363385Z", "completed_at": "2024-07-22T20:48:20.370546Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.372881Z", "completed_at": "2024-07-22T20:48:20.372884Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01473689079284668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"sales_receipt_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__sales_receipt_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.366828Z", "completed_at": "2024-07-22T20:48:20.370995Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.373389Z", "completed_at": "2024-07-22T20:48:20.373391Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0126190185546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__transfer_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"transfer_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__transfer_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.376132Z", "completed_at": "2024-07-22T20:48:20.385446Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.388002Z", "completed_at": "2024-07-22T20:48:20.388006Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015452146530151367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"vendor_credit_line_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.385713Z", "completed_at": "2024-07-22T20:48:20.386623Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.388239Z", "completed_at": "2024-07-22T20:48:20.388242Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007680177688598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.account_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.379222Z", "completed_at": "2024-07-22T20:48:20.386874Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.388463Z", "completed_at": "2024-07-22T20:48:20.388466Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01553201675415039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\n\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"vendor_credit_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor_credit_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.382778Z", "completed_at": "2024-07-22T20:48:20.387775Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.390225Z", "completed_at": "2024-07-22T20:48:20.390229Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012536048889160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from \"postgres\".\"quickbooks_integration_tests_12\".\"vendor_data\"", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.393822Z", "completed_at": "2024-07-22T20:48:20.430462Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.435309Z", "completed_at": "2024-07-22T20:48:20.435314Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04463386535644531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.address_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.430839Z", "completed_at": "2024-07-22T20:48:20.431727Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.435529Z", "completed_at": "2024-07-22T20:48:20.435532Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.044753074645996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.431969Z", "completed_at": "2024-07-22T20:48:20.432831Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.435739Z", "completed_at": "2024-07-22T20:48:20.435742Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04483199119567871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.434066Z", "completed_at": "2024-07-22T20:48:20.435059Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.437431Z", "completed_at": "2024-07-22T20:48:20.437434Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04529595375061035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.441519Z", "completed_at": "2024-07-22T20:48:20.442460Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.447366Z", "completed_at": "2024-07-22T20:48:20.447370Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00950312614440918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.442718Z", "completed_at": "2024-07-22T20:48:20.443537Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.447632Z", "completed_at": "2024-07-22T20:48:20.447641Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009504079818725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bill_payment_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.443769Z", "completed_at": "2024-07-22T20:48:20.445355Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.447964Z", "completed_at": "2024-07-22T20:48:20.447967Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009767770767211914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bundle_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.446325Z", "completed_at": "2024-07-22T20:48:20.447137Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.450053Z", "completed_at": "2024-07-22T20:48:20.450057Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0099639892578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.bundle_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.453771Z", "completed_at": "2024-07-22T20:48:20.454834Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.459752Z", "completed_at": "2024-07-22T20:48:20.459759Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009400129318237305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.credit_card_payment_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.455117Z", "completed_at": "2024-07-22T20:48:20.456177Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.459993Z", "completed_at": "2024-07-22T20:48:20.459997Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010493040084838867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.credit_memo_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.456512Z", "completed_at": "2024-07-22T20:48:20.457466Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.460235Z", "completed_at": "2024-07-22T20:48:20.460237Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0106048583984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.credit_memo_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.458590Z", "completed_at": "2024-07-22T20:48:20.459510Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.462983Z", "completed_at": "2024-07-22T20:48:20.462986Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010738134384155273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.466401Z", "completed_at": "2024-07-22T20:48:20.467406Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.471725Z", "completed_at": "2024-07-22T20:48:20.471728Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008369922637939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.department_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.467662Z", "completed_at": "2024-07-22T20:48:20.468497Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.471946Z", "completed_at": "2024-07-22T20:48:20.471948Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008450031280517578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.deposit_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.468752Z", "completed_at": "2024-07-22T20:48:20.469603Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.472156Z", "completed_at": "2024-07-22T20:48:20.472158Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008547782897949219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.deposit_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.470613Z", "completed_at": "2024-07-22T20:48:20.471487Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.473811Z", "completed_at": "2024-07-22T20:48:20.473814Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008814811706542969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.estimate_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.477209Z", "completed_at": "2024-07-22T20:48:20.478158Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.483222Z", "completed_at": "2024-07-22T20:48:20.483225Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009051084518432617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.estimate_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.478398Z", "completed_at": "2024-07-22T20:48:20.480078Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.483435Z", "completed_at": "2024-07-22T20:48:20.483438Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009167671203613281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.480322Z", "completed_at": "2024-07-22T20:48:20.481185Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.483651Z", "completed_at": "2024-07-22T20:48:20.483653Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009279012680053711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_line_bundle_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.482164Z", "completed_at": "2024-07-22T20:48:20.482995Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.485355Z", "completed_at": "2024-07-22T20:48:20.485358Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009463071823120117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.488920Z", "completed_at": "2024-07-22T20:48:20.489858Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.495004Z", "completed_at": "2024-07-22T20:48:20.495007Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009356021881103516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.invoice_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.490131Z", "completed_at": "2024-07-22T20:48:20.490984Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.495227Z", "completed_at": "2024-07-22T20:48:20.495229Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009455204010009766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.491225Z", "completed_at": "2024-07-22T20:48:20.492057Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.495439Z", "completed_at": "2024-07-22T20:48:20.495442Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009448051452636719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.journal_entry_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.493072Z", "completed_at": "2024-07-22T20:48:20.494756Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.497089Z", "completed_at": "2024-07-22T20:48:20.497092Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009514093399047852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.journal_entry_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.500347Z", "completed_at": "2024-07-22T20:48:20.501287Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.505493Z", "completed_at": "2024-07-22T20:48:20.505496Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008102893829345703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.501524Z", "completed_at": "2024-07-22T20:48:20.502360Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.505712Z", "completed_at": "2024-07-22T20:48:20.505715Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008187055587768555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.payment_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.502592Z", "completed_at": "2024-07-22T20:48:20.503415Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.505934Z", "completed_at": "2024-07-22T20:48:20.505936Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008283853530883789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.504417Z", "completed_at": "2024-07-22T20:48:20.505262Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.507528Z", "completed_at": "2024-07-22T20:48:20.507531Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008479833602905273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.511002Z", "completed_at": "2024-07-22T20:48:20.512649Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.516781Z", "completed_at": "2024-07-22T20:48:20.516784Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00894618034362793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_order_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.512889Z", "completed_at": "2024-07-22T20:48:20.513724Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.516994Z", "completed_at": "2024-07-22T20:48:20.516997Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009037017822265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_order_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.513956Z", "completed_at": "2024-07-22T20:48:20.514770Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.517204Z", "completed_at": "2024-07-22T20:48:20.517207Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009026765823364258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.purchase_order_linked_txn_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.515732Z", "completed_at": "2024-07-22T20:48:20.516550Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.518854Z", "completed_at": "2024-07-22T20:48:20.518857Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009174108505249023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.refund_receipt_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.522130Z", "completed_at": "2024-07-22T20:48:20.523081Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.528001Z", "completed_at": "2024-07-22T20:48:20.528004Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008831977844238281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.refund_receipt_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.523324Z", "completed_at": "2024-07-22T20:48:20.524161Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.528220Z", "completed_at": "2024-07-22T20:48:20.528223Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008941888809204102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.sales_receipt_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.524393Z", "completed_at": "2024-07-22T20:48:20.525985Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.528431Z", "completed_at": "2024-07-22T20:48:20.528433Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009080886840820312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.sales_receipt_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.526946Z", "completed_at": "2024-07-22T20:48:20.527777Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.530104Z", "completed_at": "2024-07-22T20:48:20.530107Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009274959564208984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.transfer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.533389Z", "completed_at": "2024-07-22T20:48:20.534354Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.543554Z", "completed_at": "2024-07-22T20:48:20.543559Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013482093811035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.vendor_credit_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.534590Z", "completed_at": "2024-07-22T20:48:20.535424Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.544256Z", "completed_at": "2024-07-22T20:48:20.544260Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01388096809387207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.vendor_credit_line_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.535649Z", "completed_at": "2024-07-22T20:48:20.536500Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:20.544491Z", "completed_at": "2024-07-22T20:48:20.544494Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013980865478515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.quickbooks_integration_tests.vendor_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.553198Z", "completed_at": "2024-07-22T20:48:21.703936Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:21.705582Z", "completed_at": "2024-07-22T20:48:21.705586Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2720320224761963, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as TEXT) as bill_id,\n        index,\n        cast(bill_payment_id as TEXT) as bill_payment_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.537453Z", "completed_at": "2024-07-22T20:48:21.703683Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:21.705291Z", "completed_at": "2024-07-22T20:48:21.705296Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.309969186782837, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__account", "compiled": true, "compiled_code": "with base as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__account_tmp\"\n\n),\n\naccount as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    account_sub_type\n    \n as \n    \n    account_sub_type\n    \n, \n    \n    \n    account_type\n    \n as \n    \n    account_type\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_sub_accounts\n    \n as \n    \n    balance_with_sub_accounts\n    \n, \n    \n    \n    classification\n    \n as \n    \n    classification\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    sub_account\n    \n as \n    \n    sub_account\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as account_id,\n        cast(account_number as TEXT) as account_number,\n        sub_account as is_sub_account,\n        cast(parent_account_id as TEXT) as parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        classification,\n        balance,\n        balance_with_sub_accounts,\n        active as is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n    from account\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.557004Z", "completed_at": "2024-07-22T20:48:21.702229Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:21.703350Z", "completed_at": "2024-07-22T20:48:21.703360Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3011860847473145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__address", "compiled": true, "compiled_code": "--To disable this model, set the using_address variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__address_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_sub_division_code\n    \n as \n    \n    country_sub_division_code\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    line_1\n    \n as \n    \n    line_1\n    \n, \n    \n    \n    line_2\n    \n as \n    \n    line_2\n    \n, \n    \n    \n    line_3\n    \n as \n    \n    line_3\n    \n, \n    \n    \n    line_4\n    \n as \n    \n    line_4\n    \n, \n    \n    \n    line_5\n    \n as \n    \n    line_5\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    postal_code\n    \n as \n    \n    postal_code\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as address_id,\n        city,\n        country,\n        line_1 as address_1,\n        line_2 as address_2,\n        postal_code,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__address\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:20.548723Z", "completed_at": "2024-07-22T20:48:21.704407Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:21.705813Z", "completed_at": "2024-07-22T20:48:21.705816Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3220419883728027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as TEXT) as bill_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        item_expense_billable_status,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:21.860252Z", "completed_at": "2024-07-22T20:48:22.980947Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:22.981424Z", "completed_at": "2024-07-22T20:48:22.981427Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2392933368682861, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n \nfinal as (\n    \n    select \n        cast(id as TEXT) as bill_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        cast( date_trunc('day', due_date) as date) as due_date_at, \n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        exchange_rate,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        total_amount,\n        cast(vendor_id as TEXT) as vendor_id,\n        private_note,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:21.854787Z", "completed_at": "2024-07-22T20:48:22.979974Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:22.980480Z", "completed_at": "2024-07-22T20:48:22.980490Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2562830448150635, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_payment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    check_bank_account_id\n    \n as \n    \n    check_bank_account_id\n    \n, \n    \n    \n    check_print_status\n    \n as \n    \n    check_print_status\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_account_id\n    \n as \n    \n    credit_card_account_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    pay_type\n    \n as \n    \n    pay_type\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_bill_payment\n    \n as \n    \n    process_bill_payment\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as bill_payment_id,\n        cast(check_bank_account_id as TEXT) as check_bank_account_id,\n        check_print_status,\n        cast(credit_card_account_id as TEXT) as credit_card_account_id,\n        exchange_rate,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        pay_type,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(vendor_id as TEXT) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:21.825453Z", "completed_at": "2024-07-22T20:48:22.981849Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:22.982282Z", "completed_at": "2024-07-22T20:48:22.982285Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2965710163116455, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line", "compiled": true, "compiled_code": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_payment_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_credit_card_id\n    \n as \n    \n    bill_payment_credit_card_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    linked_bill_payment_id\n    \n as \n    \n    linked_bill_payment_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n  \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_payment_id as TEXT) as bill_payment_id,\n        index,\n        amount,\n        cast(bill_id as TEXT) as bill_id,\n        deposit_id,\n        expense_id,\n        journal_entry_id,\n        linked_bill_payment_id,\n        vendor_credit_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:21.870903Z", "completed_at": "2024-07-22T20:48:23.172417Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:23.173729Z", "completed_at": "2024-07-22T20:48:23.173735Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4634339809417725, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bundle_item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    item_quantity\n    \n as \n    \n    item_quantity\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n  \n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bundle_id as TEXT) as bundle_id,\n        cast(item_id as TEXT) as item_id,\n        item_quantity,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bundle_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:23.167611Z", "completed_at": "2024-07-22T20:48:24.479794Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:24.481544Z", "completed_at": "2024-07-22T20:48:24.481551Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4693272113800049, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__credit_memo_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remaining_credit\n    \n as \n    \n    remaining_credit\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as credit_memo_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        cast(class_id as TEXT) as class_id,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__credit_memo\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:23.340149Z", "completed_at": "2024-07-22T20:48:24.480921Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:24.482703Z", "completed_at": "2024-07-22T20:48:24.482706Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2682750225067139, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__customer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone_number\n    \n as \n    \n    alternate_phone_number\n    \n, \n    \n    \n    ar_account_id\n    \n as \n    \n    ar_account_id\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_jobs\n    \n as \n    \n    balance_with_jobs\n    \n, \n    \n    \n    bill_address_id\n    \n as \n    \n    bill_address_id\n    \n, \n    \n    \n    bill_with_parent\n    \n as \n    \n    bill_with_parent\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    default_tax_code_id\n    \n as \n    \n    default_tax_code_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    job\n    \n as \n    \n    job\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_number\n    \n as \n    \n    mobile_number\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    open_balance_date\n    \n as \n    \n    open_balance_date\n    \n, \n    \n    \n    parent_customer_id\n    \n as \n    \n    parent_customer_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    preferred_delivery_method\n    \n as \n    \n    preferred_delivery_method\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    resale_number\n    \n as \n    \n    resale_number\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_exemption_reason_id\n    \n as \n    \n    tax_exemption_reason_id\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    website\n    \n as \n    \n    website\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as customer_id,\n        active as is_active,\n        balance,\n        balance_with_jobs,\n        bill_with_parent,\n        company_name,\n        fully_qualified_name,\n        currency_id,\n        display_name,\n        website,\n        taxable,\n        source_relation\n\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:23.109101Z", "completed_at": "2024-07-22T20:48:24.480398Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:24.482220Z", "completed_at": "2024-07-22T20:48:24.482224Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5334289073944092, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__bundle", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bundle_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    print_grouped_items\n    \n as \n    \n    print_grouped_items\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as bundle_id,\n        created_at,\n        active as is_active,\n        fully_qualified_name,\n        updated_at,\n        source_relation\n\n    from fields\n)\n\nselect * from final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bundle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:23.128905Z", "completed_at": "2024-07-22T20:48:24.480091Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:24.481976Z", "completed_at": "2024-07-22T20:48:24.481979Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5151920318603516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__credit_memo_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(credit_memo_id as TEXT) as credit_memo_id,\n        index,\n        amount,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:24.606692Z", "completed_at": "2024-07-22T20:48:25.749378Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:25.750507Z", "completed_at": "2024-07-22T20:48:25.750516Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.235461711883545, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__deposit_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    deposit_account_id\n    \n as \n    \n    deposit_account_id\n    \n, \n    \n    \n    deposit_check_number\n    \n as \n    \n    deposit_check_number\n    \n, \n    \n    \n    deposit_class_id\n    \n as \n    \n    deposit_class_id\n    \n, \n    \n    \n    deposit_customer_id\n    \n as \n    \n    deposit_customer_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    deposit_payment_method_id\n    \n as \n    \n    deposit_payment_method_id\n    \n, \n    \n    \n    deposit_tax_applicable_on\n    \n as \n    \n    deposit_tax_applicable_on\n    \n, \n    \n    \n    deposit_tax_code_id\n    \n as \n    \n    deposit_tax_code_id\n    \n, \n    \n    \n    deposit_transaction_type\n    \n as \n    \n    deposit_transaction_type\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n, \n    \n    \n    refund_receipt_id\n    \n as \n    \n    refund_receipt_id\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(deposit_id as TEXT) as deposit_id,\n        index,\n        amount,\n        description,\n        cast(deposit_account_id as TEXT) as deposit_account_id,\n        cast(deposit_class_id as TEXT) as deposit_class_id,\n        cast(deposit_customer_id as TEXT) as deposit_customer_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__deposit_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:24.629480Z", "completed_at": "2024-07-22T20:48:25.750817Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:25.752440Z", "completed_at": "2024-07-22T20:48:25.752443Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2236979007720947, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__deposit", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__deposit_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    cash_back_account_id\n    \n as \n    \n    cash_back_account_id\n    \n, \n    \n    \n    cash_back_amount\n    \n as \n    \n    cash_back_amount\n    \n, \n    \n    \n    cash_back_memo\n    \n as \n    \n    cash_back_memo\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as deposit_id,\n        cast(account_id as TEXT) as account_id,\n        created_at,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        total_amount,\n        home_total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__deposit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:24.643338Z", "completed_at": "2024-07-22T20:48:25.751046Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:25.752674Z", "completed_at": "2024-07-22T20:48:25.752677Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2109510898590088, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__estimate_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(estimate_id as TEXT) as estimate_id,\n        index,\n        description,\n        discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        sales_item_item_id,\n        sales_item_quantity,\n        item_id,\n        quantity,\n        account_id,\n        amount,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__estimate_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:24.599786Z", "completed_at": "2024-07-22T20:48:25.750036Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:25.752175Z", "completed_at": "2024-07-22T20:48:25.752179Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.268989086151123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__department", "compiled": true, "compiled_code": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__department_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_department_id\n    \n as \n    \n    parent_department_id\n    \n, \n    \n    \n    sub_department\n    \n as \n    \n    sub_department\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as department_id,\n        active as is_active,\n        created_at,\n        updated_at,\n        fully_qualified_name,\n        name,\n        sub_department as is_sub_department,\n        parent_department_id,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__department\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:25.843066Z", "completed_at": "2024-07-22T20:48:27.002951Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:27.003480Z", "completed_at": "2024-07-22T20:48:27.003487Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3385851383209229, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__estimate", "compiled": true, "compiled_code": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__estimate_tmp\"\n\n),\n \nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accepted_by\n    \n as \n    \n    accepted_by\n    \n, \n    \n    \n    accepted_date\n    \n as \n    \n    accepted_date\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    expiration_date\n    \n as \n    \n    expiration_date\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as estimate_id,\n        cast(class_id as TEXT) as class_id,\n        created_at,\n        currency_id,\n        customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        exchange_rate,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        transaction_status,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__estimate\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:25.869882Z", "completed_at": "2024-07-22T20:48:27.201884Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:27.204823Z", "completed_at": "2024-07-22T20:48:27.204826Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5039710998535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discount_amount\n    \n as \n    \n    discount_amount\n    \n, \n    \n    \n    discount_rate\n    \n as \n    \n    discount_rate\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_line_index\n    \n as \n    \n    invoice_line_index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    line_num\n    \n as \n    \n    line_num\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    service_date\n    \n as \n    \n    service_date\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        index,\n        cast(class_id as TEXT) as class_id,\n        description,\n        amount,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        cast(item_id as TEXT) as item_id,\n        quantity,\n        sales_item_quantity,\n        cast(account_id as TEXT) as account_id,\n        unit_price,\n        invoice_line_index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:25.862597Z", "completed_at": "2024-07-22T20:48:27.202795Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:27.210636Z", "completed_at": "2024-07-22T20:48:27.210642Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.522002935409546, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    charge_credit_id\n    \n as \n    \n    charge_credit_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    reimburse_charge_id\n    \n as \n    \n    reimburse_charge_id\n    \n, \n    \n    \n    statement_charge_id\n    \n as \n    \n    statement_charge_id\n    \n, \n    \n    \n    time_activity_id\n    \n as \n    \n    time_activity_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        cast(payment_id as TEXT) as payment_id,\n        cast(estimate_id as TEXT) as estimate_id,\n        index,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:25.856205Z", "completed_at": "2024-07-22T20:48:27.201365Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:27.204510Z", "completed_at": "2024-07-22T20:48:27.204518Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5329701900482178, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_line_tmp\"\n\n),\n\nfields as ( \n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as TEXT) as invoice_id,\n        index,\n        amount,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        detail_type,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        description,\n        quantity,\n        bundle_quantity,\n        cast(bundle_id as TEXT) as bundle_id,\n        cast(account_id as TEXT) as account_id,\n        cast(item_id as TEXT) as item_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:27.205124Z", "completed_at": "2024-07-22T20:48:28.354587Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:28.355148Z", "completed_at": "2024-07-22T20:48:28.355155Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2736060619354248, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__invoice", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allow_ipnpayment\n    \n as \n    \n    allow_ipnpayment\n    \n, \n    \n    \n    allow_online_achpayment\n    \n as \n    \n    allow_online_achpayment\n    \n, \n    \n    \n    allow_online_credit_card_payment\n    \n as \n    \n    allow_online_credit_card_payment\n    \n, \n    \n    \n    allow_online_payment\n    \n as \n    \n    allow_online_payment\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    billing_bcc_email\n    \n as \n    \n    billing_bcc_email\n    \n, \n    \n    \n    billing_cc_email\n    \n as \n    \n    billing_cc_email\n    \n, \n    \n    \n    billing_email\n    \n as \n    \n    billing_email\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    custom_sales_rep\n    \n as \n    \n    custom_sales_rep\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit\n    \n as \n    \n    deposit\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as invoice_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        cast(department_id as TEXT) as department_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(customer_id as TEXT) as customer_id,\n        cast(billing_address_id as TEXT) as billing_address_id,\n        shipping_address_id,\n        delivery_type,\n        cast( date_trunc('day', due_date) as date) as due_date, \n        cast(class_id as TEXT) as class_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:27.410824Z", "completed_at": "2024-07-22T20:48:28.638795Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:28.639283Z", "completed_at": "2024-07-22T20:48:28.639286Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3800840377807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__journal_entry_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    billable_status\n    \n as \n    \n    billable_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    posting_type\n    \n as \n    \n    posting_type\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_applicable_on\n    \n as \n    \n    tax_applicable_on\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(journal_entry_id as TEXT) as journal_entry_id,\n        index,\n        cast(account_id as TEXT) as account_id,\n        amount,\n        cast(customer_id as TEXT) as customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast(class_id as TEXT) as class_id,\n        description,\n        billable_status,\n        posting_type,\n        cast(vendor_id as TEXT) as vendor_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:27.403898Z", "completed_at": "2024-07-22T20:48:28.639768Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:28.640193Z", "completed_at": "2024-07-22T20:48:28.640196Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.38435697555542, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__item", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    asset_account_id\n    \n as \n    \n    asset_account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    expense_account_id\n    \n as \n    \n    expense_account_id\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    income_account_id\n    \n as \n    \n    income_account_id\n    \n, \n    \n    \n    inventory_start_date\n    \n as \n    \n    inventory_start_date\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_item_id\n    \n as \n    \n    parent_item_id\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    purchase_description\n    \n as \n    \n    purchase_description\n    \n, \n    \n    \n    purchase_tax_code_id\n    \n as \n    \n    purchase_tax_code_id\n    \n, \n    \n    \n    purchase_tax_included\n    \n as \n    \n    purchase_tax_included\n    \n, \n    \n    \n    quantity_on_hand\n    \n as \n    \n    quantity_on_hand\n    \n, \n    \n    \n    sales_tax_code_id\n    \n as \n    \n    sales_tax_code_id\n    \n, \n    \n    \n    sales_tax_included\n    \n as \n    \n    sales_tax_included\n    \n, \n    \n    \n    stock_keeping_unit\n    \n as \n    \n    stock_keeping_unit\n    \n, \n    \n    \n    sub_item\n    \n as \n    \n    sub_item\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    track_quantity_on_hand\n    \n as \n    \n    track_quantity_on_hand\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as item_id,\n        active as is_active,\n        created_at,\n        cast(income_account_id as TEXT) as income_account_id,\n        cast(asset_account_id as TEXT) as asset_account_id,\n        cast(expense_account_id as TEXT) as expense_account_id,\n        name,\n        purchase_cost,\n        taxable,\n        type,\n        unit_price,\n        inventory_start_date,\n        cast(parent_item_id as TEXT) as parent_item_id,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:27.416398Z", "completed_at": "2024-07-22T20:48:28.637859Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:28.638344Z", "completed_at": "2024-07-22T20:48:28.638351Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3786859512329102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__journal_entry_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    adjustment\n    \n as \n    \n    adjustment\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT) as journal_entry_id,\n        adjustment as is_adjustment,\n        created_at,\n        currency_id,\n        cast(doc_number as TEXT) as doc_number,\n        exchange_rate,\n        private_note,\n        total_amount,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__journal_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:28.484567Z", "completed_at": "2024-07-22T20:48:29.767988Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:29.768496Z", "completed_at": "2024-07-22T20:48:29.768507Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4139611721038818, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__payment_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(payment_id as TEXT) as payment_id,\n        index,\n        amount,\n        journal_entry_id,\n        deposit_id,\n        cast(invoice_id as TEXT) as invoice_id,\n        credit_memo_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__payment_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:28.808433Z", "completed_at": "2024-07-22T20:48:30.156933Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:30.157629Z", "completed_at": "2024-07-22T20:48:30.157637Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4960660934448242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__purchase_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit\n    \n as \n    \n    credit\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remit_to_address_id\n    \n as \n    \n    remit_to_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n     \n    select \n        cast(id as TEXT) as purchase_id,\n        cast(account_id as TEXT) as account_id,\n        created_at,\n        cast(doc_number as TEXT) as doc_number,\n        currency_id,\n        exchange_rate,\n        credit,\n        total_amount,\n        payment_type,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        cast(vendor_id as TEXT) as vendor_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__purchase\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:28.791814Z", "completed_at": "2024-07-22T20:48:30.154888Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:30.155941Z", "completed_at": "2024-07-22T20:48:30.155951Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.5316760540008545, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__payment", "compiled": true, "compiled_code": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__payment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_payment\n    \n as \n    \n    process_payment\n    \n, \n    \n    \n    receivable_account_id\n    \n as \n    \n    receivable_account_id\n    \n, \n    \n    \n    reference_number\n    \n as \n    \n    reference_number\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    unapplied_amount\n    \n as \n    \n    unapplied_amount\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as payment_id,\n        unapplied_amount,\n        total_amount,\n        currency_id,\n        cast(receivable_account_id as TEXT) as receivable_account_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(customer_id as TEXT) as customer_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:28.803769Z", "completed_at": "2024-07-22T20:48:30.330192Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:30.330683Z", "completed_at": "2024-07-22T20:48:30.330689Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.7328410148620605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__purchase_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_id as TEXT) as purchase_id,\n        index,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id, \n        account_expense_billable_status,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_billable_status,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__purchase_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:29.900329Z", "completed_at": "2024-07-22T20:48:31.468539Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:31.469055Z", "completed_at": "2024-07-22T20:48:31.469061Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.684398889541626, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(refund_id as TEXT) as refund_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id, \n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        sales_item_tax_code_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:30.308914Z", "completed_at": "2024-07-22T20:48:31.673214Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:31.674151Z", "completed_at": "2024-07-22T20:48:31.674160Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4583418369293213, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(sales_receipt_id as TEXT) as sales_receipt_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as TEXT) as discount_account_id,\n        cast(discount_class_id as TEXT) as discount_class_id,\n        cast(sales_item_account_id as TEXT) as sales_item_account_id,\n        cast(sales_item_class_id as TEXT) as sales_item_class_id,\n        cast(sales_item_item_id as TEXT) as sales_item_item_id,\n        sales_item_tax_code_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:30.300721Z", "completed_at": "2024-07-22T20:48:31.753336Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:31.754034Z", "completed_at": "2024-07-22T20:48:31.754040Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.578813076019287, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__refund_receipt_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    check_payment_account_number\n    \n as \n    \n    check_payment_account_number\n    \n, \n    \n    \n    check_payment_bank_name\n    \n as \n    \n    check_payment_bank_name\n    \n, \n    \n    \n    check_payment_check_number\n    \n as \n    \n    check_payment_check_number\n    \n, \n    \n    \n    check_payment_name_on_account\n    \n as \n    \n    check_payment_name_on_account\n    \n, \n    \n    \n    check_payment_status\n    \n as \n    \n    check_payment_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as refund_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        cast(class_id as TEXT) as class_id,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        created_at,\n        cast(department_id as TEXT) as department_id,\n        cast(customer_id as TEXT) as customer_id,\n        currency_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__refund_receipt\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:30.541027Z", "completed_at": "2024-07-22T20:48:31.810405Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:31.811128Z", "completed_at": "2024-07-22T20:48:31.811135Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3893799781799316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__sales_receipt_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as sales_receipt_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        cast(deposit_to_account_id as TEXT) as deposit_to_account_id,\n        created_at,\n        cast(customer_id as TEXT) as customer_id,\n        cast(department_id as TEXT) as department_id,\n        cast(class_id as TEXT) as class_id,\n        currency_id,\n        exchange_rate,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__sales_receipt\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:31.583477Z", "completed_at": "2024-07-22T20:48:32.622996Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.624054Z", "completed_at": "2024-07-22T20:48:32.624063Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.153317928314209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__transfer", "compiled": true, "compiled_code": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__transfer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    from_account_id\n    \n as \n    \n    from_account_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    to_account_id\n    \n as \n    \n    to_account_id\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as transfer_id,\n        amount,\n        cast(from_account_id as TEXT) as from_account_id,\n        cast(to_account_id as TEXT) as to_account_id,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__transfer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.737077Z", "completed_at": "2024-07-22T20:48:32.749098Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.749744Z", "completed_at": "2024-07-22T20:48:32.749751Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013775825500488281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id.35f96199bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.751469Z", "completed_at": "2024-07-22T20:48:32.754189Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.754657Z", "completed_at": "2024-07-22T20:48:32.754662Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004180908203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__account_classifications", "compiled": true, "compiled_code": "with accounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\nclassification_fix as (\n\n    select \n        account_id,\n        source_relation,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n\n    select \n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.account_id = adjusted_balances.parent_account_id\n        and parent_accounts.source_relation = adjusted_balances.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__account_classifications\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.756548Z", "completed_at": "2024-07-22T20:48:32.762950Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.763736Z", "completed_at": "2024-07-22T20:48:32.763743Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008490800857543945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue.127506f73f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        classification as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__account\"\n    group by classification\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Asset','Equity','Expense','Liability','Revenue'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.765695Z", "completed_at": "2024-07-22T20:48:32.772425Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.772928Z", "completed_at": "2024-07-22T20:48:32.772935Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008264780044555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__account_account_id__source_relation.864a4b056a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__account\"\n    group by account_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.774806Z", "completed_at": "2024-07-22T20:48:32.778078Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.778585Z", "completed_at": "2024-07-22T20:48:32.778590Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005117893218994141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__account_account_id.9944488b9d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__account\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.780285Z", "completed_at": "2024-07-22T20:48:32.783893Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.784363Z", "completed_at": "2024-07-22T20:48:32.784368Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005093097686767578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__address_address_id__source_relation.5bc813a014", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__address\"\n    group by address_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.786190Z", "completed_at": "2024-07-22T20:48:32.788972Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.789432Z", "completed_at": "2024-07-22T20:48:32.789438Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004482746124267578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__address_address_id.4f100ae50c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__address\"\nwhere address_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.791132Z", "completed_at": "2024-07-22T20:48:32.794789Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.795256Z", "completed_at": "2024-07-22T20:48:32.795261Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00516200065612793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_line_bill_id__index__source_relation.73722b1062", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_line\"\n    group by bill_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.797244Z", "completed_at": "2024-07-22T20:48:32.801338Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.801807Z", "completed_at": "2024-07-22T20:48:32.801812Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005883932113647461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id.25c5ea7348", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_line\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.803652Z", "completed_at": "2024-07-22T20:48:32.806981Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.807459Z", "completed_at": "2024-07-22T20:48:32.807464Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0050160884857177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_bill_id__source_relation.8c08249abf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill\"\n    group by bill_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.809274Z", "completed_at": "2024-07-22T20:48:32.812351Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.812909Z", "completed_at": "2024-07-22T20:48:32.812914Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004872798919677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id.ca717958c8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill\"\nwhere bill_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.814622Z", "completed_at": "2024-07-22T20:48:32.817957Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.818401Z", "completed_at": "2024-07-22T20:48:32.818406Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004784107208251953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_bill_payment_id__source_relation.4b7aafd630", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_payment\"\n    group by bill_payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.820224Z", "completed_at": "2024-07-22T20:48:32.823703Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.824218Z", "completed_at": "2024-07-22T20:48:32.824224Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005222797393798828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id.908899ccfb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_payment\"\nwhere bill_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.826254Z", "completed_at": "2024-07-22T20:48:32.832485Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.833306Z", "completed_at": "2024-07-22T20:48:32.833313Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008504152297973633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_join", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill\"\n),\n\nbill_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_line\"\n),\n\nbills_linked as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_linked_txn\"\n),\n\nbill_payments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_payment\"\n),\n\nbill_payment_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\"\n\n    where bill_id is not null\n),\n\nbill_pay as (\n\n    select\n        bills.bill_id,\n        bills.source_relation,\n        bills_linked.bill_payment_id\n    from bills\n\n    left join bills_linked\n        on bills.bill_id = bills_linked.bill_id\n        and bills.source_relation = bills_linked.source_relation\n\n    where bills_linked.bill_payment_id is not null\n),\n\nbill_link as (\n\n    select\n        bills.*,\n        bill_pay.bill_payment_id\n    from bills\n\n    left join bill_pay\n        on bills.bill_id = bill_pay.bill_id\n        and bills.source_relation = bill_pay.source_relation\n),\n\nfinal as (\n\n    select\n        cast('bill' as TEXT)  as transaction_type,\n        bill_link.bill_id as transaction_id,\n        bill_link.source_relation,\n        bill_link.doc_number,\n        bill_link.department_id,\n        bill_link.vendor_id as vendor_id,\n        bill_link.payable_account_id,\n        bill_link.total_amount as total_amount,\n        (bill_link.total_amount * coalesce(bill_link.exchange_rate, 1)) as total_converted_amount,\n        bill_link.balance as current_balance,\n        bill_link.due_date_at as due_date,\n        min(bill_payments.transaction_date) as initial_payment_date,\n        max(bill_payments.transaction_date) as recent_payment_date,\n        sum(coalesce(bill_payment_lines.amount, 0)) as total_current_payment,\n        sum(coalesce(bill_payment_lines.amount, 0) * coalesce(bill_payments.exchange_rate, 1)) as total_current_converted_payment\n\n    from bill_link\n\n    left join bill_payments\n        on bill_link.bill_payment_id = bill_payments.bill_payment_id\n        and bill_link.source_relation = bill_payments.source_relation\n\n    left join bill_payment_lines\n        on bill_payments.bill_payment_id = bill_payment_lines.bill_payment_id\n        and bill_payments.source_relation = bill_payment_lines.source_relation\n        and bill_link.bill_id = bill_payment_lines.bill_id\n        and bill_link.source_relation = bill_payment_lines.source_relation\n    \n    group by 1,2,3,4,5,6,7,8,9,10,11 \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__bill_join\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.835156Z", "completed_at": "2024-07-22T20:48:32.839217Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.839828Z", "completed_at": "2024-07-22T20:48:32.839835Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005753755569458008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_payment_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to accounts payable and a credit record to the specified cash account.\n*/\n\n--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith bill_payments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_payment\"\n),\n\nbill_payment_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\nap_accounts as (\n\n    select\n        account_id,\n        currency_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Payable'\n        and is_active\n        and not is_sub_account\n),\n\nbill_payment_join as (\n\n    select\n        bill_payments.bill_payment_id as transaction_id,\n        bill_payments.source_relation,\n        row_number() over(partition by bill_payments.bill_payment_id, bill_payments.source_relation \n            order by bill_payments.source_relation, bill_payments.transaction_date) - 1 as index,\n        bill_payments.transaction_date,\n        bill_payments.total_amount as amount,\n        (bill_payments.total_amount * coalesce(bill_payments.exchange_rate, 1)) as converted_amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id,\n        bill_payments.vendor_id,\n        bill_payments.department_id\n    from bill_payments\n\n    left join ap_accounts\n        on ap_accounts.currency_id = bill_payments.currency_id\n        and ap_accounts.source_relation = bill_payments.source_relation\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payment_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        department_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        account_id,\n        cast(null as TEXT) as class_id,\n        department_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source\n    from bill_payment_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__bill_payment_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.841844Z", "completed_at": "2024-07-22T20:48:32.844963Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.845426Z", "completed_at": "2024-07-22T20:48:32.845430Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004850149154663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bill_payment_line_bill_payment_id__index__source_relation.0a7e17967c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bill_payment_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\"\n    group by bill_payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.847241Z", "completed_at": "2024-07-22T20:48:32.850734Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.851341Z", "completed_at": "2024-07-22T20:48:32.851347Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005307912826538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id.1dbb366150", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bill_payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_payment_line\"\nwhere bill_payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.853061Z", "completed_at": "2024-07-22T20:48:32.856097Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.856554Z", "completed_at": "2024-07-22T20:48:32.856559Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004621744155883789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id.6d547b8c07", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bundle_item\"\nwhere bundle_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.858086Z", "completed_at": "2024-07-22T20:48:32.863712Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.864340Z", "completed_at": "2024-07-22T20:48:32.864347Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0072460174560546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_credit_memo_id__source_relation.917f24c5ca", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__credit_memo\"\n    group by credit_memo_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.866131Z", "completed_at": "2024-07-22T20:48:32.869247Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.869689Z", "completed_at": "2024-07-22T20:48:32.869694Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004639863967895508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id.d921d2b152", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__credit_memo\"\nwhere credit_memo_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.871680Z", "completed_at": "2024-07-22T20:48:32.875235Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.875727Z", "completed_at": "2024-07-22T20:48:32.875733Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005450010299682617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__customer_customer_id__source_relation.61cc22a568", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__customer\"\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.877524Z", "completed_at": "2024-07-22T20:48:32.880542Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.880984Z", "completed_at": "2024-07-22T20:48:32.880989Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004575967788696289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id.98232a9723", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__customer\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.882437Z", "completed_at": "2024-07-22T20:48:32.886254Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.886854Z", "completed_at": "2024-07-22T20:48:32.886861Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005404949188232422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__bundle_bundle_id__source_relation.e241a21ebc", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        bundle_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bundle\"\n    group by bundle_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.888765Z", "completed_at": "2024-07-22T20:48:32.893695Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.894183Z", "completed_at": "2024-07-22T20:48:32.894189Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006754159927368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id.382e1dad60", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bundle_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bundle\"\nwhere bundle_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.896130Z", "completed_at": "2024-07-22T20:48:32.899740Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.900325Z", "completed_at": "2024-07-22T20:48:32.900333Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0054168701171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__credit_memo_line_credit_memo_id__index__source_relation.7a43f0e186", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        credit_memo_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\"\n    group by credit_memo_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.902274Z", "completed_at": "2024-07-22T20:48:32.916761Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.917487Z", "completed_at": "2024-07-22T20:48:32.917496Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016520977020263672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id.58953be02b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_memo_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\"\nwhere credit_memo_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.920321Z", "completed_at": "2024-07-22T20:48:32.924464Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.925154Z", "completed_at": "2024-07-22T20:48:32.925160Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006485939025878906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_line_deposit_id__index__source_relation.443de63985", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__deposit_line\"\n    group by deposit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.926890Z", "completed_at": "2024-07-22T20:48:32.931142Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.931583Z", "completed_at": "2024-07-22T20:48:32.931589Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005814790725708008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id.d615f463e1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__deposit_line\"\nwhere deposit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.933409Z", "completed_at": "2024-07-22T20:48:32.979424Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.979872Z", "completed_at": "2024-07-22T20:48:32.979878Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.047644853591918945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__deposit_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified cash account and a credit record to either undeposited funds or a\nspecific other account indicated in the deposit line.\n*/\n\n--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith deposits as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__deposit\"\n),\n\ndeposit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__deposit_line\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\nuf_accounts as (\n\n    select\n        account_id,\n        source_relation\n    from accounts\n\n    where account_sub_type = 'UndepositedFunds'\n        and is_active\n        and not is_sub_account\n),\n\ndeposit_join as (\n\n    select\n        deposits.deposit_id as transaction_id,\n        deposits.source_relation,\n        deposit_lines.index,\n        deposits.transaction_date,\n        deposit_lines.amount,\n        deposit_lines.amount * (coalesce(deposits.home_total_amount/deposits.total_amount, 1)) as converted_amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.deposit_account_id, uf_accounts.account_id) as deposit_from_acct_id,\n        deposit_customer_id as customer_id,\n        deposit_lines.deposit_class_id as class_id,\n        deposits.department_id\n\n    from deposits\n\n    inner join deposit_lines\n        on deposits.deposit_id = deposit_lines.deposit_id\n        and deposits.source_relation = deposit_lines.source_relation\n\n    left join uf_accounts\n        on uf_accounts.source_relation = deposits.source_relation\n\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        deposit_to_acct_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        deposit_from_acct_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source\n    from deposit_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__deposit_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.981317Z", "completed_at": "2024-07-22T20:48:32.984288Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.984711Z", "completed_at": "2024-07-22T20:48:32.984716Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004283905029296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__deposit_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith deposits as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__deposit\"\n), \n\ndeposit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__deposit_line\"\n),\n\nfinal as (\n\n    select\n        deposits.deposit_id as transaction_id,\n        deposits.source_relation,\n        deposit_lines.index as transaction_line_id,\n        cast(null as TEXT) as doc_number,\n        'deposit' as transaction_type,\n        deposits.transaction_date,\n        deposit_lines.deposit_account_id as account_id,\n        deposit_lines.deposit_class_id as class_id,\n        deposits.department_id,\n        deposit_lines.deposit_customer_id as customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        deposit_lines.description,\n        deposit_lines.amount,\n        deposit_lines.amount * (coalesce(deposits.home_total_amount/deposits.total_amount, 1)) as converted_amount,\n        deposits.total_amount,\n        deposits.total_amount * (coalesce(deposits.home_total_amount/deposits.total_amount, 1)) as total_converted_amount\n    from deposits\n    \n    inner join deposit_lines \n        on deposits.deposit_id = deposit_lines.deposit_id\n        and deposits.source_relation = deposit_lines.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__deposit_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.986550Z", "completed_at": "2024-07-22T20:48:32.990199Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.990815Z", "completed_at": "2024-07-22T20:48:32.990823Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005595207214355469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__deposit_deposit_id__source_relation.5574d8e908", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deposit_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__deposit\"\n    group by deposit_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.992562Z", "completed_at": "2024-07-22T20:48:32.995992Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.996434Z", "completed_at": "2024-07-22T20:48:32.996439Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0049860477447509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id.880b8c37b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__deposit\"\nwhere deposit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:32.998245Z", "completed_at": "2024-07-22T20:48:33.001988Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.002470Z", "completed_at": "2024-07-22T20:48:33.002476Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00531458854675293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_line_estimate_id__index__source_relation.cc61ab0953", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__estimate_line\"\n    group by estimate_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.004340Z", "completed_at": "2024-07-22T20:48:33.008907Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.009368Z", "completed_at": "2024-07-22T20:48:33.009374Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0061838626861572266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id.c060f99b4c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__estimate_line\"\nwhere estimate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.011158Z", "completed_at": "2024-07-22T20:48:33.014167Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.014624Z", "completed_at": "2024-07-22T20:48:33.014629Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004663944244384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__estimate_estimate_id__source_relation.412260b882", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        estimate_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__estimate\"\n    group by estimate_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.016316Z", "completed_at": "2024-07-22T20:48:33.019655Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.020111Z", "completed_at": "2024-07-22T20:48:33.020117Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004806041717529297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id.0331d3c310", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimate_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__estimate\"\nwhere estimate_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.021596Z", "completed_at": "2024-07-22T20:48:33.025311Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.025780Z", "completed_at": "2024-07-22T20:48:33.025785Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005192995071411133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_bundle_invoice_id__index__invoice_line_index__source_relation.5370e9fcd0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, invoice_line_index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle\"\n    group by invoice_id, index, invoice_line_index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.027623Z", "completed_at": "2024-07-22T20:48:33.030804Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.031251Z", "completed_at": "2024-07-22T20:48:33.031256Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004829883575439453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id.cfd59b83a9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.032894Z", "completed_at": "2024-07-22T20:48:33.036679Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.037137Z", "completed_at": "2024-07-22T20:48:33.037141Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0052318572998046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id.c9b9c8f8f4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.038598Z", "completed_at": "2024-07-22T20:48:33.041905Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.042564Z", "completed_at": "2024-07-22T20:48:33.042572Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0049610137939453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_line_invoice_id__index__source_relation.99b74bc327", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_line\"\n    group by invoice_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.044122Z", "completed_at": "2024-07-22T20:48:33.047128Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.047658Z", "completed_at": "2024-07-22T20:48:33.047663Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004476785659790039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id.0424087a8f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_line\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.049400Z", "completed_at": "2024-07-22T20:48:33.053185Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.053763Z", "completed_at": "2024-07-22T20:48:33.053769Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005537986755371094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__invoice_invoice_id__source_relation.ef51800044", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice\"\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.055378Z", "completed_at": "2024-07-22T20:48:33.058764Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.059454Z", "completed_at": "2024-07-22T20:48:33.059460Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0051212310791015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id.b6d8e1ad7d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.061128Z", "completed_at": "2024-07-22T20:48:33.066165Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.066634Z", "completed_at": "2024-07-22T20:48:33.066642Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006520271301269531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit.ab661907c3", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        posting_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\n    group by posting_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Credit','Debit'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.068383Z", "completed_at": "2024-07-22T20:48:33.072120Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.072620Z", "completed_at": "2024-07-22T20:48:33.072624Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0053479671478271484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__journal_entry_line_journal_entry_id__index__source_relation.0cd1d9f232", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        journal_entry_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\n    group by journal_entry_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.074362Z", "completed_at": "2024-07-22T20:48:33.077489Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.077962Z", "completed_at": "2024-07-22T20:48:33.077967Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004748106002807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id.bd89a6f784", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\nwhere journal_entry_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.079516Z", "completed_at": "2024-07-22T20:48:33.082600Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.083219Z", "completed_at": "2024-07-22T20:48:33.083226Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004769086837768555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified expense account and credit record to accounts payable for each bill transaction.\n*/\n\n--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill\"\n),\n\nbill_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.expense_account_id as parent_expense_account_id,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nbill_join as (\n    select\n        bills.bill_id as transaction_id,\n        bills.source_relation,\n        bill_lines.index,\n        bills.transaction_date,\n        bill_lines.amount,\n        (bill_lines.amount * coalesce(bills.exchange_rate, 1)) as converted_amount,\n        coalesce(bill_lines.account_expense_account_id,items.asset_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        coalesce(bill_lines.item_expense_class_id, bill_lines.account_expense_class_id) as class_id,\n        bills.vendor_id,\n        bills.department_id\n    from bills\n\n    inner join bill_lines\n        on bills.bill_id = bill_lines.bill_id\n        and bills.source_relation = bill_lines.source_relation\n\n    left join items\n        on bill_lines.item_expense_item_id = items.item_id\n        and bill_lines.source_relation = items.source_relation\n),\n\nfinal as (\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payed_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payable_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source\n    from bill_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__bill_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.084891Z", "completed_at": "2024-07-22T20:48:33.087770Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.088237Z", "completed_at": "2024-07-22T20:48:33.088243Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004322052001953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__bill_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill\" \n),\n\nbill_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bill_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        bills.bill_id as transaction_id,\n        bills.source_relation,\n        bill_lines.index as transaction_line_id,\n        bills.doc_number,\n        'bill' as transaction_type,\n        bills.transaction_date,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id) as account_id,\n        bill_lines.account_expense_class_id as class_id,\n        bills.department_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        bills.vendor_id,\n        coalesce(bill_lines.account_expense_billable_status, bill_lines.item_expense_billable_status) as billable_status,\n        coalesce(bill_lines.description, items.name) as description,\n        bill_lines.amount,\n        bill_lines.amount * (coalesce(bills.exchange_rate, 1)) as converted_amount,\n        bills.total_amount,\n        bills.total_amount * (coalesce(bills.exchange_rate, 1)) as total_converted_amount\n    from bills\n\n    inner join bill_lines \n        on bills.bill_id = bill_lines.bill_id\n        and bills.source_relation = bill_lines.source_relation\n\n    left join items\n        on bill_lines.item_expense_item_id = items.item_id\n        and bill_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__bill_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.090051Z", "completed_at": "2024-07-22T20:48:33.094435Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.094871Z", "completed_at": "2024-07-22T20:48:33.094878Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005907297134399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__credit_memo_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to Discounts Refunds Given and a credit record to the specified income account.\n*/\n\n--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith credit_memos as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__credit_memo\"\n),\n\ncredit_memo_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\ndf_accounts as (\n\n    select\n        account_id as account_id,\n        currency_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n        and not is_sub_account\n),\n\ncredit_memo_join as (\n\n    select\n        credit_memos.credit_memo_id as transaction_id,\n        credit_memos.source_relation,\n        credit_memo_lines.index,\n        credit_memos.transaction_date,\n        credit_memo_lines.amount,\n        (credit_memo_lines.amount * coalesce(credit_memos.exchange_rate, 1)) as converted_amount,\n        coalesce(credit_memo_lines.sales_item_account_id, items.income_account_id, items.expense_account_id) as account_id,\n        credit_memos.customer_id,\n        coalesce(credit_memo_lines.sales_item_class_id, credit_memo_lines.discount_class_id, credit_memos.class_id) as class_id,\n        credit_memos.department_id,\n        credit_memos.currency_id\n\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos.credit_memo_id = credit_memo_lines.credit_memo_id\n        and credit_memos.source_relation = credit_memo_lines.source_relation\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.item_id\n        and credit_memo_lines.source_relation = items.source_relation\n\n    where coalesce(credit_memo_lines.discount_account_id, credit_memo_lines.sales_item_account_id, credit_memo_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        credit_memo_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount * -1 as amount,\n        converted_amount * -1 as converted_amount,\n        account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'credit_memo' as transaction_source\n    from credit_memo_join\n\n    union all\n\n    select\n        transaction_id,\n        credit_memo_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount * -1 as amount,\n        converted_amount * -1 as converted_amount,\n        df_accounts.account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'credit_memo' as transaction_source\n    from credit_memo_join\n\n    left join df_accounts\n        on df_accounts.currency_id = credit_memo_join.currency_id\n        and df_accounts.source_relation = credit_memo_join.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__credit_memo_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.096698Z", "completed_at": "2024-07-22T20:48:33.100027Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.100474Z", "completed_at": "2024-07-22T20:48:33.100479Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005012989044189453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__credit_memo_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith credit_memos as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__credit_memo\"\n),\n\ncredit_memo_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__credit_memo_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        credit_memos.credit_memo_id as transaction_id,\n        credit_memos.source_relation,\n        credit_memo_lines.index as transaction_line_id,\n        credit_memos.doc_number,\n        'credit_memo' as transaction_type,\n        credit_memos.transaction_date,\n        credit_memo_lines.sales_item_item_id as item_id,\n        credit_memo_lines.sales_item_quantity as item_quantity,\n        credit_memo_lines.sales_item_unit_price as item_unit_price,\n        case when credit_memo_lines.sales_item_account_id is null\n            then coalesce(items.income_account_id, items.asset_account_id, items.expense_account_id) \n            else credit_memo_lines.sales_item_account_id\n                end as account_id,\n        credit_memos.class_id,\n        credit_memos.department_id,\n        credit_memos.customer_id, \n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        credit_memo_lines.description,\n        credit_memo_lines.amount * -1 as amount,\n        credit_memo_lines.amount * coalesce(-credit_memos.exchange_rate, -1) as converted_amount,\n        credit_memos.total_amount * -1 as total_amount,\n        credit_memos.total_amount * coalesce(-credit_memos.exchange_rate, -1) as total_converted_amount\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos.credit_memo_id = credit_memo_lines.credit_memo_id\n        and credit_memos.source_relation = credit_memo_lines.source_relation\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.item_id\n        and credit_memo_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__credit_memo_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.102228Z", "completed_at": "2024-07-22T20:48:33.107063Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.107508Z", "completed_at": "2024-07-22T20:48:33.107512Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006410121917724609, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__invoice_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to accounts receivable and a credit record to a specified revenue account indicated on the invoice line.\n*/\n\n--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice\"\n),\n\ninvoice_lines as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_line\"\n),\n\nitems as (\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\naccounts as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\n\n\n\ninvoice_bundles as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_line_bundle\"\n),\n\nbundles as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bundle\"\n),\n\nbundle_items as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__bundle_item\"\n),\n\nincome_accounts as (\n\n    select *\n    from accounts\n\n    where account_sub_type = 'SalesOfProductIncome'\n),\n\nbundle_income_accounts as (\n\n    select distinct\n        coalesce(parent.income_account_id, income_accounts.account_id) as account_id,\n        coalesce(parent.source_relation, income_accounts.source_relation) as source_relation,\n        bundle_items.bundle_id\n\n    from items\n\n    left join items as parent\n        on items.parent_item_id = parent.item_id\n        and items.source_relation = parent.source_relation\n\n    inner join income_accounts\n        on income_accounts.account_id = items.income_account_id\n        and income_accounts.source_relation = items.source_relation\n\n    inner join bundle_items\n        on bundle_items.item_id = items.item_id\n        and bundle_items.source_relation = items.source_relation\n),\n\n\nar_accounts as (\n\n    select \n        account_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n        and not is_sub_account\n),\n\ninvoice_join as (\n\n    select\n        invoices.invoice_id as transaction_id,\n        invoices.source_relation,\n        invoice_lines.index,\n        invoices.transaction_date as transaction_date,\n\n        \n        case when invoice_lines.bundle_id is not null and invoices.total_amount = 0 then invoices.total_amount\n            else invoice_lines.amount\n        end as amount,\n        case when invoice_lines.bundle_id is not null and invoices.total_amount = 0 \n            then (invoices.total_amount * coalesce(invoices.exchange_rate, 1))\n            else (invoice_lines.amount * coalesce(invoices.exchange_rate, 1))\n        end as converted_amount,\n        case when invoice_lines.detail_type is not null then invoice_lines.detail_type\n            when coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.sales_item_account_id) is not null then 'SalesItemLineDetail'\n            when invoice_lines.discount_account_id is not null then 'DiscountLineDetail'\n            when coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.discount_account_id, invoice_lines.sales_item_account_id) is null then 'NoAccountMapping'\n        end as invoice_line_transaction_type,\n        coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.account_id, invoice_lines.discount_account_id, invoice_lines.sales_item_account_id) as account_id,\n\n        \n\n        coalesce(invoice_lines.sales_item_class_id, invoice_lines.discount_class_id, invoices.class_id) as class_id,\n\n        invoices.customer_id,\n        invoices.department_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices.invoice_id = invoice_lines.invoice_id\n        and invoices.source_relation = invoice_lines.source_relation\n\n    left join items\n        on coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) = items.item_id\n        and invoice_lines.source_relation = items.source_relation\n\n    \n    left join bundle_income_accounts\n        on bundle_income_accounts.bundle_id = invoice_lines.bundle_id\n        and bundle_income_accounts.source_relation = invoice_lines.source_relation\n\n    \n),\n\ninvoice_filter as (\n\n    select *\n    from invoice_join\n    where invoice_line_transaction_type not in ('SubTotalLineDetail','NoAccountMapping')\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        invoice_filter.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        account_id,\n        class_id,\n        department_id,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'debit'\n            else 'credit' \n        end as transaction_type,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'invoice discount'\n            else 'invoice'\n        end as transaction_source\n    from invoice_filter\n\n    union all\n\n    select\n        transaction_id,\n        invoice_filter.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        ar_accounts.account_id,\n        class_id,\n        department_id,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'credit'\n            else 'debit' \n        end as transaction_type,\n        case when invoice_line_transaction_type = 'DiscountLineDetail' then 'invoice discount'\n            else 'invoice'\n        end as transaction_source\n    from invoice_filter\n\n    left join ar_accounts\n        on ar_accounts.source_relation = invoice_filter.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__invoice_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.109304Z", "completed_at": "2024-07-22T20:48:33.112967Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.113514Z", "completed_at": "2024-07-22T20:48:33.113519Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005435943603515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__invoice_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice\"\n),\n\ninvoice_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        invoices.invoice_id as transaction_id,\n        invoices.source_relation,\n        invoice_lines.index as transaction_line_id,\n        invoices.doc_number,\n        'invoice' as transaction_type,\n        invoices.transaction_date,\n        coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) as item_id,\n        coalesce(invoice_lines.quantity, invoice_lines.sales_item_quantity) as item_quantity,\n        invoice_lines.sales_item_unit_price as item_unit_price,\n        case when invoice_lines.account_id is null\n            then coalesce(items.income_account_id, items.expense_account_id, items.asset_account_id)\n            else invoice_lines.account_id\n                end as account_id,\n        coalesce(invoice_lines.discount_class_id, invoice_lines.sales_item_class_id) as class_id,\n        invoices.department_id,\n        invoices.customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        invoice_lines.description,\n        invoice_lines.amount,\n        invoice_lines.amount * coalesce(invoices.exchange_rate, 1) as converted_amount,\n        invoices.total_amount,\n        invoices.total_amount * coalesce(invoices.exchange_rate, 1) as total_converted_amount\n    from invoices\n\n    inner join invoice_lines\n        on invoices.invoice_id = invoice_lines.invoice_id\n        and invoices.source_relation = invoice_lines.source_relation\n\n    left join items\n        on coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) = items.item_id\n        and invoice_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__invoice_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.115155Z", "completed_at": "2024-07-22T20:48:33.118310Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.118738Z", "completed_at": "2024-07-22T20:48:33.118742Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00455927848815918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__item_item_id__source_relation.169465a2a6", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        item_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\"\n    group by item_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.120516Z", "completed_at": "2024-07-22T20:48:33.123910Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.124357Z", "completed_at": "2024-07-22T20:48:33.124361Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005072116851806641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__item_item_id.da906d8fb9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\"\nwhere item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.126148Z", "completed_at": "2024-07-22T20:48:33.129903Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.130400Z", "completed_at": "2024-07-22T20:48:33.130405Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0053958892822265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__journal_entry_double_entry", "compiled": true, "compiled_code": "/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\n\n--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith journal_entries as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__journal_entry\"\n),\n\njournal_entry_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\n),\n\nfinal as (\n\n    select\n        journal_entries.journal_entry_id as transaction_id,\n        journal_entries.source_relation,\n        journal_entry_lines.index,\n        journal_entries.transaction_date,\n        journal_entry_lines.customer_id,\n        journal_entry_lines.vendor_id,\n        journal_entry_lines.amount,\n        (journal_entry_lines.amount * coalesce(journal_entries.exchange_rate, 1)) as converted_amount,\n        journal_entry_lines.account_id,\n        class_id,\n        journal_entry_lines.department_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries.journal_entry_id = journal_entry_lines.journal_entry_id\n        and journal_entries.source_relation = journal_entry_lines.source_relation\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__journal_entry_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.132345Z", "completed_at": "2024-07-22T20:48:33.135478Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.135937Z", "completed_at": "2024-07-22T20:48:33.135941Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004881143569946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__journal_entry_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith journal_entries as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__journal_entry\"\n),\n\njournal_entry_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__journal_entry_line\"\n),\n\nfinal as (\n\n    select\n        journal_entries.journal_entry_id as transaction_id,\n        journal_entries.source_relation,\n        journal_entry_lines.index as transaction_line_id,\n        journal_entries.doc_number,\n        'journal_entry' as transaction_type,\n        journal_entries.transaction_date,\n        journal_entry_lines.account_id,\n        journal_entry_lines.class_id,\n        journal_entry_lines.department_id,\n        journal_entry_lines.customer_id,\n        journal_entry_lines.vendor_id,\n        cast(billable_status as TEXT) as billable_status,\n        journal_entry_lines.description,\n        case when lower(journal_entry_lines.posting_type) = 'credit'\n            then journal_entry_lines.amount * -1 \n            else journal_entry_lines.amount \n        end as amount,\n        case when lower(journal_entry_lines.posting_type) = 'credit'\n            then journal_entry_lines.amount * coalesce(-journal_entries.exchange_rate, -1)\n            else journal_entry_lines.amount * coalesce(journal_entries.exchange_rate, 1)\n        end as converted_amount,\n        journal_entries.total_amount,\n        journal_entries.total_amount * coalesce(journal_entries.exchange_rate, 1) as total_converted_amount\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries.journal_entry_id = journal_entry_lines.journal_entry_id\n        and journal_entries.source_relation = journal_entry_lines.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__journal_entry_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.137648Z", "completed_at": "2024-07-22T20:48:33.140604Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.141019Z", "completed_at": "2024-07-22T20:48:33.141023Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004487276077270508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id.39198c4ff2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect journal_entry_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__journal_entry\"\nwhere journal_entry_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:31.767876Z", "completed_at": "2024-07-22T20:48:32.918310Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:32.919461Z", "completed_at": "2024-07-22T20:48:32.919465Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3875489234924316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(vendor_credit_id as TEXT) as vendor_credit_id,\n        index,\n        cast(account_expense_customer_id as TEXT) as account_expense_customer_id,\n        cast(account_expense_account_id as TEXT) as account_expense_account_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        cast(account_expense_class_id as TEXT) as account_expense_class_id,\n        cast(item_expense_customer_id as TEXT) as item_expense_customer_id,\n        cast(item_expense_item_id as TEXT) as item_expense_item_id,\n        item_expense_quantity,\n        item_expense_unit_price,\n        cast(item_expense_class_id as TEXT) as item_expense_class_id,\n        item_expense_billable_status,\n        amount,\n        description,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.142752Z", "completed_at": "2024-07-22T20:48:33.146504Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.147895Z", "completed_at": "2024-07-22T20:48:33.147903Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021627187728881836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_line_payment_id__index__source_relation.25be3cf2e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__payment_line\"\n    group by payment_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.169996Z", "completed_at": "2024-07-22T20:48:33.173881Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.174435Z", "completed_at": "2024-07-22T20:48:33.174440Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009023904800415039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard.7de7edf458", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        payment_type as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__purchase\"\n    group by payment_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Cash','Check','CreditCard'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.167108Z", "completed_at": "2024-07-22T20:48:33.175209Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.176365Z", "completed_at": "2024-07-22T20:48:33.176369Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011620044708251953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id.6351e3fe26", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__payment_line\"\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.177271Z", "completed_at": "2024-07-22T20:48:33.184000Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.184652Z", "completed_at": "2024-07-22T20:48:33.184657Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009157180786132812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_purchase_id__source_relation.172340b49e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__purchase\"\n    group by purchase_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.181491Z", "completed_at": "2024-07-22T20:48:33.185458Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.186585Z", "completed_at": "2024-07-22T20:48:33.186589Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006289005279541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id.fc2090959b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__purchase\"\nwhere purchase_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.187495Z", "completed_at": "2024-07-22T20:48:33.198511Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.199130Z", "completed_at": "2024-07-22T20:48:33.199137Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013370037078857422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__invoice_join", "compiled": true, "compiled_code": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice\"\n),\n\ninvoice_linked as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__invoice_linked_txn\"\n),\n\n\nestimates as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__estimate\"\n),\n\n\npayments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__payment\"\n),\n\npayment_lines_payment as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__payment_line\"\n\n    where invoice_id is not null\n),\n\ninvoice_est as (\n\n    select\n        invoices.invoice_id,\n        invoice_linked.estimate_id,\n        invoices.source_relation\n    from invoices\n\n    left join invoice_linked\n        on invoices.invoice_id = invoice_linked.invoice_id\n        and invoices.source_relation = invoice_linked.source_relation\n\n    where invoice_linked.estimate_id is not null\n),\n\ninvoice_pay as (\n\n    select\n        invoices.invoice_id,\n        invoice_linked.payment_id,\n        invoices.source_relation\n    from invoices\n\n    left join invoice_linked\n        on invoices.invoice_id = invoice_linked.invoice_id\n        and invoices.source_relation = invoice_linked.source_relation\n\n    where invoice_linked.payment_id is not null\n),\n\ninvoice_link as (\n\n    select\n        invoices.*,\n        invoice_est.estimate_id,\n        invoice_pay.payment_id\n    from invoices\n\n    left join invoice_est\n        on invoices.invoice_id = invoice_est.invoice_id\n        and invoices.source_relation = invoice_est.source_relation\n\n    left join invoice_pay\n        on invoices.invoice_id = invoice_pay.invoice_id\n        and invoices.source_relation = invoice_pay.source_relation\n),\n\nfinal as (\n\n    select\n        cast('invoice' as TEXT) as transaction_type,\n        invoice_link.invoice_id as transaction_id,\n        invoice_link.source_relation,\n        invoice_link.doc_number,\n        invoice_link.estimate_id,\n        invoice_link.department_id,\n        invoice_link.customer_id as customer_id,\n        invoice_link.billing_address_id,\n        invoice_link.shipping_address_id,\n        invoice_link.delivery_type,\n        invoice_link.total_amount as total_amount,\n        (invoice_link.total_amount * coalesce(invoice_link.exchange_rate, 1)) as total_converted_amount,\n        invoice_link.balance as current_balance,\n\n        \n        coalesce(estimates.total_amount, 0) as estimate_total_amount,\n        coalesce(estimates.total_amount, 0) * coalesce(estimates.exchange_rate, 1) as estimate_total_converted_amount,\n        estimates.transaction_status as estimate_status,\n\n        \n\n        invoice_link.due_date as due_date,\n        min(payments.transaction_date) as initial_payment_date,\n        max(payments.transaction_date) as recent_payment_date,\n        sum(coalesce(payment_lines_payment.amount, 0)) as total_current_payment,\n        sum(coalesce(payment_lines_payment.amount, 0) * coalesce(payments.exchange_rate, 1)) as total_current_converted_payment\n\n    from invoice_link\n\n    \n    left join estimates\n        on invoice_link.estimate_id = estimates.estimate_id\n        and invoice_link.source_relation = estimates.source_relation\n    \n    left join payments\n        on invoice_link.payment_id = payments.payment_id\n        and invoice_link.source_relation = payments.source_relation\n\n    left join payment_lines_payment\n        on payments.payment_id = payment_lines_payment.payment_id\n        and payments.source_relation = payment_lines_payment.source_relation\n        and invoice_link.invoice_id = payment_lines_payment.invoice_id\n        and invoice_link.source_relation = payment_lines_payment.source_relation\n\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__invoice_join\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.194166Z", "completed_at": "2024-07-22T20:48:33.200211Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.201249Z", "completed_at": "2024-07-22T20:48:33.201252Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01115107536315918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__payment_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to either undeposited funds or a specified cash account and a credit record to accounts receivable.\n*/\n\n--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith payments as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__payment\"\n),\n\npayment_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__payment_line\"\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__account\"\n),\n\nar_accounts as (\n\n    select\n        account_id,\n        currency_id,\n        source_relation\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n        and not is_sub_account\n),\n\npayment_join as (\n\n    select\n        payments.payment_id as transaction_id,\n        payments.source_relation,\n        row_number() over(partition by payments.payment_id, payments.source_relation \n            order by payments.source_relation, payments.transaction_date) - 1 as index,\n        payments.transaction_date,\n        payments.total_amount as amount,\n        (payments.total_amount * coalesce(payments.exchange_rate, 1)) as converted_amount,\n        payments.deposit_to_account_id,\n        payments.receivable_account_id,\n        payments.customer_id,\n        payments.currency_id\n    from payments\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        payment_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        deposit_to_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source\n    from payment_join\n\n    union all\n\n    select\n        transaction_id,\n        payment_join.source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        coalesce(receivable_account_id, ar_accounts.account_id) as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source\n    from payment_join\n\n    left join ar_accounts\n        on ar_accounts.currency_id = payment_join.currency_id\n        and ar_accounts.source_relation = payment_join.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__payment_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.201491Z", "completed_at": "2024-07-22T20:48:33.209098Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.209715Z", "completed_at": "2024-07-22T20:48:33.209722Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009691953659057617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__payment_payment_id__source_relation.1998a8282e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__payment\"\n    group by payment_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.206109Z", "completed_at": "2024-07-22T20:48:33.210428Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.211497Z", "completed_at": "2024-07-22T20:48:33.211501Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006808042526245117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id.ca2c1ef54f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__payment\"\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.212456Z", "completed_at": "2024-07-22T20:48:33.219402Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.220191Z", "completed_at": "2024-07-22T20:48:33.220199Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009559154510498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__purchase_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to a specified expense account and a credit record to the payment account.\n*/\nwith purchases as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__purchase\"\n),\n\npurchase_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__purchase_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.expense_account_id as parent_expense_account_id\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\npurchase_join as (\n\n    select\n        purchases.purchase_id as transaction_id,\n        purchases.source_relation,\n        purchase_lines.index,\n        purchases.transaction_date,\n        purchase_lines.amount,\n        (purchase_lines.amount * coalesce(purchases.exchange_rate, 1)) as converted_amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, false) = true then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, false) = true then 'credit' else 'debit' end as payed_to_transaction_type,\n        purchases.customer_id,\n        coalesce(purchase_lines.item_expense_class_id, purchase_lines.account_expense_class_id) as class_id,\n        purchases.vendor_id,\n        purchases.department_id\n    from purchases\n\n    inner join purchase_lines\n        on purchases.purchase_id = purchase_lines.purchase_id\n        and purchases.source_relation = purchase_lines.source_relation\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.item_id\n        and purchase_lines.source_relation = items.source_relation\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payed_from_account_id as account_id,\n        class_id,\n        department_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        payed_to_account_id as account_id,\n        class_id,\n        department_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source\n    from purchase_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__purchase_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.215882Z", "completed_at": "2024-07-22T20:48:33.221063Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.222314Z", "completed_at": "2024-07-22T20:48:33.222318Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00773310661315918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__purchase_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_purchase variable within your dbt_project.yml file to False.\n\n\nwith purchases as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__purchase\"\n),\n\nitems as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\npurchase_lines as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__purchase_line\"\n),\n\nfinal as (\n    select\n        purchases.purchase_id as transaction_id,\n        purchases.source_relation,\n        purchase_lines.index as transaction_line_id,\n        purchases.doc_number,\n        'purchase' as transaction_type,\n        purchases.transaction_date,\n        coalesce(purchase_lines.account_expense_account_id, items.expense_account_id) as account_id,\n        purchase_lines.account_expense_class_id as class_id,\n        purchases.department_id,\n        coalesce(purchases.customer_id, account_expense_customer_id, item_expense_customer_id) as customer_id,\n        purchases.vendor_id,\n        coalesce(purchase_lines.account_expense_billable_status, purchase_lines.item_expense_billable_status) as billable_status,\n        purchase_lines.description,\n        case when coalesce(purchases.credit, false)\n            then -1 * purchase_lines.amount\n            else purchase_lines.amount\n        end as amount,\n        case when coalesce(purchases.credit, false)\n            then purchase_lines.amount * coalesce(-purchases.exchange_rate, -1)\n            else purchase_lines.amount * coalesce(purchases.exchange_rate, 1)\n        end as converted_amount,\n        case when coalesce(purchases.credit, false) \n            then -1 * purchases.total_amount\n            else purchases.total_amount\n        end as total_amount,\n        case when coalesce(purchases.credit, false) \n            then purchases.total_amount * coalesce(-purchases.exchange_rate, -1)\n            else purchases.total_amount * coalesce(purchases.exchange_rate, 1)\n        end as total_converted_amount\n    from purchases\n\n    inner join purchase_lines \n        on purchases.purchase_id = purchase_lines.purchase_id\n        and purchases.source_relation = purchase_lines.source_relation\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.item_id\n        and purchase_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__purchase_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.223282Z", "completed_at": "2024-07-22T20:48:33.230046Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.230628Z", "completed_at": "2024-07-22T20:48:33.230633Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009148120880126953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__purchase_line_purchase_id__index__source_relation.a23c661eb5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        purchase_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__purchase_line\"\n    group by purchase_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.227430Z", "completed_at": "2024-07-22T20:48:33.231380Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.232597Z", "completed_at": "2024-07-22T20:48:33.232601Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0064239501953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id.5406fca79c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect purchase_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__purchase_line\"\nwhere purchase_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.233548Z", "completed_at": "2024-07-22T20:48:33.240270Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.240803Z", "completed_at": "2024-07-22T20:48:33.240807Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009212732315063477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_line_refund_id__index__source_relation.614411eb40", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\"\n    group by refund_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.237833Z", "completed_at": "2024-07-22T20:48:33.241020Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.242186Z", "completed_at": "2024-07-22T20:48:33.242190Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005650997161865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id.57df809b80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\"\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.243734Z", "completed_at": "2024-07-22T20:48:33.251687Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.252585Z", "completed_at": "2024-07-22T20:48:33.252591Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010854721069335938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_line_sales_receipt_id__index__source_relation.20e80dcbd5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\"\n    group by sales_receipt_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.247616Z", "completed_at": "2024-07-22T20:48:33.252305Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.253608Z", "completed_at": "2024-07-22T20:48:33.253611Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007361173629760742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.9be0667fc3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\"\nwhere sales_receipt_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.255709Z", "completed_at": "2024-07-22T20:48:33.262520Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.263320Z", "completed_at": "2024-07-22T20:48:33.263330Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009457826614379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__refund_receipt_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified asset account and a credit record the specified cash account.\n*/\n\n--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith refund_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__refund_receipt\"\n),\n\nrefund_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nrefund_receipt_join as (\n\n    select\n        refund_receipts.refund_id as transaction_id,\n        refund_receipts.source_relation,\n        refund_receipt_lines.index,\n        refund_receipts.transaction_date,\n        refund_receipt_lines.amount,\n        (refund_receipt_lines.amount * coalesce(refund_receipts.exchange_rate, 1)) as converted_amount,\n        refund_receipts.deposit_to_account_id as credit_to_account_id,\n        coalesce(refund_receipt_lines.discount_account_id, refund_receipt_lines.sales_item_account_id, items.parent_income_account_id, items.income_account_id) as debit_account_id,\n        refund_receipts.customer_id,\n        coalesce(refund_receipt_lines.sales_item_class_id, refund_receipt_lines.discount_class_id, refund_receipts.class_id) as class_id,\n        refund_receipts.department_id\n    from refund_receipts\n\n    inner join refund_receipt_lines\n        on refund_receipts.refund_id = refund_receipt_lines.refund_id\n        and refund_receipts.source_relation = refund_receipt_lines.source_relation\n\n    left join items\n        on refund_receipt_lines.sales_item_item_id = items.item_id\n        and refund_receipt_lines.source_relation = items.source_relation\n\n    where coalesce(refund_receipt_lines.discount_account_id, refund_receipt_lines.sales_item_account_id, refund_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        credit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'refund_receipt' as transaction_source\n    from refund_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        debit_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'refund_receipt' as transaction_source\n    from refund_receipt_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__refund_receipt_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.259299Z", "completed_at": "2024-07-22T20:48:33.263005Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.264354Z", "completed_at": "2024-07-22T20:48:33.264357Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00966191291809082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__refund_receipt_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith refund_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__refund_receipt\"\n),\n\nrefund_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__refund_receipt_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        refund_receipts.refund_id as transaction_id,\n        refund_receipts.source_relation,\n        refund_receipt_lines.index as transaction_line_id,\n        refund_receipts.doc_number,\n        'refund_receipt' as transaction_type,\n        refund_receipts.transaction_date,\n        refund_receipt_lines.sales_item_item_id as item_id,\n        refund_receipt_lines.sales_item_quantity as item_quantity,\n        refund_receipt_lines.sales_item_unit_price as item_unit_price,\n        case when refund_receipt_lines.sales_item_account_id is null\n            then coalesce(items.asset_account_id, items.income_account_id, items.expense_account_id) \n            else refund_receipt_lines.sales_item_account_id\n                end as account_id,\n        refund_receipts.class_id,\n        refund_receipts.department_id,\n        refund_receipts.customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        refund_receipt_lines.description,\n        refund_receipt_lines.amount * -1 as amount,\n        refund_receipt_lines.amount * coalesce(-refund_receipts.exchange_rate, -1) as converted_amount,\n        refund_receipts.total_amount * -1 as total_amount,\n        refund_receipts.total_amount * coalesce(-refund_receipts.exchange_rate, -1) as total_converted_amount\n    from refund_receipts\n\n    inner join refund_receipt_lines\n        on refund_receipts.refund_id = refund_receipt_lines.refund_id\n        and refund_receipts.source_relation = refund_receipt_lines.source_relation\n\n    left join items\n        on refund_receipt_lines.sales_item_item_id = items.item_id\n        and refund_receipt_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__refund_receipt_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:31.929332Z", "completed_at": "2024-07-22T20:48:33.165103Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.166873Z", "completed_at": "2024-07-22T20:48:33.166878Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.34525728225708, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone\n    \n as \n    \n    alternate_phone\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_phone\n    \n as \n    \n    mobile_phone\n    \n, \n    \n    \n    other_contacts\n    \n as \n    \n    other_contacts\n    \n, \n    \n    \n    primary_phone\n    \n as \n    \n    primary_phone\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_identifier\n    \n as \n    \n    tax_identifier\n    \n, \n    \n    \n    term_id\n    \n as \n    \n    term_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_1099\n    \n as \n    \n    vendor_1099\n    \n, \n    \n    \n    web_url\n    \n as \n    \n    web_url\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as vendor_id,\n        account_number,\n        active as is_active,\n        balance,\n        cast(billing_address_id as TEXT) as billing_address_id,\n        company_name,\n        created_at,\n        currency_id,\n        display_name,\n        web_url,\n        vendor_1099 as is_vendor_1099,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.266494Z", "completed_at": "2024-07-22T20:48:33.272940Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.274540Z", "completed_at": "2024-07-22T20:48:33.274546Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010828971862792969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__refund_receipt_refund_id__source_relation.60f976841d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__refund_receipt\"\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.269887Z", "completed_at": "2024-07-22T20:48:33.273232Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.275228Z", "completed_at": "2024-07-22T20:48:33.275235Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01098489761352539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id.29e8a8216e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__refund_receipt\"\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.279042Z", "completed_at": "2024-07-22T20:48:33.313274Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.316853Z", "completed_at": "2024-07-22T20:48:33.316997Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.042671918869018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__sales_receipt_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the specified cash account and a credit record to the specified asset account.\n*/\n\n--To disable this model, set the using_sales_receipt variable within your dbt_project.yml file to False.\n\n\nwith sales_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__sales_receipt\"\n),\n\nsales_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nsales_receipt_join as (\n\n    select\n        sales_receipts.sales_receipt_id as transaction_id,\n        sales_receipts.source_relation,\n        sales_receipt_lines.index,\n        sales_receipts.transaction_date,\n        case \n            when sales_receipt_lines.discount_account_id is not null \n            then sales_receipt_lines.amount * (-1)\n            else sales_receipt_lines.amount\n        end as amount,\n        case \n            when sales_receipt_lines.discount_account_id is not null \n            then (sales_receipt_lines.amount * coalesce(-sales_receipts.exchange_rate, -1))\n            else (sales_receipt_lines.amount * coalesce(sales_receipts.exchange_rate, 1))\n        end as converted_amount,\n        sales_receipts.deposit_to_account_id as debit_to_account_id,\n        coalesce(sales_receipt_lines.discount_account_id, sales_receipt_lines.sales_item_account_id, items.parent_income_account_id, items.income_account_id) as credit_to_account_id,\n        sales_receipts.customer_id,\n        coalesce(sales_receipt_lines.sales_item_class_id, sales_receipt_lines.discount_class_id, sales_receipts.class_id) as class_id,\n        sales_receipts.department_id\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts.sales_receipt_id = sales_receipt_lines.sales_receipt_id\n        and sales_receipts.source_relation = sales_receipt_lines.source_relation\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.item_id\n        and sales_receipt_lines.source_relation = items.source_relation\n\n    where coalesce(sales_receipt_lines.discount_account_id, sales_receipt_lines.sales_item_account_id, sales_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        debit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'sales_receipt' as transaction_source\n    from sales_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        credit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'sales_receipt' as transaction_source\n    from sales_receipt_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__sales_receipt_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.308008Z", "completed_at": "2024-07-22T20:48:33.318038Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.321466Z", "completed_at": "2024-07-22T20:48:33.321472Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0373539924621582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__sales_receipt_sales_receipt_id__source_relation.36bdbcffde", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        sales_receipt_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__sales_receipt\"\n    group by sales_receipt_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.302553Z", "completed_at": "2024-07-22T20:48:33.318349Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.322098Z", "completed_at": "2024-07-22T20:48:33.322106Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04534101486206055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__sales_receipt_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_sales_receipt variable within your dbt_project.yml file to False.\n\n\nwith sales_receipts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__sales_receipt\"\n),\n\nsales_receipt_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__sales_receipt_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        sales_receipts.sales_receipt_id as transaction_id,\n        sales_receipts.source_relation,\n        sales_receipt_lines.index as transaction_line_id,\n        sales_receipts.doc_number,\n        'sales_receipt' as transaction_type,\n        sales_receipts.transaction_date,\n        sales_receipt_lines.sales_item_item_id as item_id,\n        sales_receipt_lines.sales_item_quantity as item_quantity,\n        sales_receipt_lines.sales_item_unit_price as item_unit_price,\n        coalesce(items.income_account_id, items.asset_account_id, items.expense_account_id) as account_id,\n        sales_receipts.class_id,\n        sales_receipts.department_id,\n        sales_receipts.customer_id,\n        cast(null as TEXT) as vendor_id,\n        cast(null as TEXT) as billable_status,\n        sales_receipt_lines.description,\n        sales_receipt_lines.amount,\n        sales_receipt_lines.amount * (coalesce(sales_receipts.exchange_rate, 1)) as converted_amount,\n        sales_receipts.total_amount,\n        sales_receipts.total_amount * (coalesce(sales_receipts.exchange_rate, 1)) as total_converted_amount\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts.sales_receipt_id = sales_receipt_lines.sales_receipt_id   \n        and sales_receipts.source_relation = sales_receipt_lines.source_relation\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.item_id\n        and sales_receipt_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__sales_receipt_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.325423Z", "completed_at": "2024-07-22T20:48:33.339418Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.350877Z", "completed_at": "2024-07-22T20:48:33.350890Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02909994125366211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id.b97c1a238a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_receipt_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__sales_receipt\"\nwhere sales_receipt_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.339813Z", "completed_at": "2024-07-22T20:48:33.352668Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.357491Z", "completed_at": "2024-07-22T20:48:33.357503Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.029057979583740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__transfer_transfer_id__source_relation.bfa4c7345e", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__transfer\"\n    group by transfer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.330603Z", "completed_at": "2024-07-22T20:48:33.353102Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.357923Z", "completed_at": "2024-07-22T20:48:33.357927Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0301969051361084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__transfer_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to the receiveing account and a credit record to the sending account.\n*/\n\n--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith transfers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__transfer\"\n),\n\ntransfer_body as (\n\n    select\n        transfer_id as transaction_id,\n        source_relation,\n        row_number() over(partition by transfer_id, source_relation \n            order by source_relation, transaction_date) - 1 as index,\n        transaction_date,\n        amount,\n        amount as converted_amount,\n        from_account_id as credit_to_account_id,\n        to_account_id as debit_to_account_id\n    from transfers\n),\n\nfinal as (\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        credit_to_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'credit' as transaction_type,\n        'transfer' as transaction_source\n    from transfer_body\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        cast(null as TEXT) as customer_id,\n        cast(null as TEXT) as vendor_id,\n        amount,\n        converted_amount,\n        debit_to_account_id as account_id,\n        cast(null as TEXT) as class_id,\n        cast(null as TEXT) as department_id,\n        'debit' as transaction_type,\n        'transfer' as transaction_source\n    from transfer_body\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__transfer_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.354423Z", "completed_at": "2024-07-22T20:48:33.359520Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.362042Z", "completed_at": "2024-07-22T20:48:33.362050Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011091947555541992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id.c1c80a253c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transfer_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__transfer\"\nwhere transfer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.363780Z", "completed_at": "2024-07-22T20:48:33.371764Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.376872Z", "completed_at": "2024-07-22T20:48:33.376879Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016791105270385742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_credit_line_vendor_credit_id__index__source_relation.094b35ac4d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_credit_id, index, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line\"\n    group by vendor_credit_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.366994Z", "completed_at": "2024-07-22T20:48:33.375875Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.377153Z", "completed_at": "2024-07-22T20:48:33.377157Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01678609848022461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.dbt_utils_unique_combination_of_columns_stg_quickbooks__vendor_vendor_id__source_relation.4960d9d21a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        vendor_id, source_relation\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor\"\n    group by vendor_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.372045Z", "completed_at": "2024-07-22T20:48:33.378588Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.380493Z", "completed_at": "2024-07-22T20:48:33.380498Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010454893112182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id.f509a77195", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor\"\nwhere vendor_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.396849Z", "completed_at": "2024-07-22T20:48:33.404444Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.405126Z", "completed_at": "2024-07-22T20:48:33.405133Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025529861450195312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__sales_union", "compiled": true, "compiled_code": "\n\nwith sales_union as (\n\n    \n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__sales_receipt_transactions\"\n    \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__invoice_transactions\"\n\n    \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__refund_receipt_transactions\"\n    \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__credit_memo_transactions\"\n    \n),\n\ncustomers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__customer\"\n),\n\n\ndepartments as ( \n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__department\"\n),\n\n\nvendors as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor\"\n),\n\nincome_accounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__account_classifications\"\n    where account_type = 'Income'\n),\n\nfinal as (\n\n    select \n        'sales' as transaction_source,\n        sales_union.transaction_id,\n        sales_union.source_relation,\n        sales_union.transaction_line_id,\n        sales_union.doc_number,\n        sales_union.transaction_type,\n        sales_union.transaction_date,\n        sales_union.item_id,\n        sales_union.item_quantity,\n        sales_union.item_unit_price,\n        sales_union.account_id,\n        income_accounts.name as account_name,\n        income_accounts.account_sub_type as account_sub_type,\n        sales_union.class_id,\n        sales_union.department_id,\n        \n        departments.fully_qualified_name as department_name,\n        \n        sales_union.customer_id,\n        customers.fully_qualified_name as customer_name,\n        customers.website as customer_website,\n        sales_union.vendor_id,\n        vendors.display_name as vendor_name,\n        sales_union.billable_status,\n        sales_union.description,\n        sales_union.amount,\n        sales_union.converted_amount,\n        sales_union.total_amount,\n        sales_union.total_converted_amount\n    from sales_union\n\n    inner join income_accounts\n        on sales_union.account_id = income_accounts.account_id\n        and sales_union.source_relation = income_accounts.source_relation\n\n    left join customers\n        on customers.customer_id = sales_union.customer_id\n        and customers.source_relation = sales_union.source_relation\n\n    left join vendors\n        on vendors.vendor_id = sales_union.vendor_id\n        and vendors.source_relation = sales_union.source_relation\n\n    \n    left join departments\n        on departments.department_id = sales_union.department_id\n        and departments.source_relation = sales_union.source_relation\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__sales_union\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.381693Z", "completed_at": "2024-07-22T20:48:33.406185Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.406749Z", "completed_at": "2024-07-22T20:48:33.406753Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02745199203491211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__ap_ar_enhanced", "compiled": true, "compiled_code": "--To disable this model, set the using_bill and using_invoice variable within your dbt_project.yml file to False.\n\n\nwith bill_join as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__bill_join\"\n),\n\n\ninvoice_join as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__invoice_join\"\n),\n\n\n\ndepartments as ( \n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__department\"\n),\n\n\n\naddresses as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__address\"\n),\n\n\ncustomers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__customer\"\n),\n\nvendors as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor\"\n),\n\nfinal as (\n\n    select\n        bill_join.transaction_type,\n        bill_join.transaction_id,\n        bill_join.source_relation,\n        doc_number,\n        cast(null as TEXT) as estimate_id, \n\n        \n        departments.fully_qualified_name as department_name,\n        \n\n        'vendor' as transaction_with,\n        vendors.display_name as customer_vendor_name,\n        vendors.balance as customer_vendor_balance,\n\n        \n        billing_address.city as customer_vendor_address_city,\n        billing_address.country as customer_vendor_address_country,\n        concat(billing_address.address_1, billing_address.address_2) as customer_vendor_address_line,\n        \n        \n        vendors.web_url as customer_vendor_website,\n        cast(null as TEXT) as delivery_type,\n        cast(null as TEXT) as estimate_status,\n        bill_join.total_amount,\n        bill_join.total_converted_amount,\n        cast(null as numeric(28,6)) as estimate_total_amount,\n        cast(null as numeric(28,6)) as estimate_total_converted_amount,\n        bill_join.current_balance,\n        bill_join.due_date,\n        case when bill_join.current_balance != 0 and \n        ((bill_join.due_date)::date - (bill_join.recent_payment_date)::date)\n     < 0\n            then true\n            else false\n                end as is_overdue,\n        case when bill_join.current_balance != 0 and \n        ((bill_join.due_date)::date - (bill_join.recent_payment_date)::date)\n     < 0\n            then \n        ((bill_join.due_date)::date - (bill_join.recent_payment_date)::date)\n     * -1\n            else 0\n                end as days_overdue,\n        bill_join.initial_payment_date,\n        bill_join.recent_payment_date,\n        bill_join.total_current_payment,\n        bill_join.total_current_converted_payment\n    from bill_join\n\n    \n    left join departments  \n        on bill_join.department_id = departments.department_id\n        and bill_join.source_relation = departments.source_relation\n    \n\n    left join vendors\n        on bill_join.vendor_id = vendors.vendor_id\n        and bill_join.source_relation = vendors.source_relation\n    \n    \n    left join addresses as billing_address\n        on vendors.billing_address_id = billing_address.address_id\n        and vendors.source_relation = billing_address.source_relation\n    \n    \n    \n    union all\n\n    select \n        invoice_join.transaction_type,\n        invoice_join.transaction_id,\n        invoice_join.source_relation,\n        doc_number,\n        invoice_join.estimate_id,\n\n        \n        departments.fully_qualified_name as department_name,\n        \n\n        'customer' as transaction_with,\n        customers.fully_qualified_name as customer_vendor_name,\n        customers.balance as customer_vendor_current_balance,\n\n        \n        billing_address.city as customer_vendor_address_city,\n        billing_address.country as customer_vendor_address_country,\n        concat(billing_address.address_1, billing_address.address_2) as customer_vendor_address_line,\n        \n\n        customers.website as customer_vendor_website,\n        invoice_join.delivery_type,\n        invoice_join.estimate_status,\n        invoice_join.total_amount as total_amount,\n        invoice_join.total_converted_amount,\n        invoice_join.estimate_total_amount as estimate_total_amount,\n        invoice_join.estimate_total_converted_amount as estimate_total_converted_amount,\n        invoice_join.current_balance as current_balance,\n        invoice_join.due_date,\n        case when invoice_join.current_balance != 0 and \n        ((invoice_join.due_date)::date - (invoice_join.recent_payment_date)::date)\n     < 0\n            then true\n            else false\n                end as is_overdue,\n        case when invoice_join.current_balance != 0 and \n        ((invoice_join.due_date)::date - (invoice_join.recent_payment_date)::date)\n     < 0\n            then \n        ((invoice_join.due_date)::date - (invoice_join.recent_payment_date)::date)\n     * -1\n            else 0\n                end as days_overdue,\n        invoice_join.initial_payment_date,\n        invoice_join.recent_payment_date,\n        invoice_join.total_current_payment as total_current_payment,\n        invoice_join.total_current_converted_payment\n\n    from invoice_join\n\n    \n    left join departments  \n        on invoice_join.department_id = departments.department_id\n        and invoice_join.source_relation = departments.source_relation\n    \n\n    \n    left join addresses as billing_address\n        on invoice_join.billing_address_id = billing_address.address_id\n        and invoice_join.source_relation = billing_address.source_relation\n    \n\n    left join customers\n        on invoice_join.customer_id = customers.customer_id\n        and invoice_join.source_relation = customers.source_relation\n\n    \n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__ap_ar_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.408593Z", "completed_at": "2024-07-22T20:48:33.411947Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.412427Z", "completed_at": "2024-07-22T20:48:33.412433Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004924297332763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__ap_ar_enhanced_transaction_id__source_relation__estimate_id.804c1f0bcf", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation, estimate_id\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__ap_ar_enhanced\"\n    group by transaction_id, source_relation, estimate_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:31.880926Z", "completed_at": "2024-07-22T20:48:33.314735Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.318626Z", "completed_at": "2024-07-22T20:48:33.318632Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5548679828643799, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor_credit_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n\n        \n\n\n, cast('' as TEXT) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as vendor_credit_id,\n        balance,\n        cast(doc_number as TEXT) as doc_number,\n        total_amount,\n        currency_id,\n        exchange_rate,\n        created_at,\n        cast(payable_account_id as TEXT) as payable_account_id,\n        cast(department_id as TEXT) as department_id,\n        private_note,\n        cast( date_trunc('day', transaction_date) as date) as transaction_date,\n        cast(vendor_id as TEXT) as vendor_id,\n        _fivetran_deleted,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor_credit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.444405Z", "completed_at": "2024-07-22T20:48:33.451208Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.452866Z", "completed_at": "2024-07-22T20:48:33.452874Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016942977905273438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__vendor_credit_transactions", "compiled": true, "compiled_code": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith vendor_credits as (\n    \n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor_credit\"\n),\n\nvendor_credit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line\"\n),\n\nitems as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\"\n),\n\nfinal as (\n\n    select\n        vendor_credits.vendor_credit_id as transaction_id,\n        vendor_credits.source_relation,\n        vendor_credit_lines.index as transaction_line_id,\n        vendor_credits.doc_number,\n        'vendor_credit' as transaction_type,\n        vendor_credits.transaction_date,\n        case when vendor_credit_lines.account_expense_account_id is null\n            then items.expense_account_id\n            else vendor_credit_lines.account_expense_account_id\n                end as account_id,\n        coalesce(vendor_credit_lines.account_expense_class_id, vendor_credit_lines.item_expense_class_id) as class_id,\n        vendor_credits.department_id,\n        coalesce(vendor_credit_lines.account_expense_customer_id, vendor_credit_lines.item_expense_customer_id) as customer_id,\n        vendor_credits.vendor_id,\n        coalesce(vendor_credit_lines.account_expense_billable_status, vendor_credit_lines.item_expense_billable_status) as billable_status,\n        vendor_credit_lines.description,\n        vendor_credit_lines.amount * -1 as amount,\n        vendor_credit_lines.amount * coalesce(-vendor_credits.exchange_rate, -1) as converted_amount,\n        vendor_credits.total_amount * -1 as total_amount,\n        vendor_credits.total_amount * coalesce(-vendor_credits.exchange_rate, -1) as total_converted_amount\n    from vendor_credits\n\n    inner join vendor_credit_lines\n        on vendor_credits.vendor_credit_id = vendor_credit_lines.vendor_credit_id\n        and vendor_credits.source_relation = vendor_credit_lines.source_relation\n\n    left join items\n        on vendor_credit_lines.item_expense_item_id = items.item_id\n        and vendor_credit_lines.source_relation = items.source_relation\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__vendor_credit_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.439028Z", "completed_at": "2024-07-22T20:48:33.451523Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.453145Z", "completed_at": "2024-07-22T20:48:33.453150Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018014907836914062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__vendor_credit_double_entry", "compiled": true, "compiled_code": "/*\nTable that creates a debit record to payable account and a credit record to the expense account.\n*/\n\n--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith vendor_credits as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor_credit\"\n),\n\nvendor_credit_lines as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor_credit_line\"\n),\n\nitems as (\n\n    select\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\" item\n\n    left join \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__item\" parent\n        on item.parent_item_id = parent.item_id\n        and item.source_relation = parent.source_relation\n),\n\nvendor_credit_join as (\n\n    select\n        vendor_credits.vendor_credit_id as transaction_id,\n        vendor_credits.source_relation,\n        vendor_credit_lines.index,\n        vendor_credits.transaction_date,\n        vendor_credit_lines.amount,\n        (vendor_credit_lines.amount * coalesce(vendor_credits.exchange_rate, 1)) as converted_amount,\n        vendor_credits.payable_account_id as debit_to_account_id,\n        coalesce(vendor_credit_lines.account_expense_account_id, items.parent_income_account_id, items.income_account_id, items.expense_account_id) as credit_account_id,\n        coalesce(account_expense_customer_id, item_expense_customer_id) as customer_id,\n        coalesce(item_expense_class_id, account_expense_class_id) as class_id,\n        vendor_credits.vendor_id,\n        vendor_credits.department_id\n    from vendor_credits\n\n    inner join vendor_credit_lines\n        on vendor_credits.vendor_credit_id = vendor_credit_lines.vendor_credit_id\n        and vendor_credits.source_relation = vendor_credit_lines.source_relation\n\n    left join items\n        on vendor_credit_lines.item_expense_item_id = items.item_id\n        and vendor_credit_lines.source_relation = items.source_relation\n),\n\nfinal as (\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        credit_account_id as account_id,\n        class_id,\n        department_id,\n        'credit' as transaction_type,\n        'vendor_credit' as transaction_source\n    from vendor_credit_join\n\n    union all\n\n    select\n        transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        debit_to_account_id as account_id,\n        class_id,\n        department_id,\n        'debit' as transaction_type,\n        'vendor_credit' as transaction_source\n    from vendor_credit_join\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__vendor_credit_double_entry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.447805Z", "completed_at": "2024-07-22T20:48:33.451896Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.453441Z", "completed_at": "2024-07-22T20:48:33.453445Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017176151275634766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id.1275a5ab5a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_credit_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor_credit\"\nwhere vendor_credit_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.456658Z", "completed_at": "2024-07-22T20:48:33.490870Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.491953Z", "completed_at": "2024-07-22T20:48:33.491964Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0366208553314209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__expenses_union", "compiled": true, "compiled_code": "with expense_union as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__purchase_transactions\"\n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__bill_transactions\"\n     \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__journal_entry_transactions\"\n     \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__deposit_transactions\"\n     \n\n    \n    union all\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__vendor_credit_transactions\"\n    \n),\n\ncustomers as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__customer\"\n),\n\n\ndepartments as ( \n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__department\"\n),\n\n\nvendors as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"stg_quickbooks__vendor\"\n),\n\nexpense_accounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__account_classifications\"\n    where account_type = 'Expense'\n),\n\nfinal as (\n\n    select \n        'expense' as transaction_source,\n        expense_union.transaction_id,\n        expense_union.source_relation,\n        expense_union.transaction_line_id,\n        expense_union.doc_number,\n        expense_union.transaction_type,\n        expense_union.transaction_date,\n        cast(null as TEXT) as item_id,\n        cast(null as numeric(28,6)) as item_quantity,\n        cast(null as numeric(28,6)) as item_unit_price,\n        expense_union.account_id,\n        expense_accounts.name as account_name,\n        expense_accounts.account_sub_type as account_sub_type,\n        expense_union.class_id,\n        expense_union.department_id,\n        \n        departments.fully_qualified_name as department_name,\n        \n        expense_union.customer_id,\n        customers.fully_qualified_name as customer_name,\n        customers.website as customer_website,\n        expense_union.vendor_id,\n        vendors.display_name as vendor_name,\n        expense_union.billable_status,\n        expense_union.description,\n        expense_union.amount,\n        expense_union.converted_amount,\n        expense_union.total_amount,\n        expense_union.total_converted_amount\n\n    from expense_union\n\n    inner join expense_accounts\n        on expense_union.account_id = expense_accounts.account_id\n        and expense_union.source_relation = expense_accounts.source_relation\n\n    left join customers\n        on customers.customer_id = expense_union.customer_id\n        and customers.source_relation = expense_union.source_relation\n\n    left join vendors\n        on vendors.vendor_id = expense_union.vendor_id\n        and vendors.source_relation = expense_union.source_relation\n\n    \n    left join departments\n        on departments.department_id = expense_union.department_id\n        and departments.source_relation = expense_union.source_relation\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__expenses_union\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.493988Z", "completed_at": "2024-07-22T20:48:33.496959Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.497443Z", "completed_at": "2024-07-22T20:48:33.497449Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004629850387573242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__expenses_sales_enhanced", "compiled": true, "compiled_code": "with expenses as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__expenses_union\"\n),\n\n\nsales as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__sales_union\"\n),\n\n\nfinal as (\n    \n    select *\n    from expenses\n\n    \n    union all\n\n    select *\n    from sales\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__expenses_sales_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.499197Z", "completed_at": "2024-07-22T20:48:33.502149Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:33.502595Z", "completed_at": "2024-07-22T20:48:33.502599Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004423856735229492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__expenses_sales_enhanced_transaction_id__source_relation__transaction_line_id__item_id.b57775bacb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id, source_relation, transaction_line_id, item_id\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__expenses_sales_enhanced\"\n    group by transaction_id, source_relation, transaction_line_id, item_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:33.466368Z", "completed_at": "2024-07-22T20:48:36.279067Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:36.280053Z", "completed_at": "2024-07-22T20:48:36.280086Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.924523115158081, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__general_ledger", "compiled": true, "compiled_code": "with unioned_models as (\n\n    \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__purchase_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__purchase_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__bill_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__bill_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__credit_memo_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__credit_memo_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__deposit_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__deposit_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__invoice_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__invoice_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__journal_entry_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__journal_entry_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__payment_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__payment_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__refund_receipt_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__refund_receipt_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__sales_receipt_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__sales_receipt_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__transfer_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__transfer_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__vendor_credit_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__vendor_credit_double_entry\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__bill_payment_double_entry\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"transaction_id\" as text) as \"transaction_id\" ,\n                    cast(\"source_relation\" as text) as \"source_relation\" ,\n                    cast(\"index\" as integer) as \"index\" ,\n                    cast(\"transaction_date\" as date) as \"transaction_date\" ,\n                    cast(\"customer_id\" as text) as \"customer_id\" ,\n                    cast(\"vendor_id\" as text) as \"vendor_id\" ,\n                    cast(\"amount\" as integer) as \"amount\" ,\n                    cast(\"converted_amount\" as integer) as \"converted_amount\" ,\n                    cast(\"account_id\" as text) as \"account_id\" ,\n                    cast(\"class_id\" as text) as \"class_id\" ,\n                    cast(\"department_id\" as text) as \"department_id\" ,\n                    cast(\"transaction_type\" as text) as \"transaction_type\" ,\n                    cast(\"transaction_source\" as text) as \"transaction_source\" \n\n            from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__bill_payment_double_entry\"\n\n            \n        )\n\n        \n),\n\ngl_union as (\n\n    select transaction_id,\n        source_relation,\n        index,\n        transaction_date,\n        customer_id,\n        vendor_id,\n        amount,\n        converted_amount,\n        account_id,\n        class_id,\n        department_id,\n        transaction_type,\n        transaction_source \n    from unioned_models\n),\n\naccounts as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__account_classifications\"\n),\n\n\nadjusted_gl as (\n    \n    select\n        md5(cast(coalesce(cast(gl_union.transaction_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.index as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast( gl_union.transaction_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(gl_union.transaction_source as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) \n            as unique_id,\n        gl_union.transaction_id,\n        gl_union.source_relation,\n        gl_union.index as transaction_index,\n        gl_union.transaction_date,\n        gl_union.customer_id,\n        gl_union.vendor_id,\n        gl_union.amount,\n        gl_union.account_id,\n        gl_union.class_id,\n        gl_union.department_id,\n        accounts.account_number,\n        accounts.name as account_name,\n        accounts.is_sub_account,\n        accounts.parent_account_number,\n        accounts.parent_account_name,\n        accounts.account_type,\n        accounts.account_sub_type,\n        accounts.financial_statement_helper,\n        accounts.balance as account_current_balance,\n        accounts.classification as account_class,\n        gl_union.transaction_type,\n        gl_union.transaction_source,\n        accounts.transaction_type as account_transaction_type,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then gl_union.amount\n            else gl_union.amount * -1\n        end as adjusted_amount,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then gl_union.converted_amount\n            else gl_union.converted_amount * -1\n        end as adjusted_converted_amount\n    from gl_union\n\n    left join accounts\n        on gl_union.account_id = accounts.account_id\n        and gl_union.source_relation = accounts.source_relation\n),\n\nfinal as (\n\n    select\n        *,\n        sum(adjusted_amount) over (partition by account_id, class_id, source_relation\n            order by source_relation, transaction_date, account_id, class_id rows unbounded preceding) as running_balance,\n        sum(adjusted_converted_amount) over (partition by account_id, class_id, source_relation\n            order by source_relation, transaction_date, account_id, class_id rows unbounded preceding) as running_converted_balance\n    from adjusted_gl\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__general_ledger\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:36.426120Z", "completed_at": "2024-07-22T20:48:36.436008Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:36.436592Z", "completed_at": "2024-07-22T20:48:36.436602Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.029925823211669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.not_null_quickbooks__general_ledger_unique_id.06732be667", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__general_ledger\"\nwhere unique_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:36.429771Z", "completed_at": "2024-07-22T20:48:36.436831Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:36.437912Z", "completed_at": "2024-07-22T20:48:36.437916Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013802051544189453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.unique_quickbooks__general_ledger_unique_id.df148e7545", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unique_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__general_ledger\"\nwhere unique_id is not null\ngroup by unique_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:36.395898Z", "completed_at": "2024-07-22T20:48:38.056813Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:38.057604Z", "completed_at": "2024-07-22T20:48:38.057613Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.8061299324035645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__general_ledger_date_spine", "compiled": true, "compiled_code": "-- depends_on: \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__general_ledger\"\n\nwith spine as (\n\n    \n    \n    \n    \n        \n            \n\n        \n\n    \n\n    \n    \n\n    \n\n     \n    \n        \n    \n        \n\n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 67.0\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2019-01-02' as date) + ((interval '1 month') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_month\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_month <= \n\n    cast('2024-07-22' as date) + ((interval '1 month') * (1))\n\n\n\n)\n\nselect * from filtered\n\n\n),\n\ngeneral_ledger as (\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__general_ledger\"\n),\n\ndate_spine as (\n    select\n        cast(date_trunc('year', date_month) as date) as date_year,\n        cast(date_trunc('month', date_month) as date) as period_first_day,\n        cast(\n        \n\n    \n\n    date_trunc('month', date_month) + ((interval '1 month') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date) as period_last_day,\n        row_number() over (order by cast(date_trunc('month', date_month) as date)) as period_index\n    from spine\n),\n\nfinal as (\n    select distinct\n        general_ledger.account_id,\n        general_ledger.source_relation,\n        general_ledger.account_number,\n        general_ledger.account_name,\n        general_ledger.is_sub_account,\n        general_ledger.parent_account_number,\n        general_ledger.parent_account_name,\n        general_ledger.account_type,\n        general_ledger.account_sub_type,\n        general_ledger.account_class,\n        general_ledger.financial_statement_helper,\n        general_ledger.class_id,\n        date_spine.date_year,\n        date_spine.period_first_day,\n        date_spine.period_last_day,\n        date_spine.period_index\n    from general_ledger\n\n    cross join date_spine\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__general_ledger_date_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:38.207020Z", "completed_at": "2024-07-22T20:48:38.233733Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:38.234553Z", "completed_at": "2024-07-22T20:48:38.234561Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030891895294189453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__general_ledger_balances", "compiled": true, "compiled_code": "with general_ledger as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__general_ledger\"\n),\n\ngl_accounting_periods as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__general_ledger_date_spine\"\n),\n\ngl_period_balance as (\n\n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        class_id,\n        cast(date_trunc('year', transaction_date) as date) as date_year,\n        cast(date_trunc('month', transaction_date) as date) as date_month,\n        sum(adjusted_amount) as period_balance,\n        sum(adjusted_converted_amount) as period_converted_balance\n    from general_ledger\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14\n),\n\ngl_cumulative_balance as (\n\n    select\n        *,\n        case when financial_statement_helper = 'balance_sheet'\n            then sum(period_balance) over (partition by account_id, class_id, source_relation \n            order by source_relation, date_month, account_id, class_id rows unbounded preceding) \n            else 0\n                end as cumulative_balance,\n        case when financial_statement_helper = 'balance_sheet'\n            then sum(period_converted_balance) over (partition by account_id, class_id, source_relation \n            order by source_relation, date_month, account_id, class_id rows unbounded preceding) \n            else 0\n                end as cumulative_converted_balance\n    from gl_period_balance\n),\n\ngl_beginning_balance as (\n\n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        class_id,\n        date_year,\n        date_month, \n        period_balance as period_net_change,\n        case when financial_statement_helper = 'balance_sheet'\n            then (cumulative_balance - period_balance) \n            else 0\n                end as period_beginning_balance,\n        cumulative_balance as period_ending_balance,\n        period_converted_balance as period_net_converted_change,\n        case when financial_statement_helper = 'balance_sheet'\n            then (cumulative_converted_balance - period_converted_balance) \n            else 0\n                end as period_beginning_converted_balance,\n        cumulative_converted_balance as period_ending_converted_balance\n    from gl_cumulative_balance\n),\n\ngl_patch as (\n\n    select \n        coalesce(gl_beginning_balance.account_id, gl_accounting_periods.account_id) as account_id,\n        coalesce(gl_beginning_balance.source_relation, gl_accounting_periods.source_relation) as source_relation,\n        coalesce(gl_beginning_balance.account_number, gl_accounting_periods.account_number) as account_number,\n        coalesce(gl_beginning_balance.account_name, gl_accounting_periods.account_name) as account_name,\n        coalesce(gl_beginning_balance.is_sub_account, gl_accounting_periods.is_sub_account) as is_sub_account,\n        coalesce(gl_beginning_balance.parent_account_number, gl_accounting_periods.parent_account_number) as parent_account_number,\n        coalesce(gl_beginning_balance.parent_account_name, gl_accounting_periods.parent_account_name) as parent_account_name,\n        coalesce(gl_beginning_balance.account_type, gl_accounting_periods.account_type) as account_type,\n        coalesce(gl_beginning_balance.account_sub_type, gl_accounting_periods.account_sub_type) as account_sub_type,\n        coalesce(gl_beginning_balance.account_class, gl_accounting_periods.account_class) as account_class,\n        coalesce(gl_beginning_balance.class_id, gl_accounting_periods.class_id) as class_id,\n        coalesce(gl_beginning_balance.financial_statement_helper, gl_accounting_periods.financial_statement_helper) as financial_statement_helper,\n        coalesce(gl_beginning_balance.date_year, gl_accounting_periods.date_year) as date_year,\n        gl_accounting_periods.period_first_day,\n        gl_accounting_periods.period_last_day,\n        gl_accounting_periods.period_index,\n        gl_beginning_balance.period_net_change,\n        gl_beginning_balance.period_beginning_balance,\n        gl_beginning_balance.period_ending_balance,\n        case when gl_beginning_balance.period_beginning_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_beginning_balance\n                end as period_beginning_balance_starter,\n        case when gl_beginning_balance.period_ending_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_ending_balance\n                end as period_ending_balance_starter,\n        gl_beginning_balance.period_net_converted_change,\n        gl_beginning_balance.period_beginning_converted_balance,\n        gl_beginning_balance.period_ending_converted_balance,\n        case when gl_beginning_balance.period_beginning_converted_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_beginning_converted_balance\n                end as period_beginning_converted_balance_starter,\n        case when gl_beginning_balance.period_ending_converted_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_ending_converted_balance\n                end as period_ending_converted_balance_starter\n    from gl_accounting_periods\n\n    left join gl_beginning_balance\n        on gl_beginning_balance.account_id = gl_accounting_periods.account_id\n            and gl_beginning_balance.source_relation = gl_accounting_periods.source_relation\n            and gl_beginning_balance.date_month = gl_accounting_periods.period_first_day\n            and gl_beginning_balance.date_year = gl_accounting_periods.date_year\n            and coalesce(gl_beginning_balance.class_id, '0') = coalesce(gl_accounting_periods.class_id, '0')\n),\n\ngl_value_partition as (\n\n    select\n        *,\n        sum(case when period_ending_balance_starter is null \n            then 0 \n            else 1 \n                end) over (order by source_relation, account_id, class_id, period_last_day rows unbounded preceding) as gl_partition,\n        sum(case when period_ending_converted_balance_starter is null \n            then 0 \n            else 1 \n                end) over (order by source_relation, account_id, class_id, period_last_day rows unbounded preceding) as gl_converted_partition\n    from gl_patch\n),\n\nfinal as (\n    \n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        class_id,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        coalesce(period_net_change, 0) as period_net_change,\n        coalesce(period_beginning_balance_starter,\n            first_value(period_ending_balance_starter) over (partition by gl_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_beginning_balance,\n        coalesce(period_ending_balance_starter,\n            first_value(period_ending_balance_starter) over (partition by gl_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_ending_balance,\n        coalesce(period_net_converted_change, 0) as period_net_converted_change,\n        coalesce(period_beginning_converted_balance_starter,\n            first_value(period_ending_converted_balance_starter) over (partition by gl_converted_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_beginning_converted_balance,\n        coalesce(period_ending_converted_balance_starter,\n            first_value(period_ending_converted_balance_starter) over (partition by gl_partition, source_relation \n            order by source_relation, period_last_day rows unbounded preceding)) as period_ending_converted_balance\n\n    from gl_value_partition\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__general_ledger_balances\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:38.236677Z", "completed_at": "2024-07-22T20:48:38.244482Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:38.245169Z", "completed_at": "2024-07-22T20:48:38.245175Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00976109504699707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__retained_earnings", "compiled": true, "compiled_code": "with general_ledger_balances as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__general_ledger_balances\"\n),\n\nrevenue_starter as (\n\n    select\n        period_first_day,\n        source_relation,\n        sum(period_net_change) as revenue_net_change,\n        sum(period_net_converted_change) as revenue_net_converted_change\n    from general_ledger_balances\n    \n    where account_class = 'Revenue'\n\n    group by 1,2 \n),\n\nexpense_starter as (\n\n    select \n        period_first_day,\n        source_relation,\n        sum(period_net_change) as expense_net_change,\n        sum(period_net_converted_change) as expense_net_converted_change\n    from general_ledger_balances\n    \n    where account_class = 'Expense'\n\n    group by 1,2 \n),\n\nnet_income_loss as (\n\n    select *\n    from revenue_starter\n\n    join expense_starter \n        using (period_first_day, source_relation)\n),\n\nretained_earnings_starter as (\n\n    select\n        cast('9999' as TEXT) as account_id,\n        source_relation,\n        cast('9999-00' as TEXT) as account_number,\n        cast('Net Income Adjustment' as TEXT) as account_name,\n        false as is_sub_account,\n        cast(null as TEXT) as parent_account_number,\n        cast(null as TEXT) as parent_account_name,\n        cast('Equity' as TEXT) as account_type,\n        cast('RetainedEarnings' as TEXT) as account_sub_type,\n        cast('Equity' as TEXT) as account_class,\n        cast(null as TEXT) as class_id,\n        cast('balance_sheet' as TEXT) as financial_statement_helper,\n        cast(date_trunc('year', period_first_day) as date) as date_year,\n        cast(period_first_day as date) as period_first_day,\n        cast(\n        \n\n    \n\n    date_trunc('month', period_first_day) + ((interval '1 month') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date) as period_last_day,\n        (revenue_net_change - expense_net_change) as period_net_change,\n        (revenue_net_converted_change - expense_net_converted_change) as period_net_converted_change\n    from net_income_loss\n),\n\n\nretained_earnings_beginning as (\n\n    select\n        *,\n        sum(coalesce(period_net_change, 0)) over (order by source_relation, period_first_day, period_first_day rows unbounded preceding) as period_ending_balance,\n        sum(coalesce(period_net_converted_change, 0)) over (order by source_relation, period_first_day, period_first_day rows unbounded preceding) as period_ending_converted_balance\n    from retained_earnings_starter\n),\n\nfinal as (\n    \n    select\n        account_id,\n        source_relation,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        class_id,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        period_net_change,\n        lag(coalesce(period_ending_balance,0)) over (order by source_relation, period_first_day) as period_beginning_balance,\n        period_ending_balance,\n        period_net_converted_change,\n        lag(coalesce(period_ending_balance,0)) over (order by source_relation, period_first_day) as period_beginning_converted_balance,\n        period_ending_converted_balance\n    from retained_earnings_beginning\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__retained_earnings\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:38.247433Z", "completed_at": "2024-07-22T20:48:38.251125Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:38.251689Z", "completed_at": "2024-07-22T20:48:38.251694Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0057468414306640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__general_ledger_by_period", "compiled": true, "compiled_code": "with general_ledger_balances as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__general_ledger_balances\"\n),\n\nretained_earnings as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__retained_earnings\"\n),\n\n\n\nbalances_earnings_unioned as (\n\n    select *\n    from general_ledger_balances\n\n    union all \n\n    select *\n    from retained_earnings\n), \n\nfinal as (\n\n    select \n        balances_earnings_unioned.*,\n    \n        case \n            when account_class = 'Asset' then 1\n            when account_class = 'Liability' then 2\n            when account_class = 'Equity' then 3\n            when account_class = 'Revenue' then 1\n            when account_class = 'Expense' then 2\n        end as account_ordinal \n    \n    from balances_earnings_unioned\n    \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__general_ledger_by_period\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:38.260352Z", "completed_at": "2024-07-22T20:48:38.264157Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:38.266663Z", "completed_at": "2024-07-22T20:48:38.266669Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013159990310668945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__balance_sheet", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n    where financial_statement_helper = 'balance_sheet'\n),  \n\nfinal as (\n    select\n        period_first_day as calendar_date, --  Slated to be deprecated; we recommend using `period_first_day` or `period_last_day`\n        period_first_day,\n        period_last_day,\n        source_relation,\n        account_class,\n        class_id,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        period_ending_balance as amount,\n        period_ending_converted_balance as converted_amount,\n        account_ordinal\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__balance_sheet\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:38.262016Z", "completed_at": "2024-07-22T20:48:38.264432Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:38.267116Z", "completed_at": "2024-07-22T20:48:38.267119Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013442039489746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__profit_and_loss", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n    where financial_statement_helper = 'income_statement'\n),  \n\nfinal as (\n    select\n        period_first_day as calendar_date, --  Slated to be deprecated; we recommend using `period_first_day` or `period_last_day`\n        period_first_day,\n        period_last_day,\n        source_relation,\n        account_class,\n        class_id,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        period_net_change as amount,\n        period_net_converted_change as converted_amount,\n        account_ordinal\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__profit_and_loss\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:38.256274Z", "completed_at": "2024-07-22T20:48:38.264883Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:38.268033Z", "completed_at": "2024-07-22T20:48:38.268036Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015662193298339844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.quickbooks.quickbooks__balance_sheet", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n    where period_first_day <= 'YYYY-MM-DD' --Update to be your desired ending date.\n),\n\nliability_date as (\n    select \n        account_id, \n        source_relation,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period\n\n    where account_class = 'Liability'\n\n    group by 1,2\n),\n\nasset_date as (\n    select \n        account_id, \n        source_relation,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period\n\n    where account_class = 'Asset'\n\n    group by 1,2\n),\n\nequity_date as (\n    select \n        account_id,\n        source_relation,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period \n\n    where account_class = 'Equity'\n\n    group by 1,2\n),\n\nliability as (\n    select \n        ld.account_id, \n        l.period_ending_balance,\n        l.period_ending_converted_balance\n    from liability_date ld\n\n    left join (select account_id, source_relation, period_first_day, period_ending_balance, period_ending_converted_balance from general_ledger_by_period where account_class = 'Liability') l\n        on l.account_id = ld.account_id\n            and l.period_first_day = ld.period_first_day\n            and l.source_relation = ld.source_relation\n),\n\nasset as (\n    select \n        ad.account_id, \n        a.period_ending_balance,\n        a.period_ending_converted_balance\n    from asset_date ad\n        left join (select account_id, source_relation, period_first_day, period_ending_balance, period_ending_converted_balance from general_ledger_by_period where account_class = 'Asset') a\n            on a.account_id = ad.account_id\n                and a.period_first_day = ad.period_first_day \n                and a.source_relation = ad.source_relation\n),\n\nequity as (\n    select\n        ed.account_id, \n        e.period_ending_balance,\n        e.period_ending_converted_balance\n    from equity_date ed\n        left join (select account_id, source_relation, period_first_day, period_ending_balance, period_ending_converted_balance from general_ledger_by_period where account_class = 'Equity') e\n            on e.account_id = ed.account_id\n                and e.period_first_day = ed.period_first_day \n                and e.source_relation = ed.source_relation\n)\n\nselect \n    'liability' as balance_sheet_type, \n    sum(period_ending_balance) as balance,\n    sum(period_ending_converted_balance) as converted_balance\nfrom liability\ngroup by 1\n\nunion all\n\nselect \n    'asset' as balance_sheet_type, \n    sum(period_ending_balance) as balance,\n    sum(period_ending_converted_balance) as converted_balance\nfrom asset\ngroup by 1\n\nunion all \n\nselect \n    'equity' as balance_sheet_type, \n    sum(period_ending_balance) as balance,\n    sum(period_ending_converted_balance) as converted_balance\nfrom equity\ngroup by 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:38.258542Z", "completed_at": "2024-07-22T20:48:38.265281Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:38.268706Z", "completed_at": "2024-07-22T20:48:38.268709Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015924930572509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.quickbooks.quickbooks__income_statement", "compiled": true, "compiled_code": "with general_ledger_by_period as (\n    select * \n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n),\n\nrevenue as (\n    select \n        account_id, \n        sum(period_net_change) as ending_balance,\n        sum(period_net_converted_change) as ending_converted_balance\n    from general_ledger_by_period\n\n    where account_class = 'Revenue'\n        and period_first_day between 'YYYY-MM-DD' and 'YYYY-MM-DD' --Update 'YYYY-MM-DD' to be your desired date period.\n\n    group by 1\n),\n\nexpense as (\n    select \n        account_id, \n        sum(period_net_change) as ending_balance,\n        sum(period_net_converted_change) as ending_converted_balance\n    from general_ledger_by_period\n\n    where account_class = 'Expense'\n        and period_first_day between 'YYYY-MM-DD' and 'YYYY-MM-DD' --Update 'YYYY-MM-DD' to be your desired date period.\n\n    group by 1\n),\n\nrevenue_total as (\n    select \n        'revenue' as income_statement_type, \n        sum(ending_balance) as ending_balance,\n        sum(ending_converted_balance) as ending_converted_balance\n    from revenue\n),\n\nexpense_total as (\n    select \n        'expense' as income_statement_type, \n        sum(ending_balance) as ending_balance,\n        sum(ending_converted_balance) as ending_converted_balance\n    from expense\n)\n\nselect * \nfrom revenue_total\n\nunion all \n\nselect * \nfrom expense_total", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:38.272613Z", "completed_at": "2024-07-22T20:48:38.288284Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:38.290024Z", "completed_at": "2024-07-22T20:48:38.290032Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02082204818725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__general_ledger_by_period_account_id__class_id__source_relation__period_first_day.d928e63a45", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, class_id, source_relation, period_first_day\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__general_ledger_by_period\"\n    group by account_id, class_id, source_relation, period_first_day\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:38.276076Z", "completed_at": "2024-07-22T20:48:38.288667Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:38.290764Z", "completed_at": "2024-07-22T20:48:38.290767Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0213620662689209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.int_quickbooks__cash_flow_classifications", "compiled": true, "compiled_code": "with cash_flow_key as (\n\n    select calendar_date as cash_flow_period,\n        source_relation,\n        account_class,\n        class_id,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        amount as cash_ending_period,\n        converted_amount as cash_converted_ending_period,\n        md5(cast(coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(source_relation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(calendar_date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(class_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as account_unique_id\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__balance_sheet\"\n),\n\n\n\ncash_flow_types_and_ordinals as (\n\n    select cash_flow_key.*,\n    \n        case when account_type = 'Bank' then 'Cash or Cash Equivalents'\n            when account_type = 'Accounts Receivable' then 'Operating'\n            when account_type = 'Credit Card' then 'Operating'\n            when account_type = 'Other Current Asset' then 'Operating'\n            when account_type = 'Accounts Payable' then 'Operating'\n            when account_type = 'Other Current Liability' then 'Operating'\n            when account_name = 'Net Income Adjustment' then 'Operating'\n            when account_type = 'Fixed Asset' then 'Investing'\n            when account_type = 'Other Asset' then 'Investing'\n            when account_type = 'Long Term Liability' then 'Financing'\n            when account_class = 'Equity' then 'Financing'\n        end as cash_flow_type,\n        case when account_type = 'Bank' then 1\n            when account_type = 'Accounts Receivable' then 2\n            when account_type = 'Credit Card' then 2\n            when account_type = 'Other Current Asset' then 2\n            when account_type = 'Accounts Payable' then 2\n            when account_type = 'Other Current Liability' then 2\n            when account_name = 'Net Income Adjustment' then 2\n            when account_type = 'Fixed Asset' then 3\n            when account_type = 'Other Asset' then 3\n            when account_type = 'Long Term Liability' then 4\n            when account_class = 'Equity' then 4\n        end as cash_flow_ordinal\n        \n    from cash_flow_key\n\n\n)\n\nselect *\nfrom cash_flow_types_and_ordinals", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__cash_flow_classifications\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:38.281840Z", "completed_at": "2024-07-22T20:48:38.289445Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:38.291914Z", "completed_at": "2024-07-22T20:48:38.291918Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02147698402404785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__balance_sheet_account_id__source_relation__calendar_date__class_id.07368a5056", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation, calendar_date, class_id\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__balance_sheet\"\n    group by account_id, source_relation, calendar_date, class_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:38.285168Z", "completed_at": "2024-07-22T20:48:38.290285Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:38.292741Z", "completed_at": "2024-07-22T20:48:38.292744Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.021928071975708008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.dbt_utils_unique_combination_of_columns_quickbooks__profit_and_loss_account_id__class_id__source_relation__calendar_date.77ccb375e5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, class_id, source_relation, calendar_date\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__profit_and_loss\"\n    group by account_id, class_id, source_relation, calendar_date\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:38.295523Z", "completed_at": "2024-07-22T20:48:38.298238Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:38.298743Z", "completed_at": "2024-07-22T20:48:38.298748Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004478931427001953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.quickbooks.quickbooks__cash_flow_statement", "compiled": true, "compiled_code": "with cash_flow_classifications as (\n\n    select *\n    from \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"int_quickbooks__cash_flow_classifications\"\n), \n\nfinal as (\n    \n    select cash_flow_classifications.*,\n        coalesce(lag(cash_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_beginning_period,\n        cash_ending_period - coalesce(lag(cash_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_net_period,\n        coalesce(lag(cash_converted_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_converted_beginning_period, \n        cash_converted_ending_period - coalesce(lag(cash_converted_ending_period) over (partition by account_id, class_id, source_relation \n            order by source_relation, cash_flow_period), 0) as cash_converted_net_period\n    from cash_flow_classifications\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__cash_flow_statement\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:38.306026Z", "completed_at": "2024-07-22T20:48:38.309089Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:38.310243Z", "completed_at": "2024-07-22T20:48:38.310250Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01007390022277832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.unique_quickbooks__cash_flow_statement_account_unique_id.c6ce55cc0d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_unique_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__cash_flow_statement\"\nwhere account_unique_id is not null\ngroup by account_unique_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-22T20:48:38.301868Z", "completed_at": "2024-07-22T20:48:38.309420Z"}, {"name": "execute", "started_at": "2024-07-22T20:48:38.310556Z", "completed_at": "2024-07-22T20:48:38.310560Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011024951934814453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.quickbooks.not_null_quickbooks__cash_flow_statement_account_unique_id.748fb9ef0a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_unique_id\nfrom \"postgres\".\"quickbooks_integration_tests_12_quickbooks_dev\".\"quickbooks__cash_flow_statement\"\nwhere account_unique_id is null\n\n\n", "relation_name": null}], "elapsed_time": 22.636946201324463, "args": {"use_colors_file": true, "favor_state": false, "defer": false, "target": "postgres", "static_parser": true, "invocation_command": "dbt docs generate -t postgres", "log_level_file": "debug", "compile": true, "send_anonymous_usage_stats": true, "populate_cache": true, "write_json": true, "log_file_max_bytes": 10485760, "partial_parse_file_diff": true, "show_resource_report": false, "log_path": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks/integration_tests/logs", "strict_mode": false, "printer_width": 80, "require_explicit_package_overrides_for_builtin_materializations": false, "static": false, "use_colors": true, "quiet": false, "empty_catalog": false, "introspect": true, "version_check": true, "enable_legacy_logger": false, "select": [], "macro_debugging": false, "log_level": "info", "profiles_dir": "/Users/avinash.kunnath/.dbt", "log_format": "default", "warn_error_options": {"include": [], "exclude": []}, "cache_selected_only": false, "print": true, "exclude": [], "which": "generate", "log_format_file": "debug", "project_dir": "/Users/avinash.kunnath/Documents/dbt_packages/quickbooks/dbt_quickbooks/integration_tests", "indirect_selection": "eager", "partial_parse": true, "vars": {}}}